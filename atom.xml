<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wonderland</title>
  
  <subtitle>welcome to wonderland</subtitle>
  <link href="https://wine1.github.io/atom.xml" rel="self"/>
  
  <link href="https://wine1.github.io/"/>
  <updated>2022-01-24T03:19:33.677Z</updated>
  <id>https://wine1.github.io/</id>
  
  <author>
    <name>Rabbit</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>redux</title>
    <link href="https://wine1.github.io/2022/01/24/redux/"/>
    <id>https://wine1.github.io/2022/01/24/redux/</id>
    <published>2022-01-24T03:10:34.000Z</published>
    <updated>2022-01-24T03:19:33.677Z</updated>
    
    <content type="html"><![CDATA[<p>redux 学习笔记</p><span id="more"></span><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save redux</span><br></pre></td></tr></table></figure><p>附加包<br>多数情况下，你还需要使用 React 绑定库和开发者工具。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save react-redux</span><br><span class="line">npm install --save-dev redux-devtools</span><br></pre></td></tr></table></figure><h3 id="redux-thunk"><a href="#redux-thunk" class="headerlink" title="redux-thunk"></a>redux-thunk</h3><h3 id="combineReducers"><a href="#combineReducers" class="headerlink" title="combineReducers"></a>combineReducers</h3><p>combineReducers 辅助函数的作用是，把一个由多个不同 reducer 函数作为 value 的 object，合并成一个最终的 reducer 函数，然后就可以对这个 reducer 调用 createStore。<br>合并后的 reducer 可以调用各个子 reducer，并把它们的结果合并成一个 state 对象。state 对象的结构由传入的多个 reducer 的 key 决定。</p><p>redux 中的 connect</p><p>connect 用法介绍<br>connect 方法声明：<br>connect([mapStateToProps], [mapDispatchToProps], [mergeProps],[options])<br>作用：连接 React 组件与 Redux store。<br>参数说明：<br>mapStateToProps(state, ownProps) : stateProps<br>这个函数允许我们将 store 中的数据作为 props 绑定到组件上。<br>const mapStateToProps = (state) =&gt; {<br>return{<br>count: state.count<br>}<br>}</p><p>mapDispatchToProps()<br>mapDispatchToProps 是 connect 函数的第二个参数，用来建立 UI 组件的参数到 store.dispatch 方法的映射。也就是说，它定义了哪些用户的操作应该当作 Action，传给 Store。它可以是一个函数，也可以是一个对象。<br>如果 mapDispatchToProps 是一个函数，会得到 dispatch 和 ownProps（容器组件的 props 对象）两个参数。</p><p>}<br>}</p><p>mapDispatchToProps()<br>mapDispatchToProps 是 connect 函数的第二个参数，用来建立 UI 组件的参数到 store.dispatch 方法的映射。也就是说，它定义了哪些用户的操作应该当作 Action，传给 Store。它可以是一个函数，也可以是一个对象。<br>如果 mapDispatchToProps 是一个函数，会得到 dispatch 和 ownProps（容器组件的 props 对象）两个参数。</p><p><img src="/2022/01/24/redux/tu1.jpg" alt="redux"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;redux 学习笔记&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>git常用操作2</title>
    <link href="https://wine1.github.io/2022/01/21/git%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C2/"/>
    <id>https://wine1.github.io/2022/01/21/git%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C2/</id>
    <published>2022-01-21T01:44:43.000Z</published>
    <updated>2022-01-21T02:59:57.415Z</updated>
    
    <content type="html"><![CDATA[<p>git fetch 和 git pull 的区别<br>git rebase<br>git cherry-pick</p><span id="more"></span><p>使用 fech 获取时，并未合并到本地仓库，此时可使用 git merge 实现远程仓库副本与本地仓库的合并。<br>git pull 根据配置的不同，可为 git fetch + git merge 或 git fetch + git rebase</p><p>git rebase<br>rebase 操作可以把本地未 push 的分叉提交历史整理成直线；<br>rebase 的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。</p><h4 id="git-cherry-pick"><a href="#git-cherry-pick" class="headerlink" title="git cherry-pick"></a>git cherry-pick</h4><p>(至今没用过)<br>git cherry-pick 命令的作用，就是将指定的提交（commit）应用于其他分支。<br><code>git cherry-pick &lt;commitHash&gt;</code><br>上面命令就会将指定的提交 commitHash，应用于当前分支。这会在当前分支产生一个新的提交，当然它们的哈希值会不一样。</p><p>git cherry-pick 命令的参数，不一定是提交的哈希值，分支名也是可以的，表示转移该分支的最新提交。<br><code>git cherry-pick feature</code><br>上面代码表示将 feature 分支的最近一次提交，转移到当前分支。</p><p>转移多个提交<br>git cherry-pick <HashA> <HashB><br>上面的命令将 A 和 B 两个提交应用到当前分支。</HashB></HashA></p><p>转移多个连续提交<br>git cherry-pick A..B （不包含 A）<br>git cherry-pick A^..B (包含 A)</p><p>配置项</p><ol><li><code>-e, --edit</code> 打开外部编辑器，编辑提交信息。</li><li><code>-n, --no-commit</code> 只更新工作区和暂存区，不产生新的提交。</li><li><code>-x</code> 在提交信息的末尾追加一行(cherry picked from commit …)，方便以后查到这个提交是如何产生的。</li><li><code>-s，--signoff</code> 在提交信息的末尾追加一行操作者的签名，表示是谁进行了这个操作。</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;git fetch 和 git pull 的区别&lt;br&gt;git rebase&lt;br&gt;git cherry-pick&lt;/p&gt;</summary>
    
    
    
    
    <category term="git" scheme="https://wine1.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>前端缓存策略</title>
    <link href="https://wine1.github.io/2022/01/12/%E5%89%8D%E7%AB%AF%E7%BC%93%E5%AD%98%E7%AD%96%E7%95%A5/"/>
    <id>https://wine1.github.io/2022/01/12/%E5%89%8D%E7%AB%AF%E7%BC%93%E5%AD%98%E7%AD%96%E7%95%A5/</id>
    <published>2022-01-12T09:50:56.000Z</published>
    <updated>2022-01-15T15:27:26.069Z</updated>
    
    <content type="html"><![CDATA[<p>webpack 配置缓存策略<br>文件指纹</p><span id="more"></span><p>hash 只要项目文件有更改 整个项目构建的 hash 就会改变<br>chunkhash 不同的 entry 会生成不同的 chunk 值 应用于静态资源的缓存<br>contenthash 文件内容不变 contenthash 不变（通常用于 css 文件）</p><p>图片和字体采用 hash 与上述 hash 不同的是 默认 md5</p><p>基于文件指纹系统的前端部署方案</p><ol><li>静态资源文件使用持久化缓存 (强缓存)</li><li>生成 style_xxx.css 类型的文件，每次更新过的文件都会生成新的文件名</li><li>改变静态资源后 html 中的引用地址相应改变</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;webpack 配置缓存策略&lt;br&gt;文件指纹&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="工程化" scheme="https://wine1.github.io/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>浏览器缓存策略</title>
    <link href="https://wine1.github.io/2022/01/12/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E7%AD%96%E7%95%A5/"/>
    <id>https://wine1.github.io/2022/01/12/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E7%AD%96%E7%95%A5/</id>
    <published>2022-01-12T06:07:25.000Z</published>
    <updated>2022-01-12T08:51:14.770Z</updated>
    
    <content type="html"><![CDATA[<p>浏览器缓存策略大致可以分为：强缓存、协商缓存</p><span id="more"></span><p>强缓存：</p><ol><li><p>expires<br>HTTP1.0 的特性，标识该资源过期的时间点，它是一个绝对值，格林威治时间（Greenwich Mean Time, GMT），即在这个时间点之后，缓存的资源过期；<br>但是它的缺点也很明显:它是服务器返回的一个绝对时间，客户端如果修改了时间，结果可能不准</p></li><li><p>cache-conctrol<br>cache-control 优先级更高<br>http1.1 的规定 时间是以客户端的时间为准。是一个相对时间，在配置缓存的时候，以秒为单位，用数值表示<br><strong>no-cache: 协商缓存</strong><br>no-store：全部不缓存<br>public:共有缓存 可被代理服务器缓存 允许用户间共享<br>priavte:私有缓存 只被当前浏览器缓存<br>max-age：缓存的内容会在这个值之后过期<br>must-revalidate: 必须再次检查信息是否过期，这时候返回的代码就不是 200 而是 304</p><p>如果在强缓存的情况下修改源文件？</p></li></ol><p>协商缓存</p><ol><li><p>last-modified If-Modified-Since<br>再向服务器发送一次请求判断资源在时间规定内是否有变化<br>缺点：但是有时候也会服务器上资源其实有变化，但是最后修改时间却没有变化的情况<br>浏览器第一次跟服务器请求一个资源，服务器在返回这个资源的同时，在 response 的 header 加上 Last-Modified 的 header，这个 header 表示这个资源在服务器上的最后修改时间<br>浏览器再次跟服务器请求这个资源时，在 request 的 header 上加上 If-Modified-Since 的 header，这个 header 的值就是上一次请求时返回的 Last-Modified 的值：<br>根据浏览器传过来 If-Modified-Since 和资源在服务器上的最后修改时间判断资源是否有变化<br>根据浏览器传过来 If-Modified-Since 和资源在服务器上的最后修改时间判断资源是否有变化</p></li><li><p>etag if-none-match 优先级更高<br>etag 类似一个 hash 不同文件对应不同的 hash<br>if-no-match 请求服务端资源时如果资源没有变化，就不返回内容 从缓存中加载资源<br>浏览器第一次跟服务器请求一个资源，服务器在返回这个资源的同时，在 response 的 header 加上 ETag 的 header，这个 header 是服务器根据当前请求的资源生成的一个唯一标识，这个唯一标识是一个字符串，只要资源有变化这个串就不同，跟最后修改时间没有关系<br>浏览器再次跟服务器请求这个资源时，在 request 的 header 上加上 If-None-Match 的 header，这个 header 的值就是上一次请求时返回的 ETag 的值<br>服务器再次收到资源请求时，根据浏览器传过来 If-None-Match 和然后再根据资源生成一个新的 ETag，如果这两个值相同就说明资源没有变化，否则就是有变化<br>由于 ETag 重新生成过，response header 中还会把这个 ETag 返回，即使这个 ETag 跟之前的没有变化<br>分布式系统里多台机器间文件的 Last-Modified 必须保持一致，以免负载均衡到不同机器导致比对失败；<br>分布式系统尽量关闭掉 ETag(每台机器生成的 ETag 都会不一样）；</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;浏览器缓存策略大致可以分为：强缓存、协商缓存&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="网络" scheme="https://wine1.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>文件上传</title>
    <link href="https://wine1.github.io/2022/01/11/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <id>https://wine1.github.io/2022/01/11/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</id>
    <published>2022-01-11T03:02:40.000Z</published>
    <updated>2022-01-11T09:01:47.002Z</updated>
    
    <content type="html"><![CDATA[<p>react + node 实现文件上传</p><span id="more"></span><p>node 端接收并转存文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">static updateUserAvatar = async (ctx: any) =&gt; &#123;</span><br><span class="line">    const file = ctx.request.files.file || &#123;&#125;</span><br><span class="line">    let code = 0, data = &#123;&#125;, message = &#x27;&#x27;</span><br><span class="line">    if (file) &#123;</span><br><span class="line">        let filePath = path.join(__dirname, &#x27;../../&#x27;, &#x27;public/upload/&#x27;) + `/$&#123;file.name&#125;`;</span><br><span class="line">        // 创建可写流</span><br><span class="line">        const upStream = fs.createWriteStream(filePath);</span><br><span class="line">        const reader = fs.createReadStream(file.path)</span><br><span class="line">        // 可读流通过管道写入可写流</span><br><span class="line">        reader.pipe(upStream);</span><br><span class="line">        message = &quot;上传成功！&quot;;</span><br><span class="line">        data = &#123; path: `/public/upload/$&#123;file.name&#125;` &#125;</span><br><span class="line">        code = 1</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        message = &quot;上传图片失败！&quot;;</span><br><span class="line">        data = &#123;&#125;</span><br><span class="line">        code = 1</span><br><span class="line">    &#125;</span><br><span class="line">    ctx.body = &#123;</span><br><span class="line">        code,</span><br><span class="line">        data,</span><br><span class="line">        message</span><br><span class="line">    &#125;</span><br><span class="line">    return</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端有两种方案</p><ol><li>用 form 表单<br>form 上传 利用 form 表单的 enctype 属性可以把表单提交的对象设置为多媒体资源，然后通过 inuput:file 就可以实现文件上传的功能<br>这个方法相对便捷有效而且还不用考虑跨域的问题，毕竟我们上传的文件终究还是要访问 API 接口；不过这种方法还有一个不方便的地方，就是 form 表单会<strong>默认跳转也就是会在浏览器访问你所提交文件的那个接口</strong>，这个行为处理起来很麻烦。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;http://localhost:8088/api/user/updateUserAvatar&quot; method=&quot;post&quot; encType=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">  &lt;input type=&quot;file&quot; name=&quot;file&quot; value=&#x27;&#x27; onChange=&#123;(e: any) =&gt; handleFileChange(e)&#125; /&gt;</span><br><span class="line">  &lt;input type=&quot;submit&quot; value=&quot;提交&quot; /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>用 xhr 自己发送<br>自己发送时会遇到跨域问题，后端解决</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;input type=&quot;file&quot; name=&quot;file&quot; onChange=&#123;(e: any) =&gt; handleFileChange(e)&#125; /&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;提交&quot; onClick=&#123;submit&#125; /&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    const [fileValue, setFileValue] = useState(&#123;&#125;)</span><br><span class="line"></span><br><span class="line">    const handleFileChange = (e: any) =&gt; &#123;</span><br><span class="line">        const file = e.target.files</span><br><span class="line">        const data = new FormData()</span><br><span class="line">        data.append(&#x27;file&#x27;, file[0])</span><br><span class="line">        setFileValue(data)</span><br><span class="line">    &#125;</span><br><span class="line">    const submit = async () =&gt; &#123;</span><br><span class="line">        const res = await newApi.upload(&#123; data: fileValue &#125;)</span><br><span class="line">        console.log(111, res)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>node 端的跨域处理</p><ol><li>koa2-cors</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install koa2-cors --save</span><br><span class="line">const cors = require(&#x27;koa2-cors&#x27;);</span><br><span class="line">app.use(cors())</span><br></pre></td></tr></table></figure><ol start="2"><li>自己写一个中间件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">app.use(async (ctx: any, next: any) =&gt; &#123;</span><br><span class="line">  ctx.set(&#x27;Access-Control-Allow-Origin&#x27;, &#x27;*&#x27;);</span><br><span class="line">  ctx.set(&#x27;Access-Control-Allow-Headers&#x27;, &#x27;Content-Type, Content-Length, Authorization, Accept, X-Requested-With , yourHeaderFeild&#x27;);</span><br><span class="line">  ctx.set(&#x27;Access-Control-Allow-Methods&#x27;, &#x27;PUT, POST, GET, DELETE, OPTIONS&#x27;);</span><br><span class="line">  if (ctx.method == &#x27;OPTIONS&#x27;) &#123;</span><br><span class="line">    ctx.body = 200;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    await next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>关于登录鉴权</p><p>如果两种场景都有，怎么封装组件</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;react + node 实现文件上传&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>react事件机制</title>
    <link href="https://wine1.github.io/2022/01/10/react%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6/"/>
    <id>https://wine1.github.io/2022/01/10/react%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6/</id>
    <published>2022-01-10T14:40:56.000Z</published>
    <updated>2022-01-11T02:24:04.001Z</updated>
    
    <content type="html"><![CDATA[<p>灵魂发问：<br>• 1 我们写的事件是绑定在 dom 上么，如果不是绑定在哪里？<br>• 2 为什么我们的事件不能绑定给组件？<br>• 3 为什么我们的事件手动绑定 this(不是箭头函数的情况)<br>• 4 为什么不能用 return false 来阻止事件的默认行为？<br>• 5 react 怎么通过 dom 元素，找到与之对应的 fiber 对象的？<br>• 6 onClick 是在冒泡阶段绑定的？ 那么 onClickCapture 就是在事件捕获阶段绑定的吗？</p><span id="more"></span><blockquote><p>React 官方说明过的一点是：合成事件符合 W3C 规范，在底层抹平了不同浏览器的差异，在上层面向开发者暴露统一的、稳定的、与 DOM 原生事件相同的事件接口。开发者们由此便不必再关注烦琐的底层兼容问题，可以专注于业务逻辑的开发。</p></blockquote><pre><code>• 原生事件: 在 componentDidMount生命周期里边进行addEventListener绑定的事件• 合成事件: 通过 JSX 方式绑定的事件，比如 onClick=&#123;() =&gt; this.handle()&#125;</code></pre><p>因为合成事件的触发是基于浏览器的事件机制来实现的，通过冒泡机制冒泡到最顶层元素，然后再由 dispatchEvent 统一去处理</p><p>所以原生事件会早于合成事件先触发</p><p>原生事件中使用 e.stopPropagation() 会阻止合成事件的执行，但在合成事件中使用 e.stopPropagation() 却不会阻止原生事件的执行</p><p>同时在原生事件中 setstate 是同步的<br>在合成事件中 setstate 是异步的</p><p>react 是基于虚拟 dom 的 我们写的 jsx 会被 babel 转换成 React.createElement 的形式<br>而在 jsx 上注册的事件，都被绑定在顶层的 div 上统一管理</p><p>因此关于最开始的六个问题<br>• 1 我们写的事件是绑定在 dom 上么，如果不是绑定在哪里？<br>我们写的事件并不是绑在 dom 上的 而是基于一个合成事件，最终冒泡到顶层 dom 上</p><p>• 2 为什么我们的事件不能绑定给组件？</p><p>• 3 为什么我们的事件手动绑定 this(不是箭头函数的情况)<br>• 4 为什么不能用 return false 来阻止事件的默认行为？<br>• 5 react 怎么通过 dom 元素，找到与之对应的 fiber 对象的？<br>• 6 onClick 是在冒泡阶段绑定的？ 那么 onClickCapture 就是在事件捕获阶段绑定的吗？</p><p>React17 中的事件优化</p><p><img src="/2022/01/10/react%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6/tu1.png" alt="React17 中的事件优化"></p><p><a href="https://juejin.cn/post/6955636911214067720">参考</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;灵魂发问：&lt;br&gt;• 1 我们写的事件是绑定在 dom 上么，如果不是绑定在哪里？&lt;br&gt;• 2 为什么我们的事件不能绑定给组件？&lt;br&gt;• 3 为什么我们的事件手动绑定 this(不是箭头函数的情况)&lt;br&gt;• 4 为什么不能用 return false 来阻止事件的默认行为？&lt;br&gt;• 5 react 怎么通过 dom 元素，找到与之对应的 fiber 对象的？&lt;br&gt;• 6 onClick 是在冒泡阶段绑定的？ 那么 onClickCapture 就是在事件捕获阶段绑定的吗？&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="react" scheme="https://wine1.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>前端安全</title>
    <link href="https://wine1.github.io/2021/12/21/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"/>
    <id>https://wine1.github.io/2021/12/21/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/</id>
    <published>2021-12-21T01:45:56.000Z</published>
    <updated>2021-12-21T01:47:50.901Z</updated>
    
    <content type="html"><![CDATA[<p>XSS、CSRF、JWT</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;XSS、CSRF、JWT&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="安全" scheme="https://wine1.github.io/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>单点登陆</title>
    <link href="https://wine1.github.io/2021/12/21/%E5%8D%95%E7%82%B9%E7%99%BB%E9%99%86/"/>
    <id>https://wine1.github.io/2021/12/21/%E5%8D%95%E7%82%B9%E7%99%BB%E9%99%86/</id>
    <published>2021-12-21T01:30:34.000Z</published>
    <updated>2021-12-21T03:29:59.144Z</updated>
    
    <content type="html"><![CDATA[<p>单页应用鉴权(<a href="https://gitbook.cn/gitchat/column/5c91c813968b1d64b1e08fde/topic/5c99c904ccb24267c1d01f7d">https://gitbook.cn/gitchat/column/5c91c813968b1d64b1e08fde/topic/5c99c904ccb24267c1d01f7d</a>)</p><span id="more"></span><ol><li><p>Authentication cookie<br>使用 cookie 存储一个 session ID（session ID 由服务端管理，进行创建和计时，以便在必要的时候清除）。通过验证 cookie 和 session ID，服务端便能标记一个用户的访问信息。</p><p>服务端可以对 cookie 进行一些关键配置，以保障 cookie 的使用安全，诸如：<br>HttpOnly cookie：浏览器端 JavaScript 没有读 cookie 权限。<br>Secure cookie：传输链路只有在特定安全通道（通常指 HTTPS），请求才会自动加入相关 cookie。<br>SameSite cookie：在跨域情况下，相关 cookie 无法被请求携带，这里主要是为了防止 CSRF 攻击。</p></li><li><p>JWT (json web token)<br>在鉴权过程中，为了验证用户的身份，需要浏览器向服务器端提供一个验证信息，我们称为 token。这个 token 通常由 JSON 数据格式组成，通过 hash 散列算法生成一个字符串，称为 JSON Web Token（JSON 表示令牌的原始类型为 JSON 格式，Web 表示在互联网中进行传播，Token 表示令牌，简称 JWT）。任何 token 持有者都可以无差别地用它来访问相关的资源。</p><p>一个 JWT 包含以下 3 个部分：<br>header（消息头）<br>payload（消息体，储存用户 id、用户角色等） + 过期时间（可选）<br>signature（签名）</p><p>正常来讲，当客户端在提交用户名/密码（或者其他方式）通过认证后，会获得 JWT 的 token，接着通过 JavaScript 脚本，对于所有数据请求都在其 HTTP header 中加上这个 JWT 的 token。服务端接到请求之后，验证 token 的 signature 是否等同于 payload，进而得知 payload 字段是否被中间人更改。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;单页应用鉴权(&lt;a href=&quot;https://gitbook.cn/gitchat/column/5c91c813968b1d64b1e08fde/topic/5c99c904ccb24267c1d01f7d&quot;&gt;https://gitbook.cn/gitchat/column/5c91c813968b1d64b1e08fde/topic/5c99c904ccb24267c1d01f7d&lt;/a&gt;)&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>node项目中使用typescript</title>
    <link href="https://wine1.github.io/2021/12/10/node%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8typescript/"/>
    <id>https://wine1.github.io/2021/12/10/node%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8typescript/</id>
    <published>2021-12-10T10:43:43.000Z</published>
    <updated>2021-12-22T02:34:01.889Z</updated>
    
    <content type="html"><![CDATA[<p>写一个 node 项目，写着写着觉得 ts 在 node 的场景里应该会更加如鱼得水</p><span id="more"></span><p>首先安装一个 ts 如果没有装的话<br><code>npm install -g typescript</code></p><p>在项目下 执行 <code>tsc --init</code>以生成 tsconfig.json 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;compilerOptions&quot;: &#123;</span><br><span class="line">    // &quot;incremental&quot;: true,                   /* 增量编译 提高编译速度*/</span><br><span class="line">    &quot;target&quot;: &quot;ES2019&quot;,                       /* 编译目标ES版本*/</span><br><span class="line">    &quot;module&quot;: &quot;commonjs&quot;,                     /* 编译目标模块系统*/</span><br><span class="line">    // &quot;lib&quot;: [],                             /* 编译过程中需要引入的库文件列表*/</span><br><span class="line">    &quot;declaration&quot;: true,                      /* 编译时创建声明文件 */</span><br><span class="line">    &quot;outDir&quot;: &quot;dist&quot;,                         /* ts编译输出目录 */</span><br><span class="line">    &quot;rootDir&quot;: &quot;src&quot;,                         /* ts编译根目录. */</span><br><span class="line">    // &quot;importHelpers&quot;: true,                 /* 从tslib导入辅助工具函数(如__importDefault)*/</span><br><span class="line">    &quot;strict&quot;: true,                           /* 严格模式开关 等价于noImplicitAny、strictNullChecks、strictFunctionTypes、strictBindCallApply等设置true */</span><br><span class="line">    &quot;noUnusedLocals&quot;: true,                   /* 未使用局部变量报错*/</span><br><span class="line">    &quot;noUnusedParameters&quot;: true,               /* 未使用参数报错*/</span><br><span class="line">    &quot;noImplicitReturns&quot;: true,                /* 有代码路径没有返回值时报错*/</span><br><span class="line">    &quot;noFallthroughCasesInSwitch&quot;: true,       /* 不允许switch的case语句贯穿*/</span><br><span class="line">    &quot;moduleResolution&quot;: &quot;node&quot;,               /* 模块解析策略 */</span><br><span class="line">    &quot;typeRoots&quot;: [                            /* 要包含的类型声明文件路径列表*/</span><br><span class="line">      &quot;./typings&quot;,</span><br><span class="line">      &quot;./node_modules/@types&quot;</span><br><span class="line">      ],</span><br><span class="line">    &quot;allowSyntheticDefaultImports&quot;: false,    /* 允许从没有设置默认导出的模块中默认导入，仅用于提示，不影响编译结果*/</span><br><span class="line">    &quot;esModuleInterop&quot;: false,                /* 允许编译生成文件时，在代码中注入工具类(__importDefault、__importStar)对ESM与commonjs混用情况做兼容处理*/</span><br><span class="line">    &quot;watch&quot;:true                            /** 监听ts文件变化并自动更新 */</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;include&quot;: [                                /* 需要编译的文件 */</span><br><span class="line">    &quot;src/**/*.ts&quot;,</span><br><span class="line">    &quot;typings/**/*.ts&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;exclude&quot;: [                                /* 编译需要排除的文件 */</span><br><span class="line">    &quot;node_modules/**&quot;</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置文件注意点<br>“module”是用来指定设置编译后的 js 代码，使用何种模块规范。由于是开发 node.js 项目，所以选择 commonjs。(有兴趣的话，可以把所有 module 所有可能的值都试一遍，查看编译后的 js 文件的差别，会发现生成的代码还是很不错的，很干净。)</p><p>“target”是编译后的 js 代码遵循何种规范，可以是 es3/es5/es6 等等，这里为了对比 ts 2.0 代码和 es6 代码的不同，使用了”es6”。</p><p>“rootDir”是一个需要注意的地方，它会告诉编译器，此目录下的文件需要经过编译。那么，如果设置了这个选项，又在外部（比如根目录）放置了.ts 文件，会怎么样呢？tsc 会提示一条类似这样的错误：</p><p>生成.d.ts 文件<br>xx.d.ts 声明文件，来说明模块对外公开的方法和属性的类型以及内容。<br><code>npm install --save-dev @types/node</code></p><p>安装 nodemon 以及 ts-node 用于监控 指定目录 ts 代码的改动，改动后自动编译运行项目。<br>// 仅开发环境安装<br><code>npm install --save-dev nodemon</code> // nodemon 用来监视 node.js 应用程序中的任何更改并自动重启服务<br><code>npm install --save-dev ts-node</code> // ts-node 命令可直接执行 TypeScript 源文件而不需要预先编译</p><p>package.json<br>script 中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;start&quot;: &quot;nodemon ./index.ts&quot;,</span><br><span class="line">&quot;watch&quot;: &quot;tsc&quot; //tsconfig中配置 watch:true</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;写一个 node 项目，写着写着觉得 ts 在 node 的场景里应该会更加如鱼得水&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="工程化" scheme="https://wine1.github.io/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>react的setstate相关</title>
    <link href="https://wine1.github.io/2021/06/24/react%E7%9A%84setstate%E7%9B%B8%E5%85%B3/"/>
    <id>https://wine1.github.io/2021/06/24/react%E7%9A%84setstate%E7%9B%B8%E5%85%B3/</id>
    <published>2021-06-24T15:50:54.000Z</published>
    <updated>2022-01-11T02:09:40.755Z</updated>
    
    <content type="html"><![CDATA[<p>setState 本身并不是异步，只是因为 react 的性能优化机制体现为异步。在 react 的生命周期函数或者作用域下为异步，在原生的环境下为同步。</p><p>据 React 核心成员（Redux 的作者）Dan Abramov 所说</p><span id="more"></span><blockquote><p>setState 设计为异步，可以显著的提升性能；如果每次调用 setState 都进行一次更新，那么意味着 render 函数会被频繁调用，界面重新渲染，这样效率是很低的；最好的办法应该是获取到多个更新，之后进行批量更新；如果同步更新了 state，但是还没有执行 render 函数，那么 state 和 props 不能保持同步；state 和 props 不能保持一致性，会在开发中产生很多的问题；</p></blockquote><p>setState 接受两个参数：第二个参数是一个回调函数，这个回调函数会在更新后会执行；<br>格式如下：setState(partialState, callback)</p><h3 id="多个-setstate-合并成一个执行"><a href="#多个-setstate-合并成一个执行" class="headerlink" title="多个 setstate 合并成一个执行"></a>多个 setstate 合并成一个执行</h3><p>这个问题在特定情况下更新列表的时候引发了很大的问题 连续两次拼接列表数据 只会有一次拼接成功</p><p>可以通过传递一个函数 代替传递一个对象来解决</p><p>例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">increment() &#123;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      counter: this.state.counter + 1</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      counter: this.state.counter + 1</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      counter: this.state.counter + 1</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; // counter 执行完后加1</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">increment() &#123;</span><br><span class="line">  this.setState((state, props) =&gt; &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      counter: state.counter + 1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  this.setState((state, props) =&gt; &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      counter: state.counter + 1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  this.setState((state, props) =&gt; &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      counter: state.counter + 1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  &#125;//执行完后加3</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;setState 本身并不是异步，只是因为 react 的性能优化机制体现为异步。在 react 的生命周期函数或者作用域下为异步，在原生的环境下为同步。&lt;/p&gt;
&lt;p&gt;据 React 核心成员（Redux 的作者）Dan Abramov 所说&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="react" scheme="https://wine1.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>react组件通信</title>
    <link href="https://wine1.github.io/2021/06/24/react%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/"/>
    <id>https://wine1.github.io/2021/06/24/react%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/</id>
    <published>2021-06-24T15:50:33.000Z</published>
    <updated>2021-06-24T15:57:11.782Z</updated>
    
    <content type="html"><![CDATA[<p>react中 props是不可更改的 所以在子组件中 想要更改父组件传进来的props 只能把它先赋值给state<br>例如</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">constructor(props) &#123;</span><br><span class="line">      super(props)</span><br><span class="line">      this.state= &#123;</span><br><span class="line">          stateList:this.props.list</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>然后就是要在父组件更新的时候 同步通知到子组件<br>网上搜到最多的就是<code>componentWillReceiveProps</code>这个钩子函数<br>目前还是能用 但是官方文档已经建议废弃这个用法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">componentWillReceiveProps(props) &#123;</span><br><span class="line">   this.setState(&#123;</span><br><span class="line">    stateList:props.list</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>转而使用这个方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">static getDerivedStateFromProps(nextProps,preState) &#123;</span><br><span class="line">    console.log(nextProps,preState)</span><br><span class="line">    if(nextProps.list!==preState.stateList) &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            stateList:[...nextProps.list]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return null</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;react中 props是不可更改的 所以在子组件中 想要更改父组件传进来的props 只能把它先赋值给state&lt;br&gt;例如&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="react" scheme="https://wine1.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>用createReactApp创建项目之后的配置</title>
    <link href="https://wine1.github.io/2021/06/03/%E7%94%A8createReactApp%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E4%B9%8B%E5%90%8E%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
    <id>https://wine1.github.io/2021/06/03/%E7%94%A8createReactApp%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E4%B9%8B%E5%90%8E%E7%9A%84%E9%85%8D%E7%BD%AE/</id>
    <published>2021-06-03T11:09:16.000Z</published>
    <updated>2021-06-03T11:19:17.343Z</updated>
    
    <content type="html"><![CDATA[<p>在用<a href="https://github.com/facebook/create-react-app">create-react-app</a>创建一个新的react项目之后<br>会发现package.json里面没有webpack 这是因为 用这个脚手架创建的项目 webpack相关配置都被集成在 react-scripts中了<br>脚手架本身提供了 ejest 来把webpack相关配置暴露出来 但是这个过程是不可逆的 弹出配置后，你将无法跟随官方的脚步去升级项目的 react-script 版本 谨慎操作 反正我没操作<br>如果我们想自己加一些配置 可以通过craco实现</p><span id="more"></span><ol><li><p>安装包<br><code>yarn add @craco/craco</code></p></li><li><p>项目根目录创建 craco.config.js 文件</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/* craco.config.js */</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改 package.json 的 scripts 命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/* package.json */</span><br><span class="line"></span><br><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">-   &quot;start&quot;: &quot;react-scripts start&quot;,</span><br><span class="line">+   &quot;start&quot;: &quot;craco start&quot;,</span><br><span class="line">-   &quot;build&quot;: &quot;react-scripts build&quot;,</span><br><span class="line">+   &quot;build&quot;: &quot;craco build&quot;</span><br><span class="line">-   &quot;test&quot;: &quot;react-scripts test&quot;,</span><br><span class="line">+   &quot;test&quot;: &quot;craco test&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;在用&lt;a href=&quot;https://github.com/facebook/create-react-app&quot;&gt;create-react-app&lt;/a&gt;创建一个新的react项目之后&lt;br&gt;会发现package.json里面没有webpack 这是因为 用这个脚手架创建的项目 webpack相关配置都被集成在 react-scripts中了&lt;br&gt;脚手架本身提供了 ejest 来把webpack相关配置暴露出来 但是这个过程是不可逆的 弹出配置后，你将无法跟随官方的脚步去升级项目的 react-script 版本 谨慎操作 反正我没操作&lt;br&gt;如果我们想自己加一些配置 可以通过craco实现&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="工程化" scheme="https://wine1.github.io/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>webpack多文件打包</title>
    <link href="https://wine1.github.io/2021/05/27/webpack%E5%A4%9A%E6%96%87%E4%BB%B6%E6%89%93%E5%8C%85/"/>
    <id>https://wine1.github.io/2021/05/27/webpack%E5%A4%9A%E6%96%87%E4%BB%B6%E6%89%93%E5%8C%85/</id>
    <published>2021-05-27T07:51:13.000Z</published>
    <updated>2022-01-13T08:21:58.288Z</updated>
    
    <content type="html"><![CDATA[<p>webpack 多文件打包系统的配置</p><span id="more"></span><p><img src="/2021/05/27/webpack%E5%A4%9A%E6%96%87%E4%BB%B6%E6%89%93%E5%8C%85/tu1.png" alt="tu1"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">   new CleanWebpackPlugin(),</span><br><span class="line">   new HtmlWebpackPlugin(&#123;</span><br><span class="line">     title: &#x27;test1&#x27;,</span><br><span class="line">     template: path.resolve(__dirname, &#x27;./public/index.html&#x27;),</span><br><span class="line">     chunks: [</span><br><span class="line">       &#x27;page1&#x27;,</span><br><span class="line">     ] /** HtmlWebpackPlugin一定要配chunks，否则所有页面的js都会被注入到当前html里 */,</span><br><span class="line">     filename: &#x27;page1.html&#x27;,</span><br><span class="line">   &#125;),</span><br><span class="line">   new HtmlWebpackPlugin(&#123;</span><br><span class="line">     title: &#x27;test2&#x27;,</span><br><span class="line">     template: path.resolve(__dirname, &#x27;./public/index.html&#x27;),</span><br><span class="line">     chunks: [&#x27;page2&#x27;],</span><br><span class="line">     filename: &#x27;page2.html&#x27;,</span><br><span class="line">   &#125;),</span><br><span class="line">   new MiniCssExtractPlugin(&#123;</span><br><span class="line">     filename: &#x27;[name]/css/[name].[contenthash].css&#x27;,</span><br><span class="line">     chunkFilename: &#x27;[name]/css/[id].[contenthash].css&#x27;,</span><br><span class="line">   &#125;),</span><br><span class="line"> ]</span><br></pre></td></tr></table></figure><p><img src="/2021/05/27/webpack%E5%A4%9A%E6%96%87%E4%BB%B6%E6%89%93%E5%8C%85/tu2.png" alt="tu2"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">   path: path.resolve(__dirname, &#x27;./dist&#x27;),</span><br><span class="line">   filename: &#x27;[name]/js/[name][chunkhash].bundle.js&#x27;,</span><br><span class="line">   chunkFilename: &#x27;[name]/js/[name][chunkhash].bundle.js&#x27;,</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><p>打包结果<br><img src="/2021/05/27/webpack%E5%A4%9A%E6%96%87%E4%BB%B6%E6%89%93%E5%8C%85/tu3.png" alt="tu3"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;webpack 多文件打包系统的配置&lt;/p&gt;</summary>
    
    
    
    
    <category term="工程化" scheme="https://wine1.github.io/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>自己搞一个npm包</title>
    <link href="https://wine1.github.io/2021/05/18/%E8%87%AA%E5%B7%B1%E6%90%9E%E4%B8%80%E4%B8%AAnpm%E5%8C%85/"/>
    <id>https://wine1.github.io/2021/05/18/%E8%87%AA%E5%B7%B1%E6%90%9E%E4%B8%80%E4%B8%AAnpm%E5%8C%85/</id>
    <published>2021-05-18T02:59:26.000Z</published>
    <updated>2021-05-18T05:56:00.617Z</updated>
    
    <content type="html"><![CDATA[<p>搞一个npm包给其他业务部门使用 过程中还是有许多问题的<br>主要是 在测试过程中频繁发布npm包 以及版本迭代太快 业务部门更新不及时</p><span id="more"></span><p>npm打包基础<br>注册一个npm账号<br>npm login<br>npm publish</p><p>打包工具<br>rollup </p><p>打包发布配置<br><a href="https://wine1.github.io/2021/04/25/%E5%8F%91%E5%B8%83%E4%B8%80%E4%B8%AAnpm%E5%8C%85/#more">详见另一个文章</a></p><p>测试方法<br>之前真机测试只要发布测试环境即可，但是现在要先发布npm包，安装npm包，然后再发布测试环境，从一个步骤变成了三个步骤。<br>npm link</p><blockquote><p>npm link可以让项目和要使用的npm包之间建立符号连接。</p></blockquote><p>换句话说，如果在项目A中使用组件包B，之前要把B打包并发布，然后项目A安装B，打包并发布测试环境才能验证，现在只需要B打包一下，A直接打包并发布测试环境即可（A打包时获取的是B在本地的打包文件, 即写在B package.json中的main文件）</p><blockquote><p>而要使用npm link, 要做到如下几步：<br>在B包里：<br>npm link // 相当于npm install B -g<br>在A包里：<br>npm link B // 代码无需修改，package.json中引用B的包会自动指向本地B的打包文件<br>A包发布测试环境测试</p></blockquote><p>版本管理<br>tag</p><blockquote><p>tag可以用来指带版本号，用户可以使用npm install <name>@<tag>安装</tag></name></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;搞一个npm包给其他业务部门使用 过程中还是有许多问题的&lt;br&gt;主要是 在测试过程中频繁发布npm包 以及版本迭代太快 业务部门更新不及时&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="工程化" scheme="https://wine1.github.io/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>小程序同层渲染那些坑</title>
    <link href="https://wine1.github.io/2021/05/14/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%90%8C%E5%B1%82%E6%B8%B2%E6%9F%93%E9%82%A3%E4%BA%9B%E5%9D%91/"/>
    <id>https://wine1.github.io/2021/05/14/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%90%8C%E5%B1%82%E6%B8%B2%E6%9F%93%E9%82%A3%E4%BA%9B%E5%9D%91/</id>
    <published>2021-05-14T09:54:07.000Z</published>
    <updated>2021-05-14T11:54:24.570Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p><code>&lt;textarea&gt; &lt;input&gt;</code> 组件的placeholder穿透问题<br>textarea input 上方有元素时 组件输入的内容显示在所有布局的最上面</p><span id="more"></span><p> 解决方案</p><ul><li>input textarea上方元素弹起时 将输入框的内容暂时替换为’’  </li><li>将整个输入框隐藏</li><li>用view标签模拟<code>&lt;textarea&gt;</code>组件，来避免<code>&lt;textarea&gt;</code>组件的placeholder穿透问题</li></ul></li><li><p>live-player组件「同层渲染」失败问题</p></li><li><p>canvas组件「同层渲染」<br>微信小程序从基础库1.0.0开始支持 canvas，2.9.0 起支持一套新 Canvas 2D 接口（需指定 type 属性），同时支持同层渲染，原有接口不再维护<br>canvas的层级最高 会穿透</p></li><li><p>原生组件」无法在 scroll-view、swiper、picker-view、movable-view 中使用，因为如果开发者在可滚动的 DOM 区域，插入「原生组件」作为其子节点，由于「原生组件」是直接插入到 webview 外部的层级，与 DOM 之间没有关联，所以不会跟随移动也不会被裁减。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;textarea&amp;gt; &amp;lt;input&amp;gt;&lt;/code&gt; 组件的placeholder穿透问题&lt;br&gt;textarea input 上方有元素时 组件输入的内容显示在所有布局的最上面&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="小程序" scheme="https://wine1.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>发布一个npm包</title>
    <link href="https://wine1.github.io/2021/04/25/%E5%8F%91%E5%B8%83%E4%B8%80%E4%B8%AAnpm%E5%8C%85/"/>
    <id>https://wine1.github.io/2021/04/25/%E5%8F%91%E5%B8%83%E4%B8%80%E4%B8%AAnpm%E5%8C%85/</id>
    <published>2021-04-25T11:54:24.000Z</published>
    <updated>2021-04-25T12:11:19.177Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做一个项目，做sdk给其他业务部门用<br>通过发到内部的npm库 来给大家用</p><span id="more"></span><p>开始是把打包出来的dist文件拷贝出来单独新建一个文件夹发布到npm<br>但是这样就存在很多问题<br>那么如何过滤 npm publish 的文件<br>下面会介绍两种方法</p><ol><li>.npmignore </li><li>在package.json中添加files:[] 如 <code>&quot;files&quot;: [&quot;dist/types&quot;,&quot;dist/index.es5.js&quot;,&quot;dist/index.umd.js&quot;],</code><br>第一个方法和gitignore类似 npm发布时忽略掉配置中的文件<br>第二个方法则相反 只发布配置中的文件</li></ol><p>如果发错了 或者想删掉测试用的包<br>执行命令 <code>npm unpublish xxx --force</code></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在做一个项目，做sdk给其他业务部门用&lt;br&gt;通过发到内部的npm库 来给大家用&lt;/p&gt;</summary>
    
    
    
    
    <category term="工程化" scheme="https://wine1.github.io/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>三栏布局总结</title>
    <link href="https://wine1.github.io/2021/04/24/%E4%B8%89%E6%A0%8F%E5%B8%83%E5%B1%80%E6%80%BB%E7%BB%93/"/>
    <id>https://wine1.github.io/2021/04/24/%E4%B8%89%E6%A0%8F%E5%B8%83%E5%B1%80%E6%80%BB%E7%BB%93/</id>
    <published>2021-04-24T02:10:23.000Z</published>
    <updated>2021-04-24T03:40:30.752Z</updated>
    
    <content type="html"><![CDATA[<p>17年写过<a href="https://wine1.github.io/2017/12/01/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80%E5%92%8C%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80/">圣杯布局和双飞翼布局</a>，时间一长没写过pc端吧 又忘却了<br>整理下三栏布局方案</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">    &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;main&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">.left &#123;</span><br><span class="line">    float: left;</span><br><span class="line">    height: 200px;</span><br><span class="line">    width: 100px;</span><br><span class="line">    background-color: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> .right &#123;</span><br><span class="line">    float: right;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 200px;</span><br><span class="line">    background-color: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.main &#123;</span><br><span class="line">    margin-left: 100px;</span><br><span class="line">    margin-right: 200px;</span><br><span class="line">    /* overflow: hidden; </span><br><span class="line">    或者用overflow代替上面的margin 通过bfc清除浮动*/</span><br><span class="line">    height: 200px;</span><br><span class="line">    background-color: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.flex布局</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;main&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .container &#123;</span><br><span class="line">        display: flex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .main &#123;</span><br><span class="line">        flex-grow: 1;</span><br><span class="line">        height: 300px;</span><br><span class="line">        background-color: red;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .left &#123;</span><br><span class="line">        order: -1;</span><br><span class="line">        flex: 0 1 100px;</span><br><span class="line">        height: 300px;</span><br><span class="line">        background-color: blue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .right &#123;</span><br><span class="line">        flex: 0 1 100px;</span><br><span class="line">        height: 300px;</span><br><span class="line">        background-color: green;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>flex属性是flex-grow, flex-shrink 和 flex-basis的简写<br>flex-grow：flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大<br>flex-shrink：flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。<br>flex-basis：属性定义了在分配多余空间之前，项目占据的主轴空间（main size）</p><p>3.圣杯布局<br>负边距</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"> &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;main&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .container &#123;</span><br><span class="line">    margin-left: 100px;</span><br><span class="line">    margin-right: 100px;</span><br><span class="line">&#125;</span><br><span class="line">.main &#123;</span><br><span class="line">    float: left;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 300px;</span><br><span class="line">    background-color: red;</span><br><span class="line">&#125;</span><br><span class="line">.left &#123;</span><br><span class="line">    float: left;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 300px;</span><br><span class="line">    margin-left: -100%;</span><br><span class="line">    position: relative;</span><br><span class="line">    left: -100px;</span><br><span class="line">    background-color: blue;</span><br><span class="line">&#125;</span><br><span class="line">.right &#123;</span><br><span class="line">    float: left;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 300px;</span><br><span class="line">    margin-left: -100px;</span><br><span class="line">    position: relative;</span><br><span class="line">    right: -100px;</span><br><span class="line">    background-color: green;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>4.双飞翼布局</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;content&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;main&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;left&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;right&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .content &#123;</span><br><span class="line">        float: left;</span><br><span class="line">        width: 100%;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .main &#123;</span><br><span class="line">        height: 200px;</span><br><span class="line">        margin-left: 100px;</span><br><span class="line">        margin-right: 100px;</span><br><span class="line">        background-color: green;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .left &#123;</span><br><span class="line">        float: left;</span><br><span class="line">        height: 200px;</span><br><span class="line">        width: 100px;</span><br><span class="line">        margin-left: -100%;</span><br><span class="line">        background-color: red;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .right &#123;</span><br><span class="line">        width: 100px;</span><br><span class="line">        height: 200px;</span><br><span class="line">        float: right;</span><br><span class="line">        margin-left: -100px;</span><br><span class="line">        background-color: blue;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>5.绝对定位布局</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;17年写过&lt;a href=&quot;https://wine1.github.io/2017/12/01/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80%E5%92%8C%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80/&quot;&gt;圣杯布局和双飞翼布局&lt;/a&gt;，时间一长没写过pc端吧 又忘却了&lt;br&gt;整理下三栏布局方案&lt;/p&gt;</summary>
    
    
    
    
    <category term="css" scheme="https://wine1.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>原型和原型链</title>
    <link href="https://wine1.github.io/2021/04/17/%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <id>https://wine1.github.io/2021/04/17/%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/</id>
    <published>2021-04-17T15:41:09.000Z</published>
    <updated>2021-04-17T15:46:55.763Z</updated>
    
    <content type="html"><![CDATA[<p>解析原型和原型链</p><span id="more"></span><p><img src="/2021/04/17/%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/prototype.jpg"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;解析原型和原型链&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>网络之option</title>
    <link href="https://wine1.github.io/2021/04/17/%E7%BD%91%E7%BB%9C%E4%B9%8Boption/"/>
    <id>https://wine1.github.io/2021/04/17/%E7%BD%91%E7%BB%9C%E4%B9%8Boption/</id>
    <published>2021-04-17T01:04:12.000Z</published>
    <updated>2021-04-17T01:53:16.002Z</updated>
    
    <content type="html"><![CDATA[<p>MDN的CORS一文中提到：<br>规范要求，对那些可能对服务器数据产生副作用的 HTTP 请求方法（特别是 GET 以外的 HTTP 请求，或者搭配某些 MIME 类型的 POST 请求），浏览器必须首先使用 OPTIONS 方法发起一个预检请求（preflight request），从而获知服务端是否允许该跨域请求。</p><span id="more"></span><p>某些请求不会触发 CORS 预检请求，这样的请求一般称为”简单请求”,而会触发预检的请求则称为”复杂请求”。</p><p>简单请求：<br>简单请求的 HTTP 方法只能是 GET、HEAD 或 POST<br>简单请求的 HTTP 头只能是 Accept/Accept-Language/Conent-Language/Content-Type 等<br>简单请求的 Content-Type 头只能是 text/plain、multipart/form-data 或 application/x-www-form-urlencoded</p><h3 id="CORS预检请求触发条件"><a href="#CORS预检请求触发条件" class="headerlink" title="CORS预检请求触发条件"></a>CORS预检请求触发条件</h3><ol><li>使用了下面任一HTTP 方法：     <br>PUT/DELETE/CONNECT/OPTIONS/TRACE/PATCH     </li><li>人为设置了以下集合之外首部字段：     <br>Accept/Accept-Language/Content-Language/Content-Type/DPR/Downlink/Save-Data/Viewport-Width/Width     </li><li>Content-Type 的值不属于下列之一:     <br>application/x-www-form-urlencoded、multipart/form-data、text/plain</li></ol><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>当我们发起跨域请求时，如果是简单请求，那么我们只会发出一次请求，但是如果是复杂请求则先发出 options 请求，用于确认目标资源是否支持跨域，然后浏览器会根据服务端响应的 header 自动处理剩余的请求，如果响应支持跨域，则继续发出正常请求，如果不支持，则在控制台显示错误。</p><p>由此可见，当触发预检时，跨域请求便会发送 2 次请求，既增加了请求数，也延迟了请求真正发起的时间，严重影响性能。</p><p>所以，我们可以优化 Options 请求，主要有 2 种方法。</p><p>转为简单请求，如用 JSONP 做跨域请求<br>对 options 请求进行缓存，服务器端设置 Access-Control-Max-Age 字段，那么当第一次请求该 URL 时会发出 OPTIONS 请求，浏览器会根据返回的 Access-Control-Max-Age 字段缓存该请求的 OPTIONS 预检请求的响应结果（具体缓存时间还取决于浏览器的支持的默认最大值，取两者最小值，一般为 10 分钟）。在缓存有效期内，该资源的请求（URL 和 header 字段都相同的情况下）不会再触发预检。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;MDN的CORS一文中提到：&lt;br&gt;规范要求，对那些可能对服务器数据产生副作用的 HTTP 请求方法（特别是 GET 以外的 HTTP 请求，或者搭配某些 MIME 类型的 POST 请求），浏览器必须首先使用 OPTIONS 方法发起一个预检请求（preflight request），从而获知服务端是否允许该跨域请求。&lt;/p&gt;</summary>
    
    
    
    
    <category term="网络" scheme="https://wine1.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>BFS和DFS</title>
    <link href="https://wine1.github.io/2021/04/03/BFS%E5%92%8CDFS/"/>
    <id>https://wine1.github.io/2021/04/03/BFS%E5%92%8CDFS/</id>
    <published>2021-04-03T11:30:49.000Z</published>
    <updated>2021-04-24T03:41:47.258Z</updated>
    
    <content type="html"><![CDATA[<p>DFS算法和BFS算法<br><a href="https://wine1.github.io/2020/06/12/%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/">BFS</a></p><span id="more"></span><p>递归实现dfs<br>简单的二叉树dfs<br><a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal/">https://leetcode-cn.com/problems/binary-tree-preorder-traversal/</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var preorderTraversal = function (root) &#123;</span><br><span class="line">  let res = [];</span><br><span class="line">  if (!root) &#123;</span><br><span class="line">    res = [];</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    const dfs = function (node) &#123;</span><br><span class="line">      // console.log(node);</span><br><span class="line">      if (!node) return;</span><br><span class="line">      res.push(node.val);</span><br><span class="line">      dfs(node.left);</span><br><span class="line">      dfs(node.right);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    dfs(root);</span><br><span class="line">  &#125;</span><br><span class="line">  return res;</span><br><span class="line">&#125;;</span><br><span class="line">console.log(preorderTraversal([1, null, 2, 3]));</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;DFS算法和BFS算法&lt;br&gt;&lt;a href=&quot;https://wine1.github.io/2020/06/12/%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/&quot;&gt;BFS&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="数据结构" scheme="https://wine1.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
</feed>
