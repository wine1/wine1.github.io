<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>哦。</title>
  
  <subtitle>日拱一卒 功不唐捐</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wine1.github.io/"/>
  <updated>2021-06-03T11:19:17.343Z</updated>
  <id>https://wine1.github.io/</id>
  
  <author>
    <name>田珍珠女士</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>用createReactApp创建项目之后的配置</title>
    <link href="https://wine1.github.io/2021/06/03/%E7%94%A8createReactApp%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E4%B9%8B%E5%90%8E%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
    <id>https://wine1.github.io/2021/06/03/%E7%94%A8createReactApp%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E4%B9%8B%E5%90%8E%E7%9A%84%E9%85%8D%E7%BD%AE/</id>
    <published>2021-06-03T11:09:16.000Z</published>
    <updated>2021-06-03T11:19:17.343Z</updated>
    
    <content type="html"><![CDATA[<p>在用<a href="https://github.com/facebook/create-react-app" target="_blank" rel="noopener">create-react-app</a>创建一个新的react项目之后<br>会发现package.json里面没有webpack 这是因为 用这个脚手架创建的项目 webpack相关配置都被集成在 react-scripts中了<br>脚手架本身提供了 ejest 来把webpack相关配置暴露出来 但是这个过程是不可逆的 弹出配置后，你将无法跟随官方的脚步去升级项目的 react-script 版本 谨慎操作 反正我没操作<br>如果我们想自己加一些配置 可以通过craco实现</p><a id="more"></a><ol><li><p>安装包<br><code>yarn add @craco/craco</code></p></li><li><p>项目根目录创建 craco.config.js 文件</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/* craco.config.js */</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改 package.json 的 scripts 命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/* package.json */</span><br><span class="line"></span><br><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">-   &quot;start&quot;: &quot;react-scripts start&quot;,</span><br><span class="line">+   &quot;start&quot;: &quot;craco start&quot;,</span><br><span class="line">-   &quot;build&quot;: &quot;react-scripts build&quot;,</span><br><span class="line">+   &quot;build&quot;: &quot;craco build&quot;</span><br><span class="line">-   &quot;test&quot;: &quot;react-scripts test&quot;,</span><br><span class="line">+   &quot;test&quot;: &quot;craco test&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在用&lt;a href=&quot;https://github.com/facebook/create-react-app&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;create-react-app&lt;/a&gt;创建一个新的react项目之后&lt;br&gt;会发现package.json里面没有webpack 这是因为 用这个脚手架创建的项目 webpack相关配置都被集成在 react-scripts中了&lt;br&gt;脚手架本身提供了 ejest 来把webpack相关配置暴露出来 但是这个过程是不可逆的 弹出配置后，你将无法跟随官方的脚步去升级项目的 react-script 版本 谨慎操作 反正我没操作&lt;br&gt;如果我们想自己加一些配置 可以通过craco实现&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="工程化" scheme="https://wine1.github.io/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>webpack多文件打包</title>
    <link href="https://wine1.github.io/2021/05/27/webpack%E5%A4%9A%E6%96%87%E4%BB%B6%E6%89%93%E5%8C%85/"/>
    <id>https://wine1.github.io/2021/05/27/webpack%E5%A4%9A%E6%96%87%E4%BB%B6%E6%89%93%E5%8C%85/</id>
    <published>2021-05-27T07:51:13.000Z</published>
    <updated>2021-06-03T11:08:14.015Z</updated>
    
    <content type="html"><![CDATA[<p>webpack5相较于4还是有很大的变化的<br>比如说 之前用于清除dist的 clean-webpack-plugin 在5里面被 output:{clean:true} 代替</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;webpack5相较于4还是有很大的变化的&lt;br&gt;比如说 之前用于清除dist的 clean-webpack-plugin 在5里面被 output:{clean:true} 代替&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="工程化" scheme="https://wine1.github.io/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>自己搞一个npm包</title>
    <link href="https://wine1.github.io/2021/05/18/%E8%87%AA%E5%B7%B1%E6%90%9E%E4%B8%80%E4%B8%AAnpm%E5%8C%85/"/>
    <id>https://wine1.github.io/2021/05/18/%E8%87%AA%E5%B7%B1%E6%90%9E%E4%B8%80%E4%B8%AAnpm%E5%8C%85/</id>
    <published>2021-05-18T02:59:26.000Z</published>
    <updated>2021-05-18T05:56:00.617Z</updated>
    
    <content type="html"><![CDATA[<p>搞一个npm包给其他业务部门使用 过程中还是有许多问题的<br>主要是 在测试过程中频繁发布npm包 以及版本迭代太快 业务部门更新不及时</p><a id="more"></a><p>npm打包基础<br>注册一个npm账号<br>npm login<br>npm publish</p><p>打包工具<br>rollup </p><p>打包发布配置<br><a href="https://wine1.github.io/2021/04/25/%E5%8F%91%E5%B8%83%E4%B8%80%E4%B8%AAnpm%E5%8C%85/#more">详见另一个文章</a></p><p>测试方法<br>之前真机测试只要发布测试环境即可，但是现在要先发布npm包，安装npm包，然后再发布测试环境，从一个步骤变成了三个步骤。<br>npm link</p><blockquote><p>npm link可以让项目和要使用的npm包之间建立符号连接。</p></blockquote><p>换句话说，如果在项目A中使用组件包B，之前要把B打包并发布，然后项目A安装B，打包并发布测试环境才能验证，现在只需要B打包一下，A直接打包并发布测试环境即可（A打包时获取的是B在本地的打包文件, 即写在B package.json中的main文件）</p><blockquote><p>而要使用npm link, 要做到如下几步：<br>在B包里：<br>npm link // 相当于npm install B -g<br>在A包里：<br>npm link B // 代码无需修改，package.json中引用B的包会自动指向本地B的打包文件<br>A包发布测试环境测试</p></blockquote><p>版本管理<br>tag</p><blockquote><p>tag可以用来指带版本号，用户可以使用npm install <name>@<tag>安装</tag></name></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;搞一个npm包给其他业务部门使用 过程中还是有许多问题的&lt;br&gt;主要是 在测试过程中频繁发布npm包 以及版本迭代太快 业务部门更新不及时&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="工程化" scheme="https://wine1.github.io/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>小程序同层渲染那些坑</title>
    <link href="https://wine1.github.io/2021/05/14/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%90%8C%E5%B1%82%E6%B8%B2%E6%9F%93%E9%82%A3%E4%BA%9B%E5%9D%91/"/>
    <id>https://wine1.github.io/2021/05/14/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%90%8C%E5%B1%82%E6%B8%B2%E6%9F%93%E9%82%A3%E4%BA%9B%E5%9D%91/</id>
    <published>2021-05-14T09:54:07.000Z</published>
    <updated>2021-05-14T11:54:24.570Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p><code>&lt;textarea&gt; &lt;input&gt;</code> 组件的placeholder穿透问题<br>textarea input 上方有元素时 组件输入的内容显示在所有布局的最上面</p><a id="more"></a><p> 解决方案</p><ul><li>input textarea上方元素弹起时 将输入框的内容暂时替换为’’  </li><li>将整个输入框隐藏</li><li>用view标签模拟<code>&lt;textarea&gt;</code>组件，来避免<code>&lt;textarea&gt;</code>组件的placeholder穿透问题</li></ul></li><li><p>live-player组件「同层渲染」失败问题</p></li><li><p>canvas组件「同层渲染」<br>微信小程序从基础库1.0.0开始支持 canvas，2.9.0 起支持一套新 Canvas 2D 接口（需指定 type 属性），同时支持同层渲染，原有接口不再维护<br>canvas的层级最高 会穿透</p></li><li><p>原生组件」无法在 scroll-view、swiper、picker-view、movable-view 中使用，因为如果开发者在可滚动的 DOM 区域，插入「原生组件」作为其子节点，由于「原生组件」是直接插入到 webview 外部的层级，与 DOM 之间没有关联，所以不会跟随移动也不会被裁减。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;textarea&amp;gt; &amp;lt;input&amp;gt;&lt;/code&gt; 组件的placeholder穿透问题&lt;br&gt;textarea input 上方有元素时 组件输入的内容显示在所有布局的最上面&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="小程序" scheme="https://wine1.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>发布一个npm包</title>
    <link href="https://wine1.github.io/2021/04/25/%E5%8F%91%E5%B8%83%E4%B8%80%E4%B8%AAnpm%E5%8C%85/"/>
    <id>https://wine1.github.io/2021/04/25/%E5%8F%91%E5%B8%83%E4%B8%80%E4%B8%AAnpm%E5%8C%85/</id>
    <published>2021-04-25T11:54:24.000Z</published>
    <updated>2021-04-25T12:11:19.177Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做一个项目，做sdk给其他业务部门用<br>通过发到内部的npm库 来给大家用</p><a id="more"></a><p>开始是把打包出来的dist文件拷贝出来单独新建一个文件夹发布到npm<br>但是这样就存在很多问题<br>那么如何过滤 npm publish 的文件<br>下面会介绍两种方法</p><ol><li>.npmignore </li><li>在package.json中添加files:[] 如 <code>&quot;files&quot;: [&quot;dist/types&quot;,&quot;dist/index.es5.js&quot;,&quot;dist/index.umd.js&quot;],</code><br>第一个方法和gitignore类似 npm发布时忽略掉配置中的文件<br>第二个方法则相反 只发布配置中的文件</li></ol><p>如果发错了 或者想删掉测试用的包<br>执行命令 <code>npm unpublish xxx --force</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在做一个项目，做sdk给其他业务部门用&lt;br&gt;通过发到内部的npm库 来给大家用&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="工程化" scheme="https://wine1.github.io/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>三栏布局总结</title>
    <link href="https://wine1.github.io/2021/04/24/%E4%B8%89%E6%A0%8F%E5%B8%83%E5%B1%80%E6%80%BB%E7%BB%93/"/>
    <id>https://wine1.github.io/2021/04/24/%E4%B8%89%E6%A0%8F%E5%B8%83%E5%B1%80%E6%80%BB%E7%BB%93/</id>
    <published>2021-04-24T02:10:23.000Z</published>
    <updated>2021-04-24T03:40:30.752Z</updated>
    
    <content type="html"><![CDATA[<p>17年写过<a href="https://wine1.github.io/2017/12/01/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80%E5%92%8C%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80/">圣杯布局和双飞翼布局</a>，时间一长没写过pc端吧 又忘却了<br>整理下三栏布局方案</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">    &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;main&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">.left &#123;</span><br><span class="line">    float: left;</span><br><span class="line">    height: 200px;</span><br><span class="line">    width: 100px;</span><br><span class="line">    background-color: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> .right &#123;</span><br><span class="line">    float: right;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 200px;</span><br><span class="line">    background-color: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.main &#123;</span><br><span class="line">    margin-left: 100px;</span><br><span class="line">    margin-right: 200px;</span><br><span class="line">    /* overflow: hidden; </span><br><span class="line">    或者用overflow代替上面的margin 通过bfc清除浮动*/</span><br><span class="line">    height: 200px;</span><br><span class="line">    background-color: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.flex布局</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;main&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .container &#123;</span><br><span class="line">        display: flex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .main &#123;</span><br><span class="line">        flex-grow: 1;</span><br><span class="line">        height: 300px;</span><br><span class="line">        background-color: red;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .left &#123;</span><br><span class="line">        order: -1;</span><br><span class="line">        flex: 0 1 100px;</span><br><span class="line">        height: 300px;</span><br><span class="line">        background-color: blue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .right &#123;</span><br><span class="line">        flex: 0 1 100px;</span><br><span class="line">        height: 300px;</span><br><span class="line">        background-color: green;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>flex属性是flex-grow, flex-shrink 和 flex-basis的简写<br>flex-grow：flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大<br>flex-shrink：flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。<br>flex-basis：属性定义了在分配多余空间之前，项目占据的主轴空间（main size）</p><p>3.圣杯布局<br>负边距</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"> &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;main&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .container &#123;</span><br><span class="line">    margin-left: 100px;</span><br><span class="line">    margin-right: 100px;</span><br><span class="line">&#125;</span><br><span class="line">.main &#123;</span><br><span class="line">    float: left;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 300px;</span><br><span class="line">    background-color: red;</span><br><span class="line">&#125;</span><br><span class="line">.left &#123;</span><br><span class="line">    float: left;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 300px;</span><br><span class="line">    margin-left: -100%;</span><br><span class="line">    position: relative;</span><br><span class="line">    left: -100px;</span><br><span class="line">    background-color: blue;</span><br><span class="line">&#125;</span><br><span class="line">.right &#123;</span><br><span class="line">    float: left;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 300px;</span><br><span class="line">    margin-left: -100px;</span><br><span class="line">    position: relative;</span><br><span class="line">    right: -100px;</span><br><span class="line">    background-color: green;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>4.双飞翼布局</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;content&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;main&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;left&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;right&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .content &#123;</span><br><span class="line">        float: left;</span><br><span class="line">        width: 100%;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .main &#123;</span><br><span class="line">        height: 200px;</span><br><span class="line">        margin-left: 100px;</span><br><span class="line">        margin-right: 100px;</span><br><span class="line">        background-color: green;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .left &#123;</span><br><span class="line">        float: left;</span><br><span class="line">        height: 200px;</span><br><span class="line">        width: 100px;</span><br><span class="line">        margin-left: -100%;</span><br><span class="line">        background-color: red;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .right &#123;</span><br><span class="line">        width: 100px;</span><br><span class="line">        height: 200px;</span><br><span class="line">        float: right;</span><br><span class="line">        margin-left: -100px;</span><br><span class="line">        background-color: blue;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>5.绝对定位布局</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;17年写过&lt;a href=&quot;https://wine1.github.io/2017/12/01/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80%E5%92%8C%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80/&quot;&gt;圣杯布局和双飞翼布局&lt;/a&gt;，时间一长没写过pc端吧 又忘却了&lt;br&gt;整理下三栏布局方案&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="css" scheme="https://wine1.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>原型和原型链</title>
    <link href="https://wine1.github.io/2021/04/17/%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <id>https://wine1.github.io/2021/04/17/%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/</id>
    <published>2021-04-17T15:41:09.000Z</published>
    <updated>2021-04-17T15:46:55.763Z</updated>
    
    <content type="html"><![CDATA[<p>解析原型和原型链</p><a id="more"></a><p><img src="/2021/04/17/原型和原型链/prototype.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;解析原型和原型链&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>网络之option</title>
    <link href="https://wine1.github.io/2021/04/17/%E7%BD%91%E7%BB%9C%E4%B9%8Boption/"/>
    <id>https://wine1.github.io/2021/04/17/%E7%BD%91%E7%BB%9C%E4%B9%8Boption/</id>
    <published>2021-04-17T01:04:12.000Z</published>
    <updated>2021-04-17T01:53:16.002Z</updated>
    
    <content type="html"><![CDATA[<p>MDN的CORS一文中提到：<br>规范要求，对那些可能对服务器数据产生副作用的 HTTP 请求方法（特别是 GET 以外的 HTTP 请求，或者搭配某些 MIME 类型的 POST 请求），浏览器必须首先使用 OPTIONS 方法发起一个预检请求（preflight request），从而获知服务端是否允许该跨域请求。</p><a id="more"></a><p>某些请求不会触发 CORS 预检请求，这样的请求一般称为”简单请求”,而会触发预检的请求则称为”复杂请求”。</p><p>简单请求：<br>简单请求的 HTTP 方法只能是 GET、HEAD 或 POST<br>简单请求的 HTTP 头只能是 Accept/Accept-Language/Conent-Language/Content-Type 等<br>简单请求的 Content-Type 头只能是 text/plain、multipart/form-data 或 application/x-www-form-urlencoded</p><h3 id="CORS预检请求触发条件"><a href="#CORS预检请求触发条件" class="headerlink" title="CORS预检请求触发条件"></a>CORS预检请求触发条件</h3><ol><li>使用了下面任一HTTP 方法：<br>PUT/DELETE/CONNECT/OPTIONS/TRACE/PATCH     </li><li>人为设置了以下集合之外首部字段：<br>Accept/Accept-Language/Content-Language/Content-Type/DPR/Downlink/Save-Data/Viewport-Width/Width     </li><li>Content-Type 的值不属于下列之一:<br>application/x-www-form-urlencoded、multipart/form-data、text/plain</li></ol><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>当我们发起跨域请求时，如果是简单请求，那么我们只会发出一次请求，但是如果是复杂请求则先发出 options 请求，用于确认目标资源是否支持跨域，然后浏览器会根据服务端响应的 header 自动处理剩余的请求，如果响应支持跨域，则继续发出正常请求，如果不支持，则在控制台显示错误。</p><p>由此可见，当触发预检时，跨域请求便会发送 2 次请求，既增加了请求数，也延迟了请求真正发起的时间，严重影响性能。</p><p>所以，我们可以优化 Options 请求，主要有 2 种方法。</p><p>转为简单请求，如用 JSONP 做跨域请求<br>对 options 请求进行缓存，服务器端设置 Access-Control-Max-Age 字段，那么当第一次请求该 URL 时会发出 OPTIONS 请求，浏览器会根据返回的 Access-Control-Max-Age 字段缓存该请求的 OPTIONS 预检请求的响应结果（具体缓存时间还取决于浏览器的支持的默认最大值，取两者最小值，一般为 10 分钟）。在缓存有效期内，该资源的请求（URL 和 header 字段都相同的情况下）不会再触发预检。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MDN的CORS一文中提到：&lt;br&gt;规范要求，对那些可能对服务器数据产生副作用的 HTTP 请求方法（特别是 GET 以外的 HTTP 请求，或者搭配某些 MIME 类型的 POST 请求），浏览器必须首先使用 OPTIONS 方法发起一个预检请求（preflight request），从而获知服务端是否允许该跨域请求。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="网络" scheme="https://wine1.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>BFS和DFS</title>
    <link href="https://wine1.github.io/2021/04/03/BFS%E5%92%8CDFS/"/>
    <id>https://wine1.github.io/2021/04/03/BFS%E5%92%8CDFS/</id>
    <published>2021-04-03T11:30:49.000Z</published>
    <updated>2021-04-24T03:41:47.258Z</updated>
    
    <content type="html"><![CDATA[<p>DFS算法和BFS算法<br><a href="https://wine1.github.io/2020/06/12/%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/">BFS</a></p><a id="more"></a><p>递归实现dfs<br>简单的二叉树dfs<br><a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/binary-tree-preorder-traversal/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var preorderTraversal = function (root) &#123;</span><br><span class="line">  let res = [];</span><br><span class="line">  if (!root) &#123;</span><br><span class="line">    res = [];</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    const dfs = function (node) &#123;</span><br><span class="line">      // console.log(node);</span><br><span class="line">      if (!node) return;</span><br><span class="line">      res.push(node.val);</span><br><span class="line">      dfs(node.left);</span><br><span class="line">      dfs(node.right);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    dfs(root);</span><br><span class="line">  &#125;</span><br><span class="line">  return res;</span><br><span class="line">&#125;;</span><br><span class="line">console.log(preorderTraversal([1, null, 2, 3]));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;DFS算法和BFS算法&lt;br&gt;&lt;a href=&quot;https://wine1.github.io/2020/06/12/%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/&quot;&gt;BFS&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="数据结构" scheme="https://wine1.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>跨域</title>
    <link href="https://wine1.github.io/2021/03/03/%E8%B7%A8%E5%9F%9F/"/>
    <id>https://wine1.github.io/2021/03/03/%E8%B7%A8%E5%9F%9F/</id>
    <published>2021-03-03T14:26:23.000Z</published>
    <updated>2021-03-03T14:28:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>谷歌浏览器中Response中set-cookie无效<br><a href="https://blog.csdn.net/Ych_cxy/article/details/107673208" target="_blank" rel="noopener">https://blog.csdn.net/Ych_cxy/article/details/107673208</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;谷歌浏览器中Response中set-cookie无效&lt;br&gt;&lt;a href=&quot;https://blog.csdn.net/Ych_cxy/article/details/107673208&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://b
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>js的宏任务和微任务</title>
    <link href="https://wine1.github.io/2020/09/23/js%E7%9A%84%E5%AE%8F%E4%BB%BB%E5%8A%A1%E5%92%8C%E5%BE%AE%E4%BB%BB%E5%8A%A1/"/>
    <id>https://wine1.github.io/2020/09/23/js%E7%9A%84%E5%AE%8F%E4%BB%BB%E5%8A%A1%E5%92%8C%E5%BE%AE%E4%BB%BB%E5%8A%A1/</id>
    <published>2020-09-23T14:45:29.000Z</published>
    <updated>2020-09-23T14:56:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>.宏任务（macrotask ）和微任务（microtask ）</p><p>macrotask 和 microtask 表示异步任务的两种分类。</p><p>在挂起任务时，JS 引擎会将所有任务按照类别分到这两个队列中，首先在 macrotask 的队列（这个队列也被叫做 task queue）中取出第一个任务，执行完毕后取出 microtask 队列中的所有任务顺序执行；之后再取 macrotask 任务，周而复始，直至两个队列的任务都取完。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">    //执行后 回调一个宏事件</span><br><span class="line">    console.log(&apos;内层宏事件3&apos;)</span><br><span class="line">&#125;, 0)</span><br><span class="line">console.log(&apos;外层宏事件1&apos;);</span><br><span class="line"></span><br><span class="line">new Promise((resolve) =&gt; &#123;</span><br><span class="line">    console.log(&apos;外层宏事件2&apos;);</span><br><span class="line">    resolve()</span><br><span class="line">&#125;).then(() =&gt; &#123;</span><br><span class="line">    console.log(&apos;微事件1&apos;);</span><br><span class="line">&#125;).then(()=&gt;&#123;</span><br><span class="line">    console.log(&apos;微事件2&apos;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>打印结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">外层宏事件1</span><br><span class="line">外层宏事件2</span><br><span class="line">微事件1</span><br><span class="line">微事件2</span><br><span class="line">内层宏事件3</span><br></pre></td></tr></table></figure><p>宏任务 setTimeOut setInterval<br>微任务 nextTick promise<br>先执行微任务 再执行宏任务</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;.宏任务（macrotask ）和微任务（microtask ）&lt;/p&gt;
&lt;p&gt;macrotask 和 microtask 表示异步任务的两种分类。&lt;/p&gt;
&lt;p&gt;在挂起任务时，JS 引擎会将所有任务按照类别分到这两个队列中，首先在 macrotask 的队列（这个队列也被叫做 task queue）中取出第一个任务，执行完毕后取出 microtask 队列中的所有任务顺序执行；之后再取 macrotask 任务，周而复始，直至两个队列的任务都取完。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>封装一个组件</title>
    <link href="https://wine1.github.io/2020/09/13/%E5%B0%81%E8%A3%85%E4%B8%80%E4%B8%AA%E7%BB%84%E4%BB%B6/"/>
    <id>https://wine1.github.io/2020/09/13/%E5%B0%81%E8%A3%85%E4%B8%80%E4%B8%AA%E7%BB%84%E4%BB%B6/</id>
    <published>2020-09-13T11:42:52.000Z</published>
    <updated>2021-01-16T14:43:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>自己封装一个组件</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;</span><br><span class="line">    &lt;title&gt;diago&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;./diago.css&quot; /&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;button id=&quot;showDiago&quot;&gt;点击打开弹窗&lt;/button&gt;</span><br><span class="line">    &lt;script src=&quot;./diago.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      document.getElementById(&quot;showDiago&quot;).addEventListener(&apos;click&apos;, function(e) &#123;</span><br><span class="line">        dialog.show(&#123;</span><br><span class="line">          title: &quot;biaoti&quot;,</span><br><span class="line">          content: &quot;抱歉，该游戏暂无Android版本&quot;,</span><br><span class="line">          cancel: function() &#123;</span><br><span class="line">            console.log(111);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">var dialog = (function() &#123;</span><br><span class="line">  var elem, dialog, cancelBtn, confirmBtn;</span><br><span class="line">  /**</span><br><span class="line">   * @method getNeedElement 获取所需要的节点</span><br><span class="line">   */</span><br><span class="line">  var getNeedElement = function() &#123;</span><br><span class="line">    elem = document.querySelector(&quot;.dialog-wrapper&quot;);</span><br><span class="line">    dialog = document.querySelector(&quot;.dialog&quot;);</span><br><span class="line">    cancelBtn = document.querySelector(&quot;.cancel-btn&quot;);</span><br><span class="line">    confirmBtn = document.querySelector(&quot;.confirm-btn&quot;);</span><br><span class="line">  &#125;;</span><br><span class="line">  /**</span><br><span class="line">   * @method show 打开dialog组件</span><br><span class="line">   */</span><br><span class="line">  var show = function(options = &#123;&#125;) &#123;</span><br><span class="line">    let &#123;</span><br><span class="line">      title = &quot;&quot;,</span><br><span class="line">      content = &quot;默认content&quot;,</span><br><span class="line">      btns = [&quot;确定&quot;, &quot;取消&quot;],</span><br><span class="line">      confirm = null,</span><br><span class="line">      cancel = null</span><br><span class="line">    &#125; = options;</span><br><span class="line">    let btnTemp = &quot;&quot;;</span><br><span class="line">    btns.forEach((item, index) =&gt; &#123;</span><br><span class="line">      if (index == 2) return;</span><br><span class="line">      let btnClass = index == 0 ? &quot;confirm-btn&quot; : &quot;cancel-btn&quot;;</span><br><span class="line">      let temp = `&lt;div class=&quot;btn $&#123;btnClass&#125;&quot;&gt;$&#123;item&#125;&lt;/div&gt;`;</span><br><span class="line">      btnTemp += temp;</span><br><span class="line">    &#125;);</span><br><span class="line">    let html = `&lt;div class=&quot;dialog-wrapper&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;dialog&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;title&quot;&gt;$&#123;title&#125;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;content&quot;&gt;$&#123;content&#125;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;buttons&quot;&gt;$&#123;btnTemp&#125;&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;`; // 添加到Body</span><br><span class="line">    document.body.innerHTML += html;</span><br><span class="line">    getNeedElement();</span><br><span class="line">    bindEvent(confirm, cancel);</span><br><span class="line">    return elem;</span><br><span class="line">  &#125;;</span><br><span class="line">  /**</span><br><span class="line">   * @method hide 关闭dialog组件</span><br><span class="line">   */</span><br><span class="line">  var hide = function() &#123;</span><br><span class="line">    elem.remove(elem);</span><br><span class="line">    // elem.parentNode.removeChild(elem);</span><br><span class="line">  &#125;;</span><br><span class="line">  /**</span><br><span class="line">   * @method bindEvent 给dialog绑定事件</span><br><span class="line">   * @param &#123;Object&#125; confirm 确认回调</span><br><span class="line">   * @param &#123;Object&#125; cancel 取消回调</span><br><span class="line">   */</span><br><span class="line">  var bindEvent = function(confirm, cancel) &#123;</span><br><span class="line">    confirmBtn &amp;&amp;</span><br><span class="line">      confirmBtn.addEventListener(&quot;click&quot;, e =&gt; &#123;</span><br><span class="line">        hide();</span><br><span class="line">        confirm &amp;&amp; confirm();</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">    cancelBtn &amp;&amp;</span><br><span class="line">      cancelBtn.addEventListener(&quot;click&quot;, e =&gt; &#123;</span><br><span class="line">        hide();</span><br><span class="line">        cancel &amp;&amp; cancel();</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  return &#123; show, hide &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">body,html &#123;  font-family: -apple-system, BlinkMacSystemFont, &apos;Segoe UI&apos;, Roboto, Oxygen, Ubuntu, Cantarell, &apos;Open Sans&apos;, &apos;Helvetica Neue&apos;, sans-serif;</span><br><span class="line">&#125;.dialog-wrapper &#123;  position: fixed;  display: flex;  justify-content: center;  align-items: center;  top: 0;  left: 0;  width: 100vw;  height: 100vh;  background-color: rgba(49, 49, 49, 0.5);  color: #313131;  font-size: 10px;  -webkit-tap-highlight-color: transparent;</span><br><span class="line">&#125;.dialog-wrapper.fadeIn &#123;  animation: fadeIn .2s ease;</span><br><span class="line">&#125;.dialog-wrapper.fadeOut &#123;  animation: fadeOut .2s ease forwards;</span><br><span class="line">&#125;.dialog-wrapper .dialog &#123;  position: relative;  width: 85vw;  max-width: 30em;  border-radius: .4em;  background-color: #fff;  box-sizing: border-box;  overflow: hidden;  box-shadow: 0 0 10px 1px rgba(0, 0, 0, 0.1);</span><br><span class="line">&#125;.dialog-wrapper .dialog.slideDown &#123;  animation: slideDown .2s ease;</span><br><span class="line">&#125;.dialog-wrapper .dialog.slideUp &#123;  animation: slideUp .2s ease forwards;</span><br><span class="line">&#125;.dialog-wrapper .dialog.scaleIn &#123;  animation: scaleIn 0.2s cubic-bezier(0.07, 0.89, 0.95, 1.4);</span><br><span class="line">&#125;.dialog-wrapper .dialog.scaleOut &#123;  animation: scaleOut 0.2s cubic-bezier(0.07, 0.89, 0.95, 1.4) forwards;</span><br><span class="line">&#125;.dialog-wrapper .dialog .btn &#123;  cursor: pointer;</span><br><span class="line">&#125;.dialog-wrapper .dialog .btn:active &#123;  background-color: #f4f4f4;</span><br><span class="line">&#125;.dialog-wrapper .dialog .close-btn &#123;  position: absolute;  top: 0;  right: 0;  padding: 10px;  font-size: 1.8em;</span><br><span class="line">&#125;.dialog-wrapper .dialog .title &#123;  font-size: 1.8em;  padding: 15px;  text-align: center;  background-color: #f4f4f4;</span><br><span class="line">&#125;.dialog-wrapper .dialog .title:empty &#123;  display: none;</span><br><span class="line">&#125;.dialog-wrapper .dialog .content &#123;  padding: 40px 20px;  font-size: 1.6em;  text-align: center;</span><br><span class="line">&#125;.dialog-wrapper .dialog .buttons &#123;  font-size: 1.6em;  display: flex;  flex-flow: row-reverse;</span><br><span class="line">&#125;.dialog-wrapper .dialog .buttons .btn &#123;  flex: 1;  padding: 15px;  text-align: center;  border-top: 1px solid #ebebeb;</span><br><span class="line">&#125;.dialog-wrapper .dialog .buttons .btn.confirm-btn &#123;  color: #f2d985;</span><br><span class="line">&#125;.dialog-wrapper .dialog .buttons .btn.cancel-btn &#123;  color: #313131;  border-right: 1px solid #ebebeb;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@keyframes slideDown &#123;  from &#123;    transform: translateY(-3em);</span><br><span class="line">  &#125;  to &#123;    transform: translateY(0);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@keyframes slideUp &#123;  from &#123;    transform: translateY(0);</span><br><span class="line">  &#125;  to &#123;    transform: translateY(-3em);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@keyframes fadeIn &#123;  from &#123;    opacity: .5;</span><br><span class="line">  &#125;  to &#123;    opacity: 1;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@keyframes fadeOut &#123;  from &#123;    opacity: 1;</span><br><span class="line">  &#125;  to &#123;    opacity: 0;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@keyframes scaleIn &#123;  from &#123;    transform: scale(0.8);</span><br><span class="line">  &#125;  to &#123;    transform: scale(1);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@keyframes scaleOut &#123;  from &#123;    transform: scale(1);</span><br><span class="line">  &#125;  to &#123;    transform: scale(0.8);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自己封装一个组件&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>js中的防抖和节流</title>
    <link href="https://wine1.github.io/2020/08/25/js%E4%B8%AD%E7%9A%84%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/"/>
    <id>https://wine1.github.io/2020/08/25/js%E4%B8%AD%E7%9A%84%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</id>
    <published>2020-08-25T15:16:15.000Z</published>
    <updated>2021-05-18T23:34:38.134Z</updated>
    
    <content type="html"><![CDATA[<p>防抖和节流的原理和代码</p><a id="more"></a><p>debounce，去抖动。策略是当事件被触发时，设定一个周期延迟执行动作，若期间又被触发，则重新设定周期，直到周期结束，执行动作。 这是debounce的基本思想，在后期又扩展了前缘debounce，即执行动作在前，然后设定周期，周期内有事件被触发，不执行动作，且周期重新设定。</p><p>throttling，节流的策略是，固定周期内，只执行一次动作，若有新事件触发，不执行。周期结束后，又有事件触发，开始新的周期。 节流策略也分前缘和延迟两种。与debounce类似，延迟是指 周期结束后执行动作，前缘是指执行动作后再开始周期。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">/**防抖 一段时间内重复触发则清除定时器重新开始计时 */</span><br><span class="line">function debounce(fn,n) &#123;</span><br><span class="line">    let timer = null</span><br><span class="line">    return function (args) &#123;</span><br><span class="line">        let that = this</span><br><span class="line">        timer &amp;&amp; clearTimeout(timer)</span><br><span class="line">        timer = setTimeout(function () &#123;</span><br><span class="line">            fn.call(that, args)</span><br><span class="line">        &#125;, n)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**节流 第一次点击执行后一段时间内再次触发不执行 直到计时结束才可以再次被触发 */</span><br><span class="line">const throttling = function (fn, delay) &#123;</span><br><span class="line">    var timer = null;</span><br><span class="line">    if (!delay) &#123;</span><br><span class="line">        delay = 1000</span><br><span class="line">    &#125;</span><br><span class="line">    return function () &#123;</span><br><span class="line">        var context = this;</span><br><span class="line">        var args = arguments;</span><br><span class="line">        if (!timer) &#123;</span><br><span class="line">            timer = setTimeout(function () &#123;</span><br><span class="line">                fn.apply(context, args);</span><br><span class="line">                timer = null;</span><br><span class="line">            &#125;, delay);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;防抖和节流的原理和代码&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>leetcode之数组</title>
    <link href="https://wine1.github.io/2020/08/12/leetcode%E4%B9%8B%E6%95%B0%E7%BB%84/"/>
    <id>https://wine1.github.io/2020/08/12/leetcode%E4%B9%8B%E6%95%B0%E7%BB%84/</id>
    <published>2020-08-12T15:36:36.000Z</published>
    <updated>2020-11-23T14:52:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="leetcode——数组类知识点及题型总结"><a href="#leetcode——数组类知识点及题型总结" class="headerlink" title="leetcode——数组类知识点及题型总结"></a>leetcode——数组类知识点及题型总结</h2><p>很多题都能靠暴力解法 但是通常都会有时间复杂度或者空间复杂度超出限制的情况，因此都不予讨论</p><a id="more"></a><ol><li><p>k-sum类 如 第一题 twosum 计算数组中的哪些值得和能等于给定的target 有时候题目中会带有是否能重复使用一个值的限制</p><ul><li>hash 遍历数组 将每一个值存入hash表中 并检测hash表中是否有 target-nums[i] 的结果 如果有 则结果就是 i 和对应的hash表中的值 时间复杂度O(n)</li><li>two-points </li></ul></li><li><p>区间类</p></li></ol><ol start="3"><li>子数组类</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;leetcode——数组类知识点及题型总结&quot;&gt;&lt;a href=&quot;#leetcode——数组类知识点及题型总结&quot; class=&quot;headerlink&quot; title=&quot;leetcode——数组类知识点及题型总结&quot;&gt;&lt;/a&gt;leetcode——数组类知识点及题型总结&lt;/h2&gt;&lt;p&gt;很多题都能靠暴力解法 但是通常都会有时间复杂度或者空间复杂度超出限制的情况，因此都不予讨论&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>小程序同层渲染</title>
    <link href="https://wine1.github.io/2020/08/12/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%90%8C%E5%B1%82%E6%B8%B2%E6%9F%93/"/>
    <id>https://wine1.github.io/2020/08/12/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%90%8C%E5%B1%82%E6%B8%B2%E6%9F%93/</id>
    <published>2020-08-12T15:33:13.000Z</published>
    <updated>2021-05-14T09:54:41.192Z</updated>
    
    <content type="html"><![CDATA[<h2 id="同层渲染"><a href="#同层渲染" class="headerlink" title="同层渲染"></a>同层渲染</h2><p>小程序的内容大多是渲染在 WebView 上的，如果把 WebView 看成单独的一层，那么由系统自带的这些原生组件则位于另一个更高的层级（如 canvas、video）。两个层级是完全独立的，因此无法简单地通过使用 z-index 控制原生组件和非原生组件之间的相对层级。想要在原生组件之上只能用 cover-view 和 cover-image 来实现。但 cover-view 和 cover-image 支持的 css 样式是在很有限，而且经过实践来看，cover-view 在安卓部分机器上性能真的很差。<br><a href="https://developers.weixin.qq.com/community/develop/doc/000aa28d030f60a3c4183eecb5d801" target="_blank" rel="noopener">官方社区说明</a></p><p>然并卵 没有用</p><p>实时音视频小程序开发ios手机无法正常在小程序里视频，安卓手机就可以<br>解决方案： 在 app.json 下 window 下配置一下 “renderingMode”: “seperated”强制关掉同层<br>关掉同层渲染 “renderingMode”: “seperated”,</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;同层渲染&quot;&gt;&lt;a href=&quot;#同层渲染&quot; class=&quot;headerlink&quot; title=&quot;同层渲染&quot;&gt;&lt;/a&gt;同层渲染&lt;/h2&gt;&lt;p&gt;小程序的内容大多是渲染在 WebView 上的，如果把 WebView 看成单独的一层，那么由系统自带的这些原生组件则位于另
      
    
    </summary>
    
    
    
      <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="小程序" scheme="https://wine1.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>grid布局</title>
    <link href="https://wine1.github.io/2020/08/12/grid%E5%B8%83%E5%B1%80/"/>
    <id>https://wine1.github.io/2020/08/12/grid%E5%B8%83%E5%B1%80/</id>
    <published>2020-08-12T15:31:12.000Z</published>
    <updated>2020-08-12T15:33:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="grid布局"><a href="#grid布局" class="headerlink" title="grid布局"></a>grid布局</h2><p>gap属性能解决flex多行布局中最后一行布局不满时位置偏移的问题</p><p><a href="http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html" target="_blank" rel="noopener">阮一峰的grid布局教程</a><br>网格布局 将网页划分成一个个网格，可以任意组合不同的网格，做出各种各样的布局。<br>具体么 目前还没有使用过 最近没有用上 没找到合适的应用场景</p><a id="more"></a><p>跟flex布局有一定的相似性</p><p>display 属性<br>display: grid指定一个容器采用网格布局。</p><p>grid-template-columns 属性，<br>grid-template-rows 属性<br>容器指定了网格布局以后，接着就要划分行和列。grid-template-columns属性定义每一列的列宽，grid-template-rows属性定义每一行的行高。</p><p>repeat()<br>有时候，重复写同样的值非常麻烦，尤其网格很多时。这时，可以使用repeat()函数，简化重复的值。<br>repeat()接受两个参数，第一个参数是重复的次数（上例是3），第二个参数是所要重复的值。</p><p>auto-fill 关键字<br>有时，单元格的大小是固定的，但是容器的大小不确定。如果希望每一行（或每一列）容纳尽可能多的单元格，这时可以使用auto-fill关键字表示自动填充。</p><p>fr 关键字<br>为了方便表示比例关系，网格布局提供了fr关键字（fraction 的缩写，意为”片段”）。如果两列的宽度分别为1fr和2fr，就表示后者是前者的两倍。<br>minmax()<br>minmax()函数产生一个长度范围，表示长度就在这个范围之中。它接受两个参数，分别为最小值和最大值。</p><p>auto 关键字<br>auto关键字表示由浏览器自己决定长度。</p><p>网格线的名称<br>grid-template-columns属性和grid-template-rows属性里面，还可以使用方括号，指定每一根网格线的名字，方便以后的引用。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;grid布局&quot;&gt;&lt;a href=&quot;#grid布局&quot; class=&quot;headerlink&quot; title=&quot;grid布局&quot;&gt;&lt;/a&gt;grid布局&lt;/h2&gt;&lt;p&gt;gap属性能解决flex多行布局中最后一行布局不满时位置偏移的问题&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;阮一峰的grid布局教程&lt;/a&gt;&lt;br&gt;网格布局 将网页划分成一个个网格，可以任意组合不同的网格，做出各种各样的布局。&lt;br&gt;具体么 目前还没有使用过 最近没有用上 没找到合适的应用场景&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="https://wine1.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>解决小程序列表更新卡顿方案</title>
    <link href="https://wine1.github.io/2020/08/09/%E8%A7%A3%E5%86%B3%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%88%97%E8%A1%A8%E6%9B%B4%E6%96%B0%E5%8D%A1%E9%A1%BF%E6%96%B9%E6%A1%88/"/>
    <id>https://wine1.github.io/2020/08/09/%E8%A7%A3%E5%86%B3%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%88%97%E8%A1%A8%E6%9B%B4%E6%96%B0%E5%8D%A1%E9%A1%BF%E6%96%B9%E6%A1%88/</id>
    <published>2020-08-09T13:34:55.000Z</published>
    <updated>2021-04-12T11:46:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="解决小程序列表更新卡顿方案"><a href="#解决小程序列表更新卡顿方案" class="headerlink" title="解决小程序列表更新卡顿方案"></a>解决小程序列表更新卡顿方案</h2><p>什么情况会引发小程序的渲染性能问题</p><ol><li>setData传递大量的新数据</li><li>频繁的执行setData操作</li><li>过多的页面节点数</li></ol><a id="more"></a><p>解决方案（分别针对上述情况）</p><ol><li>data对象中只传输视图层要用的数据 合理利用局部更新</li><li>在不影响业务流程的前提下，将多个 setData 调用合并执行，减少线程间通信频次。<br>当需要在频繁触发的用户事件（如 PageScroll 、 Resize 事件）中调用 setData ，合理的利用 函数防抖（debounce） 和 函数节流（throttle） 可以减少 setData 执行次数。<br>函数防抖（debounce）：函数在触发n秒后才执行一次，如果在n秒内重复触发函数，则重新计算时间。<br>函数节流（throttle）：单位时间内，只会触发一次函数，如果同一个单位时间内触发多次函数，只会有一次生效。</li></ol><p>除了让开发者自觉遵循规则来减少 setData 数据传输量和执行频率之外，我们还可以自己设计一个 diff 算法，重新对 setData 进行封装，使得在 setData 执行之前，让待更新的数据与原 data 数据做 diff 对比，计算出数据差异 patch 对象，判断 patch 对象是否为空，如果为空则跳过执行更新，否则再将 patch 对象执行 setData 操作，从而达到减少数据传输量和降低执行 setData 频率的目的。</p><p>网友方案 转摘自 <a href="https://segmentfault.com/a/1190000019910111" target="_blank" rel="noopener">https://segmentfault.com/a/1190000019910111</a></p><p>小程序看起来很简单易上手 但是有很多奇奇怪怪的坑和一系列的性能优化问题 还需要深入研究才能更好的实现需求提升用户体验</p><h2 id="diff算法实现思路"><a href="#diff算法实现思路" class="headerlink" title="diff算法实现思路"></a>diff算法实现思路</h2><p>策略：在数据更新之前先对更新前后数据做diff对比，找出差异部分patch，如果patch为空，结束更新，否则只对patch部分做更新。</p><p>设计思路：</p><ul><li>diff前先将数据路径写法数据转换成格式化JSON</li><li>使用深度优先遍历策略</li><li>只对同层节点进行对比</li><li>使用数据路径方式实现局部更新</li><li>减少不必要的diff对比<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">const OBJECT_TYPE = &apos;[object Object]&apos;;</span><br><span class="line">const ARRAY_TYPE = &apos;[object Array]&apos;;</span><br><span class="line">const getType = (obj) =&gt; Object.prototype.toString.call(obj);</span><br><span class="line">const initPath = (data) =&gt; &#123;</span><br><span class="line">    if (getType(data) !== OBJECT_TYPE) return;</span><br><span class="line">    for (let item in data) &#123;</span><br><span class="line">        if (/\w+\.\w+/g.test(item) &amp;&amp; item.indexOf(&apos;[&apos;) === -1) &#123;</span><br><span class="line">            const arr = item.split(&apos;.&apos;);</span><br><span class="line">            let result = data, len = arr.length;</span><br><span class="line">            for (let i = 0; i &lt; len - 1; i++) &#123;</span><br><span class="line">                const arrItem = arr[i];</span><br><span class="line">                if (getType(result[arrItem]) !== OBJECT_TYPE) &#123;</span><br><span class="line">                    result[arrItem] = &#123;&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">                result = result[arrItem];</span><br><span class="line">            &#125;</span><br><span class="line">            result[arr[len - 1]] = data[item];</span><br><span class="line">            delete data[item];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">const initData = (cur, pre, root = false) =&gt; &#123;</span><br><span class="line">    if (cur === pre) return;</span><br><span class="line">    const curType = getType(cur), preType = getType(pre);</span><br><span class="line">    if (curType !== preType) return;</span><br><span class="line">    if (curType === ARRAY_TYPE &amp;&amp; cur.length &gt;= pre.length) &#123;</span><br><span class="line">        for (let i = 0; i &lt; pre.length; i++) &#123;</span><br><span class="line">            initData(cur[i], pre[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else if (curType === OBJECT_TYPE &amp;&amp; Object.keys(cur).length &gt;= Object.keys(pre).length) &#123;</span><br><span class="line">        for (let key in pre) &#123;</span><br><span class="line">            if (!root &amp;&amp; cur[key] === undefined) &#123; </span><br><span class="line">                cur[key] = null; </span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                initData(cur[key], pre[key]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">const doDiff = (cur, pre, target, path = &apos;&apos;, root = false) =&gt; &#123;</span><br><span class="line">    if (cur === pre) return;</span><br><span class="line">    const curRootType = getType(cur), preRootType = getType(pre);</span><br><span class="line">    if (curRootType === ARRAY_TYPE &amp;&amp; preRootType === curRootType &amp;&amp; cur.length &gt;= pre.length) &#123;</span><br><span class="line">        for (let i = 0; i &lt; cur.length; i++) &#123;</span><br><span class="line">            doDiff(cur[i], pre[i], target, `$&#123;path&#125;[$&#123;i&#125;]`); </span><br><span class="line">        &#125;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    if (curRootType === OBJECT_TYPE &amp;&amp; preRootType === curRootType &amp;&amp; (root || Object.keys(cur).length &gt;= Object.keys(pre).length)) &#123;</span><br><span class="line">        const keys = Object.keys(cur);</span><br><span class="line">        for (let key of keys) &#123;</span><br><span class="line">            const curVal = cur[key], preVal = pre[key];</span><br><span class="line">            const curType = getType(curVal), preType = getType(preVal);</span><br><span class="line">            if (curVal === preVal) continue;</span><br><span class="line">            if (curType === ARRAY_TYPE &amp;&amp; preType === curType &amp;&amp; curVal.length &gt;= preVal.length) &#123;</span><br><span class="line">                for (let i = 0; i &lt; curVal.length; i++) &#123;</span><br><span class="line">                    doDiff(curVal[i], preVal[i], target, `$&#123;path ? path + &apos;.&apos; : &apos;&apos;&#125;$&#123;key&#125;[$&#123;i&#125;]`);</span><br><span class="line">                &#125;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            if (curType === OBJECT_TYPE &amp;&amp; preType === curType &amp;&amp; Object.keys(curVal).length &gt;= Object.keys(preVal).length) &#123;</span><br><span class="line">                for (let sKey in curVal) &#123;</span><br><span class="line">                    doDiff(curVal[sKey], preVal[sKey], target, `$&#123;path ? path + &apos;.&apos; : &apos;&apos;&#125;$&#123;key&#125;.$&#123;sKey&#125;`);</span><br><span class="line">                &#125;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            target[`$&#123;path ? path + &apos;.&apos; : &apos;&apos;&#125;$&#123;key&#125;`] = curVal;</span><br><span class="line">        &#125;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    target[path] = cur;</span><br><span class="line">&#125;;</span><br><span class="line">export default function diff(data, prevData) &#123;</span><br><span class="line">    const target = &#123;&#125;;</span><br><span class="line">    initPath(data);</span><br><span class="line">    initData(data, prevData, true);</span><br><span class="line">    doDiff(data, prevData, target, &apos;&apos;, true);</span><br><span class="line">    return target;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;解决小程序列表更新卡顿方案&quot;&gt;&lt;a href=&quot;#解决小程序列表更新卡顿方案&quot; class=&quot;headerlink&quot; title=&quot;解决小程序列表更新卡顿方案&quot;&gt;&lt;/a&gt;解决小程序列表更新卡顿方案&lt;/h2&gt;&lt;p&gt;什么情况会引发小程序的渲染性能问题&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;setData传递大量的新数据&lt;/li&gt;
&lt;li&gt;频繁的执行setData操作&lt;/li&gt;
&lt;li&gt;过多的页面节点数&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="小程序" scheme="https://wine1.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>匹配js中的enter换行操作</title>
    <link href="https://wine1.github.io/2020/07/23/%E5%8C%B9%E9%85%8Djs%E4%B8%AD%E7%9A%84enter%E6%8D%A2%E8%A1%8C%E6%93%8D%E4%BD%9C/"/>
    <id>https://wine1.github.io/2020/07/23/%E5%8C%B9%E9%85%8Djs%E4%B8%AD%E7%9A%84enter%E6%8D%A2%E8%A1%8C%E6%93%8D%E4%BD%9C/</id>
    <published>2020-07-23T14:54:50.000Z</published>
    <updated>2021-01-19T15:21:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>前几日在被莫名其妙的提了个bug<br>测试说 测试数据配置的时候有用enter换行 为什么在我的小程序里换行就神奇的消失了<br>第一次遇到这样的情况 在我的认真查找下 终于发现在数据里 字里行间还隐秘的藏着一些 回车符 （我实在是打不出来那个小小的符号了）</p><p>但是在html文本中 这个符号是会被自动忽略掉的 所以我们要把它替换成html可以识别的换行符</p><p> str= str.replace(/[\r\n]/g, “\n”);用 \n 替换<br> 小程序中 只有在在text标签中可以换行 view里面 \n是无法换行的</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前几日在被莫名其妙的提了个bug&lt;br&gt;测试说 测试数据配置的时候有用enter换行 为什么在我的小程序里换行就神奇的消失了&lt;br&gt;第一次遇到这样的情况 在我的认真查找下 终于发现在数据里 字里行间还隐秘的藏着一些 回车符 （我实在是打不出来那个小小的符号了）&lt;/p&gt;
&lt;p
      
    
    </summary>
    
    
    
      <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="https://wine1.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>flex布局知识点</title>
    <link href="https://wine1.github.io/2020/07/22/flex%E5%B8%83%E5%B1%80%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>https://wine1.github.io/2020/07/22/flex%E5%B8%83%E5%B1%80%E7%9F%A5%E8%AF%86%E7%82%B9/</id>
    <published>2020-07-22T14:39:48.000Z</published>
    <updated>2020-08-10T15:26:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>flex是一个十分好用的布局方法，能轻松的实现很多以往需要做复杂的工作才能实现的效果<br>在reactnative中 更是默认的flex布局<br>之前对flex布局都是一知半解，今天看到了一句值得划重点的知识点<br>码起来呀</p><a id="more"></a><p>在前端面试题中有一道经典css的考题：实现元素的水平垂直居中布局<br>当然实现的方法很多，毕竟css是十分灵活的<br>但是在css布局中 一行 <code>align-items:center</code> 就能解决这个问题<br>可能提到flex布局有些人也只能想到<code>justify-content:center</code>和<code>align-items:center</code><br>甚至弄不太清楚到底那个属性决定了水平居中哪个决定了垂直居中</p><p>flex布局中是分为 主轴 和 副轴 的<br>而主轴和副轴的方向又由flex-direction决定 该属性的默认值是row 即 横轴是主轴 竖轴是副轴</p><p>划重点来了</p><p>justify-content属性用于控制项目在<em>主轴</em> 的对齐方式<br>注意这里是主轴而不是横轴 当flex-direction的值是row 或者 就是默认值时，主轴就是横轴，但是当flex-direction值为column时 主轴就是竖轴</p><p>而align-items属性 是控制副轴的排列方式的</p><p>常见flex布局的考点</p><ol><li><p>实现水平垂直居中</p></li><li><p>等高布局</p><ul><li>flex布局中子元素等高</li></ul></li><li><p>Sticky Footer</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- HTML --&gt;</span><br><span class="line">&lt;header&gt;&lt;/header&gt;</span><br><span class="line">&lt;main&gt;&lt;/main&gt;</span><br><span class="line">&lt;footer&gt;&lt;/footer&gt;</span><br><span class="line">//方案1 css</span><br><span class="line">body &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">footer &#123;</span><br><span class="line">    margin-top: auto;</span><br><span class="line">&#125;</span><br><span class="line">//方案2 css</span><br><span class="line">body &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main &#123;</span><br><span class="line">    flex: 1 0 auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>均分列 </p><ul><li>flex布局 </li><li>子元素 width:calc(100% / 3)</li></ul></li><li><p><a href="https://wine1.github.io/2017/12/01/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80%E5%92%8C%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80/">圣杯布局</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;flex是一个十分好用的布局方法，能轻松的实现很多以往需要做复杂的工作才能实现的效果&lt;br&gt;在reactnative中 更是默认的flex布局&lt;br&gt;之前对flex布局都是一知半解，今天看到了一句值得划重点的知识点&lt;br&gt;码起来呀&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="https://wine1.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>浅析虚拟DOM</title>
    <link href="https://wine1.github.io/2020/07/15/%E6%B5%85%E6%9E%90%E8%99%9A%E6%8B%9FDOM/"/>
    <id>https://wine1.github.io/2020/07/15/%E6%B5%85%E6%9E%90%E8%99%9A%E6%8B%9FDOM/</id>
    <published>2020-07-14T16:26:01.000Z</published>
    <updated>2021-03-11T14:06:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>虚拟DOM的基本思想</p><ol><li>用js对象模拟DOM树</li><li>比较两颗虚拟DOM树的差异</li><li>把差异应用到真正的DOM树上</li></ol><a id="more"></a><h3 id="虚拟dom"><a href="#虚拟dom" class="headerlink" title="虚拟dom"></a>虚拟dom</h3><p>好处</p><ul><li>不用手动操作dom树</li><li>尽可能小面积的重绘视图 节省性能<br>算法实现</li><li>用js对象模拟dom树</li><li>比较两棵虚拟dom树的差异</li><li>差异化更新dom树</li></ul><blockquote><p>用 JavaScript 对象结构表示 DOM 树的结构；<br>然后用这个树构建一个真正的 DOM 树，插到文档当中当状态变更的时候，重新构造一棵新的对象树;<br>然后用新的树和旧的树进行比较，记录两棵树差异把2所记录的差异应用到步骤1所构建的真正的DOM树上，视图就更新了</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//一段dom对象</span><br><span class="line">var element=&#123;</span><br><span class="line">    tagname=&quot;ul&quot;,</span><br><span class="line">    props:&#123;</span><br><span class="line">        id:&apos;list&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    children:[</span><br><span class="line">        &#123;tagName: &apos;li&apos;, props: &#123;class: &apos;item&apos;&#125;, children: [&quot;Item 1&quot;]&#125;,</span><br><span class="line">        &#123;tagName: &apos;li&apos;, props: &#123;class: &apos;item&apos;&#125;, children: [&quot;Item 2&quot;]&#125;,</span><br><span class="line">        &#123;tagName: &apos;li&apos;, props: &#123;class: &apos;item&apos;&#125;, children: [&quot;Item 3&quot;]&#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>用js实现dom对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function Element(tagname,props,children) &#123;</span><br><span class="line">    this.tagname=tagname</span><br><span class="line">    this.props=props</span><br><span class="line">    this.children=children</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// es6 class</span><br><span class="line">class Element &#123;</span><br><span class="line">  constructor(tagname, props = &#123;&#125;, children = []) &#123;</span><br><span class="line">    this.tagname = tagname</span><br><span class="line">    this.props = props</span><br><span class="line">    this.children = children</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = function (tagName, props, children) &#123;</span><br><span class="line">  return new Element(tagName, props, children)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将虚拟dom应用到真正的dom树</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Element.prototype.render=function() &#123;</span><br><span class="line">    let el=document.createElement(this.tagname)</span><br><span class="line">    let props=this.props</span><br><span class="line"></span><br><span class="line">    for(let propname in props)&#123;</span><br><span class="line">        let propvalue=props[propname]</span><br><span class="line">        el.setAttribute(propname,propvalue)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    let children=this.children||[]</span><br><span class="line"></span><br><span class="line">    children.forEach(function (child)&#123;</span><br><span class="line">        let childEl=(child instanceof Element)?child.render():document.createTextNode(child)</span><br><span class="line">        el.appendChild(childEl)</span><br><span class="line">    &#125;)</span><br><span class="line">    return el</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>比较两棵虚拟dom树的差异(diff算法) 🌟</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">function diff(oldTree,newTree) &#123;</span><br><span class="line">    let index=0</span><br><span class="line">    let patches=&#123;&#125;//记录节点差异的对象</span><br><span class="line">    dfs(oldTree,newTree,index,patches)</span><br><span class="line">    return patches</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let initialIndex = 0</span><br><span class="line"></span><br><span class="line">function dfs(oldNode,newNode,index,patches)&#123;</span><br><span class="line">    let diffResult=[]</span><br><span class="line"></span><br><span class="line">    if(!newNode) &#123;</span><br><span class="line">        diffResult.push(&#123;</span><br><span class="line">            type:&apos;REMOVE&apos;,</span><br><span class="line">            index</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    else if(typeof oldNode === &apos;string  &amp;&amp; typeof newVirtualDom === &apos;string&apos;) &#123;</span><br><span class="line">        if(oldNode !=== newNode) &#123;</span><br><span class="line">            diffResult.push(&#123;</span><br><span class="line">                type: &apos;MODIFY_TEXT&apos;,</span><br><span class="line">                data: newVirtualDom,</span><br><span class="line">                index</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;else if(oldVirtualDom.tagName === newVirtualDom.tagName) &#123;</span><br><span class="line">        let diffAttributeResult=&#123;&#125;</span><br><span class="line">        for(let key in oldNode) &#123;</span><br><span class="line">            if(oldNode[key]!==newNode[key]) &#123;</span><br><span class="line">                diffAttributeResult[key]=newNode[key]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        for(let key in newNode) &#123;</span><br><span class="line">            if(!oldNode.hasOwnProperty(key)) &#123;</span><br><span class="line">                diffAttributeResult[key]=newNode[key]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">       if (Object.keys(diffAttributeResult).length &gt; 0) &#123;</span><br><span class="line">            diffResult.push(&#123; </span><br><span class="line">            type: &apos;MODIFY_ATTRIBUTES&apos;, </span><br><span class="line">            diffAttributeResult </span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        oldNode.children,forEach((child,index)=&gt;&#123;</span><br><span class="line">            diff(child,newNode.children[index],++initialIndex,patches)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    else &#123;</span><br><span class="line">         diffResult.push(&#123; </span><br><span class="line">            type: &apos;REPLACE&apos;, </span><br><span class="line">            newNode</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  if (!oldNode) &#123;</span><br><span class="line">    diffResult.push(&#123; </span><br><span class="line">      type: &apos;REPLACE&apos;, </span><br><span class="line">      newNode</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if (diffResult.length) &#123;</span><br><span class="line">    patches[index] = diffResult</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将差异应用到dom上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">const walk = (node, walker, patches) =&gt; &#123;</span><br><span class="line">  let currentPatch = patches[walker.index]</span><br><span class="line"></span><br><span class="line">  let childNodes = node.childNodes</span><br><span class="line"></span><br><span class="line">  childNodes.forEach(child =&gt; &#123;</span><br><span class="line">    walker.index++</span><br><span class="line">    walk(child, walker, patches)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  if (currentPatch) &#123;</span><br><span class="line">    doPatch(node, currentPatch)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const doPatch = (node, patches) =&gt; &#123;</span><br><span class="line">  patches.forEach(patch =&gt; &#123;</span><br><span class="line">    switch (patch.type) &#123;</span><br><span class="line">      case &apos;MODIFY_ATTRIBUTES&apos;:</span><br><span class="line">        const attributes = patch.diffAttributeResult.attributes</span><br><span class="line">        for (let key in attributes) &#123;</span><br><span class="line">            if (node.nodeType !== 1) return</span><br><span class="line">            const value = attributes[key]</span><br><span class="line">            if (value) &#123;</span><br><span class="line">              setAttribute(node, key, value)</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">              node.removeAttribute(key)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        break</span><br><span class="line">      case &apos;MODIFY_TEXT&apos;:</span><br><span class="line">        node.textContent = patch.data</span><br><span class="line">        break</span><br><span class="line">      case &apos;REPLACE&apos;:</span><br><span class="line">        let newNode = (patch.newNode instanceof Element) ? render(patch.newNode) : document.createTextNode(patch.newNode)</span><br><span class="line">        node.parentNode.replaceChild(newNode, node)</span><br><span class="line">        break</span><br><span class="line">        case &apos;REMOVE&apos;:</span><br><span class="line">        node.parentNode.removeChild(node)</span><br><span class="line">        break</span><br><span class="line">      default:</span><br><span class="line">        break</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><a href="https://gitbook.cn/gitchat/column/5c91c813968b1d64b1e08fde/topic/5cbbef7cbbbba80861a35c23" target="_blank" rel="noopener">买的课程中的原链接</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虚拟DOM的基本思想&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用js对象模拟DOM树&lt;/li&gt;
&lt;li&gt;比较两颗虚拟DOM树的差异&lt;/li&gt;
&lt;li&gt;把差异应用到真正的DOM树上&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
