<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>哦。</title>
  
  <subtitle>知行合一</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wine1.github.io/"/>
  <updated>2020-09-06T10:29:15.842Z</updated>
  <id>https://wine1.github.io/</id>
  
  <author>
    <name>田京京呀~</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>正则表达式面试题</title>
    <link href="https://wine1.github.io/2020/09/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://wine1.github.io/2020/09/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2020-09-06T10:29:06.000Z</published>
    <updated>2020-09-06T10:29:15.842Z</updated>
    
    <content type="html"><![CDATA[<p>正则表达式常见面试题</p><p>1.给一个连字符串例如：get-element-by-id转化成驼峰形式。<br>2.匹配二进制数字<br>3.非零的十进制数字 (有至少一位数字, 但是不能以0开头)<br>4.匹配一年中的12个月<br>5.匹配qq号最长为13为<br>6.匹配常见的固定电话号码<br>7.匹配ip地址<br>8.匹配用尖括号括起来的以a开头的字符串<br>9.分割数字每三个以一个逗号划分<br>10.判断字符串是否包含数字<br>11.判断电话号码<br>12.判断是否符合指定格式<br>13.判断是否符合USD格式<br>14.JS实现千位分隔符<br>15.获取 url 参数<br>16.验证邮箱<br>17.验证身份证号码<br>18.匹配汉字<br>19.去除首尾的’/‘<br>20.判断日期格式是否符合 ‘2017-05-11’的形式，简单判断，只判断格式<br>21.判断日期格式是否符合 ‘2017-05-11’的形式，严格判断（比较复杂）<br>22.IPv4地址正则<br>23.十六进制颜色正则<br>24.车牌号正则<br>25.过滤HTML标签<br>26.密码强度正则，最少6位，包括至少1个大写字母，1个小写字母，1个数字，1个特殊字符<br>27.URL正则<br>28.匹配浮点数</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;正则表达式常见面试题&lt;/p&gt;
&lt;p&gt;1.给一个连字符串例如：get-element-by-id转化成驼峰形式。&lt;br&gt;2.匹配二进制数字&lt;br&gt;3.非零的十进制数字 (有至少一位数字, 但是不能以0开头)&lt;br&gt;4.匹配一年中的12个月&lt;br&gt;5.匹配qq号最长为13为&lt;b
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>小程序开发面试题</title>
    <link href="https://wine1.github.io/2020/09/06/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://wine1.github.io/2020/09/06/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2020-09-06T10:28:36.000Z</published>
    <updated>2020-09-06T10:28:43.661Z</updated>
    
    <content type="html"><![CDATA[<p>初识小程序</p><p>1.注册小程序<br>2.微信开发者工具<br>3.小程序与普通网页开发的区别<br>4.小程序尺寸单位rpx<br>5.样式导入（WeUI for）<br>6.选择器<br>7.小程序image高度自适应及裁剪问题<br>8.微信小程序长按识别二维码<br>9.给页面加背景色<br>10.微信小程序获取用户信息<br>11.代码审核和发布<br>12.小程序微信认证<br>13.小程序申请微信支付<br>14.小程序的目录解构及四种文件类型<br>15.小程序文件的作用域<br>16.小程序常用组件<br>1.view<br>2.scroll-view<br>3.swiper组件<br>4.movable-view<br>5.cover-view<br>6.cover-image<br>小程序基础</p><p>17.授权得到用户信息<br>18.数据绑定<br>19.列表渲染<br>20.条件渲染<br>21.公共模板建立<br>22.事件及事件绑定<br>23.引用<br>24.页面跳转<br>1.wx.switchTab<br>2.wx.reLaunch<br>3.wx.redirectTo<br>4.wx.navigateTo<br>5.wx.navigateBack<br>25.设置tabBar<br>26.页面生命周期<br>27.转发分享<br>小程序高级</p><p>28.request请求后台接口<br>29.http-promise 封装<br>30.webview<br>31.获取用户收货地址<br>32.获取地里位置<br>33.自定义组件<br>34.微信小程序支付问题<br>小程序项目实战</p><p>35.微信小程序本地数据缓存<br>36.下拉刷新和下拉加载<br>37.列表页向详情页跳转（动态修改title）<br>38.客服电话<br>39.星级评分组件<br>40.小程序插槽的使用slot<br>41.模糊查询<br>42.wxs过滤<br>43.小程序动画<br>44.列表根据索引值渲染<br>45.小程序动态修改class<br>46.小程序常用框架<br>47.参数传值的方法<br>48.提高小程序的应用速度<br>49.微信小程序的优劣势<br>50.小程序的双向绑定和vue的区别<br>51.微信小程序给按钮添加动画<br>52.微信小程序的tab按钮的转换<br>53.微信小程序引进echarts<br>54.APP打开小程序流程<br>55.小程序解析富文本编辑器<br>小程序常见bug</p><p>1.域名必须是HTTPS<br>2.input组件placeholder字体颜色<br>3.wx.navigateTo无法跳转到带tabbar的页面<br>4.tabbar在切换时页面数据无法刷新<br>5.如何去掉自定义button灰色的圆角边框<br>6.input textarea是APP的原生组件，z-index层级最高<br>7.一段文字如何换行<br>8.设置最外层标签的margin-bottom在IOS下不生效<br>9.小程序中canvas的图片不支持base64格式<br>10.回到页面顶部<br>11.wx.setStorageSync和wx.getStorageSync报错问题<br>12.如何获取微信群名称？<br>13.new Date跨平台兼容性问题<br>14.wx.getSystemInfoSync获取windowHeight不准确<br>15.图片本地资源名称，尽量使用小写命名</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;初识小程序&lt;/p&gt;
&lt;p&gt;1.注册小程序&lt;br&gt;2.微信开发者工具&lt;br&gt;3.小程序与普通网页开发的区别&lt;br&gt;4.小程序尺寸单位rpx&lt;br&gt;5.样式导入（WeUI for）&lt;br&gt;6.选择器&lt;br&gt;7.小程序image高度自适应及裁剪问题&lt;br&gt;8.微信小程序长按识别二
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>基础知识面试题</title>
    <link href="https://wine1.github.io/2020/09/06/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://wine1.github.io/2020/09/06/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2020-09-06T10:28:11.000Z</published>
    <updated>2020-09-06T10:28:19.718Z</updated>
    
    <content type="html"><![CDATA[<p>浏览器/html/css面试题</p><ol><li><p>什么是盒模型<br>盒模型（内容（content）,内边距（padding）,边框（border）,外边距（margin））</p></li><li><p>行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？行内元素和块级元素有什么区别？<br>（1）行内元素有：a( 锚点) ,b(粗体(不推荐)) ,span(常用内联容器，定义文本内区块) img(图片) input(输入框) select(项目选择) strong(粗体强调) label(表格标签) cite (引用)code(计算机代码)<br>（2）块级元素有：div ul(无序列表) ol(有序列表) dl(定义列表) table(表格)form(表单) h1 (一级标题))p(段落)pre(预格式化)<br>（3）常见的空元素： </p><figure class="highlight plain"><figcaption><span><hr> <img> <input> <link> <meta> ```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">鲜为人知的是： </span><br><span class="line">```&lt;area&gt; &lt;base&gt; &lt;col&gt; &lt;command&gt; &lt;embed&gt; &lt;keygen&gt; &lt;param&gt; &lt;source&gt; &lt;track&gt; &lt;wbr&gt;</span><br></pre></td></tr></table></figure></li><li><p>简述src和href的区别<br> 1.src 是指向物件的来源地址，是引入。在 img、script、iframe 等元素上使用。<br> 2.href 是超文本引用，指向需要连结的地方，是与该页面有关联的，是引用。在 link和a 等元素上使用。<br> 使用区别：<br> src通常用作“拿取”（引入），href 用作 “连结前往”（引用）。</p></li><li><p>什么是css Hack<br> 由于不同厂商的浏览器，比如Internet Explorer、Chrome、Mozilla Firefox、Safari等，或者是统一厂商的浏览器的不同版本，比如IE6和IE7，对CSS的解析和认识不完全一样，因此会导致生成的页面效果不一样，得不到我们所需要的页面效果。</p><p> 这个时候，我们就需要针对不同的浏览器，去写不同CSS，让它能够同时兼容不同的浏览器，能在不同的浏览器中，也能得到我们想要的页面效果。</p><p> 这个针对不同的浏览器写不同的CSS code的过程，就叫CSS hack!</p></li><li><p>什么叫优雅降级和渐进增强<br>渐进增强 progressive enhancement： 针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。 优雅降级 graceful degradation： 一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。 </p></li><li><p>px和em的区别<br> PX实际上就是像素，用PX设置字体大小时，比较稳定和精确。但如果改变浏览器的缩放，原本的布局就会被打破，这时候就可以使用em定义页面的字体大小，em是相对于父元素的，1em等于一倍的父元素字体大小。<br> EM是相对于其父元素来设置字体大小的，这样就会存在一个问题，进行任何元素设置，都有可能需要知道他父元素的大小，也比较麻烦。而Rem是相对于根元素<html>，这样就意味着，我们只需要在根元素确定一个参考值，所以rem用的更广泛。</html></p></li><li><p>Http的状态码有哪些<br> 200 – 请求成功<br> 301 – 资源(网页等)被永久转移到其它URL<br> 404 – 请求的资源(网页等)不存在<br> 500 – 内部服务器错误</p></li></ol><p>9.一次完整的HTTP事务是怎么一个过程</p><p>10.HTTPS是如何实现加密<br>    HTTPS就是使用SSL/TLS协议进行加密传输，让客户端拿到服务器的公钥，然后客户端随机生成一个对称加密的秘钥，使用公钥加密，传输给服务端，后续的所有信息都通过该对称秘钥进行加密解密，完成整个HTTPS的流程。</p><p>11.浏览器是如何渲染页面的</p><p>12.浏览器的内核有哪些？分别有什么代表的浏览器</p><p>13.页面导入时，使用link和@import有什么区别</p><p>14.如何优化图像，图像格式的区别</p><p>15.列举你了解Html5. Css3 新特性</p><p>16.可以通过哪些方法优化css3 animation渲染</p><p>17.列举几个前端性能方面的优化</p><p>18.如何实现同一个浏览器多个标签页之间的通信</p><p>19.浏览器的存储技术有哪些</p><p>20.css定位方式</p><p>21.尽可能多的写出浏览器兼容性问题</p><p>22.垂直上下居中的方法</p><p>23.响应式布局原理</p><p>25.清除浮动的方法</p><p>26.http协议和tcp协议</p><p>27.刷新页面，js请求一般会有哪些地方有缓存处理</p><p>28.如何对网站的文件和资源进行优化</p><p>29.你对网页标准和W3C重要性的理解</p><p>30.Http和https的区别</p><p>31.data-属性的作用</p><p>32.如何让Chrome浏览器显示小于12px的文字</p><p>33.哪些操作会引起页面回流（Reflow）</p><p>34.CSS预处理器的比较less sass</p><p>35.如何实现页面每次打开时清除本页缓存</p><p>36.什么是Virtual DOM,为何要用Virtual DOM</p><p>37.伪元素和伪类的区别</p><p>38.http的几种请求方法和区别</p><p>39.前端需要注意哪些SEO</p><p>40.的title和alt有什么区别</p><p>41.从浏览器地址栏输入url到显示页面的步骤</p><p>42.如何进行网站性能优化</p><p>43.语义化的理解</p><p>44.HTML5的离线储存怎么使用，工作原理能不能解释一下？</p><p>45.浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢</p><p>46.iframe有那些缺点？</p><p>47.WEB标准以及W3C标准是什么?</p><p>48.Doctype作用? 严格模式与混杂模式如何区分？它们有何意义?</p><p>49.HTML全局属性(global attribute)有哪些</p><p>50.Canvas和SVG有什么区别？</p><p>51.如何在页面上实现一个圆形的可点击区域？</p><p>52.网页验证码是干嘛的，是为了解决什么安全问题</p><p>53.请描述一下 cookies，sessionStorage 和 localStorage 的区别？</p><p>54.CSS选择器有哪些？哪些属性可以继承？</p><p>55.CSS优先级算法如何计算？</p><p>56.CSS3有哪些新特性？</p><p>57.请解释一下CSS3的flexbox（弹性盒布局模型）,以及适用场景？</p><p>58.用纯CSS创建一个三角形的原理是什么？</p><p>59.常见的兼容性问题？</p><p>60.为什么要初始化CSS样式</p><p>61.absolute的containing block计算方式跟正常流有什么不同？</p><p>62.CSS里的visibility属性有个collapse属性值？在不同浏览器下以后什么区别？</p><p>63.display:none与visibility：hidden的区别？</p><p>64.position跟display、overflow、float这些特性相互叠加后会怎么样？</p><p>65.对BFC规范(块级格式化上下文：block formatting context)的理解？</p><p>66.为什么会出现浮动和什么时候需要清除浮动？清除浮动的方式？</p><p>67.上下margin重合的问题</p><p>68.设置元素浮动后，该元素的display值是多少？</p><p>69.移动端的布局用过媒体查询吗？</p><p>70.CSS优化、提高性能的方法有哪些？</p><p>71.浏览器是怎样解析CSS选择器的？</p><p>72.在网页中的应该使用奇数还是偶数的字体？为什么呢？</p><p>73.margin和padding分别适合什么场景使用？</p><p>74.元素竖向的百分比设定是相对于容器的高度吗？</p><p>75.全屏滚动的原理是什么？用到了CSS的哪些属性？</p><p>76.什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的IE？</p><p>77.视差滚动效果？</p><p>78.::before 和 :after中双冒号和单冒号有什么区别？解释一下这2个伪元素的作用</p><p>79.让页面里的字体变清晰，变细用CSS怎么做？</p><p>80.position:fixed;在android下无效怎么处理？</p><p>81.如果需要手动写动画，你认为最小时间间隔是多久，为什么？</p><p>82.li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？</p><p>83.display:inline-block 什么时候会显示间隙？</p><p>84.有一个高度自适应的div，里面有两个div，一个高度100px，希望另一个填满剩下的高度</p><p>85.png、jpg、gif 这些图片格式解释一下，分别什么时候用。有没有了解过webp？</p><p>86.style标签写在body后与body前有什么区别？</p><p>87.CSS属性overflow属性定义溢出元素内容区的内容会如何处理?</p><p>88.阐述一下CSS Sprites</p><p>移动端热点问题</p><ol><li><p>1px border问题<br> 使用1px 再用transform缩放到50%</p></li><li><p>2X图 3X图适配<br>根据dpr显示2x图/3x图</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.bg-image(@url)&#123;</span><br><span class="line">  background-image:~&quot;url(&apos;@&#123;url&#125;@2x.png&apos;)&quot;;</span><br><span class="line">  @media (-webkit-min-device-pixel-ratio: 3),(min-device-pixel-ratio: 3)&#123;</span><br><span class="line">    background-image:~&quot;url(&apos;@&#123;url&#125;@3x.png&apos;)&quot;;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>固定定位布局 键盘挡住输入框内容</p></li></ol><ol start="4"><li>click的300ms延迟问题和点击穿透问题</li><li>phone及ipad下输入框默认内阴影</li><li>防止手机中页面放大和缩小</li><li>flex布局</li><li>px、em、rem、%、vw、vh、vm这些单位的区别</li><li>移动端适配- dpr浅析</li><li>移动端扩展点击区域</li><li>上下拉动滚动条时卡顿、慢</li><li>长时间按住页面出现闪退</li><li>ios和android下触摸元素时出现半透明灰色遮罩</li><li>active兼容处理 即 伪类：active失效</li><li>webkit mask兼容处理</li><li>pc端与移动端字体大小的问题</li><li>transiton闪屏</li><li>圆角bug</li><li>如何解决禁用表单后移动端样式不统一问题 ?</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;浏览器/html/css面试题&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;什么是盒模型&lt;br&gt;盒模型（内容（content）,内边距（padding）,边框（border）,外边距（margin））&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;行内元素有哪些？块级元素有哪些？ 空(void)元
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>vue面试题</title>
    <link href="https://wine1.github.io/2020/09/06/vue%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://wine1.github.io/2020/09/06/vue%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2020-09-06T10:27:45.000Z</published>
    <updated>2020-09-06T10:27:54.492Z</updated>
    
    <content type="html"><![CDATA[<p>生命周期函数面试题</p><p>1.什么是 vue 生命周期<br>2.vue生命周期的作用是什么<br>3.第一次页面加载会触发哪几个钩子<br>4.简述每个周期具体适合哪些场景<br>5.created和mounted的区别<br>6.vue获取数据在哪个周期函数<br>7.请详细说下你对vue生命周期的理解？<br>vue路由面试题</p><p>1.mvvm 框架是什么？<br>2.vue-router 是什么?它有哪些组件<br>3.active-class 是哪个组件的属性？<br>4.怎么定义 vue-router 的动态路由? 怎么获取传过来的值<br>5.vue-router 有哪几种导航钩子?<br>6.route和router 的区别<br>7.vue-router响应路由参数的变化<br>8.vue-router传参<br>9.vue-router的两种模式<br>10.vue-router实现路由懒加载（ 动态加载路由 ）<br>vue常见面试题</p><p>1.vue优点<br>2.vue父组件向子组件传递数据？<br>3.子组件像父组件传递事件<br>4.v-show和v-if指令的共同点和不同点<br>5.如何让CSS只在当前组件中起作用<br>6.的作用是什么?<br>7.如何获取dom<br>8.说出几种vue当中的指令和它的用法？<br>9.vue-loader是什么？使用它的用途有哪些？<br>10.为什么使用key<br>11.axios及安装<br>12.axios解决跨域<br>13.v-modal的使用<br>14.scss的安装以及使用<br>15.请说出vue.cli项目中src目录每个文件夹和文件的用法？<br>16.分别简述computed和watch的使用场景<br>17.v-on可以监听多个方法吗<br>18.$nextTick的使用<br>19.vue组件中data为什么必须是一个函数<br>20.vue事件对象的使用<br>21 组件间的通信<br>22.渐进式框架的理解<br>23.Vue中双向数据绑定是如何实现的<br>24.单页面应用和多页面应用区别及优缺点<br>25.vue中过滤器有什么作用及详解<br>26.v-if和v-for的优先级<br>27.assets和static的区别<br>28.列举常用的指令<br>29.vue常用的修饰符<br>30.数组更新检测<br>31.Vue.set视图更新<br>32.自定义指令详解<br>33.vue的两个核心点<br>34.vue和jQuery的区别<br>35 引进组件的步骤<br>36.Vue-cli打包命令是什么？打包后悔导致路径问题，应该在哪里修改<br>37.三大框架的对比<br>38.跨组件双向数据绑定<br>39.delete和Vue.delete删除数组的区别<br>40.SPA首屏加载慢如何解决<br>41.Vue-router跳转和location.href有什么区别<br>42.vue slot<br>43.你们vue项目是打包了一个js文件，一个css文件，还是有多个文件？<br>44.vue遇到的坑，如何解决的？<br>45.Vue里面router-link在电脑上有用，在安卓上没反应怎么解决？<br>46.Vue2中注册在router-link上事件无效解决方法<br>47.RouterLink在IE和Firefox中不起作用（路由不跳转）的问题<br>48.axios的特点有哪些<br>49.请说下封装 vue 组件的过程？<br>50.vue 各种组件通信方法（父子 子父 兄弟 爷孙 毫无关系的组件）<br>51.params和query的区别<br>52.vue mock数据<br>53 vue封装通用组件<br>54.vue初始化页面闪动问题<br>55.vue禁止弹窗后的屏幕滚动<br>56.vue更新数组时触发视图更新的方法<br>57.vue常用的UI组件库<br>58.vue如何引进本地背景图片<br>59.vue如何引进sass<br>60.vue修改打包后静态资源路径的修改<br>vuex常见面试题</p><p>1.vuex是什么？怎么使用？哪种功能场景使用它？<br>2.vuex有哪几种属性<br>3.不使用Vuex会带来什么问题<br>4.Vue.js中ajax请求代码应该写在组件的methods中还是vuex的actions中？<br>5.vuex一个例子方法<br>6.Vuex中如何异步修改状态<br>7.Vuex中actions和mutations的区别<br>vue项目实战</p><p>1.顶部悬停效果<br>2.电话本列表效果（ 右边字母分类 上下滑动 旁边字母显示高亮）<br>3.vue做代理<br>4.Vue路由切换时的左滑和右滑效果示例<br>ES6面试题</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;生命周期函数面试题&lt;/p&gt;
&lt;p&gt;1.什么是 vue 生命周期&lt;br&gt;2.vue生命周期的作用是什么&lt;br&gt;3.第一次页面加载会触发哪几个钩子&lt;br&gt;4.简述每个周期具体适合哪些场景&lt;br&gt;5.created和mounted的区别&lt;br&gt;6.vue获取数据在哪个周期函数&lt;b
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>react面试题</title>
    <link href="https://wine1.github.io/2020/09/06/react%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://wine1.github.io/2020/09/06/react%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2020-09-06T10:26:05.000Z</published>
    <updated>2020-09-06T10:27:20.218Z</updated>
    
    <content type="html"><![CDATA[<p>react生命周期面试题</p><p>1.react 生命周期函数<br>2.react生命周期中，最适合与服务端进行数据交互的是哪个函数<br>3.运行阶段生命周期调用顺序<br>4.shouldComponentUpdate 是做什么的，（react 性能优化是哪个周期函数？）<br>5.指出(组件)生命周期方法的不同<br>react 基础面试题</p><p>1.React 中 keys 的作用是什么？<br>2.React 中 refs 的作用是什么？<br>3.React 中有三种构建组件的方式<br>4.调用 setState 之后发生了什么？<br>5.react diff 原理（常考，大厂必考）<br>6.为什么建议传递给 setState 的参数是一个 callback 而不是一个对象<br>7.除了在构造函数中绑定 this，还有其它方式吗<br>8.setState第二个参数的作用<br>9.(在构造函数中)调用 super(props) 的目的是什么<br>10.简述 flux 思想<br>11.在 React 当中 Element 和 Component 有何区别？<br>12.描述事件在 React 中的处理方式。<br>13.createElement 和 cloneElement 有什么区别？<br>14.如何告诉 React 它应该编译生产环境版本？<br>15.Controlled Component 与 Uncontrolled Component 之间的区别是什么？<br>react组件面试题</p><p>1.展示组件(Presentational component)和容器组件(Container component)之间有何不同<br>2.类组件(Class component)和函数式组件(Functional component)之间有何不同<br>3.(组件的)状态(state)和属性(props)之间有何不同<br>4.何为受控组件(controlled component)<br>5.何为高阶组件(higher order component)<br>6.应该在 React 组件的何处发起 Ajax 请求<br>7.react中组件传值<br>8.什么时候在功能组件( Class Component )上使用类组件( Functional Component )？<br>9.受控组件( controlled component )与不受控制的组件( uncontrolled component )有什么区别？<br>10.react 组件的划分业务组件技术组件？<br>redux面试题</p><p>1.redux中间件<br>2.redux有什么缺点<br>3.了解 redux 么，说一下 redux 把</p><p>react性能比较面试题</p><p>1.vue和react的区别<br>2.react性能优化的方案<br>3.React 项目用过什么脚手架<br>4.介绍一下webpack webpack<br>5.如果你创建了类似于下面的 Twitter 元素，那么它相关的类定义是啥样子的？<br>6.为什么我们需要使用 React 提供的 Children API 而不是 JavaScript 的 map？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;react生命周期面试题&lt;/p&gt;
&lt;p&gt;1.react 生命周期函数&lt;br&gt;2.react生命周期中，最适合与服务端进行数据交互的是哪个函数&lt;br&gt;3.运行阶段生命周期调用顺序&lt;br&gt;4.shouldComponentUpdate 是做什么的，（react 性能优化是哪个周
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>js面试题</title>
    <link href="https://wine1.github.io/2020/09/06/js%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://wine1.github.io/2020/09/06/js%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2020-09-06T10:25:21.000Z</published>
    <updated>2020-09-06T10:25:41.587Z</updated>
    
    <content type="html"><![CDATA[<p>1.简述同步和异步的区别<br>2.怎么添加、移除、复制、创建、和查找节点<br>3.实现一个函数clone 可以对Javascript中的五种主要数据类型（Number、string、Object、Array、Boolean）进行复制<br>4.如何消除一个数组里面重复的元素<br>5.写一个返回闭包的函数<br>6.使用递归完成1到100的累加<br>7.Javascript有哪几种数据类型<br>8.如何判断数据类型<br>9.console.log(1+’2’)和console.log(1-‘2’)的打印结果<br>10.Js的事件委托是什么，原理是什么<br>11.如何改变函数内部的this指针的指向<br>12.列举几种解决跨域问题的方式，且说明原理<br>13.谈谈垃圾回收机制的方式及内存管理<br>14.写一个function ，清除字符串前后的空格<br>15.js实现继承的方法有哪些<br>16.判断一个变量是否是数组，有哪些办法<br>17.let ，const ，var 有什么区别<br>18.箭头函数与普通函数有什么区别<br>19.随机取1-10之间的整数<br>20.new操作符具体干了什么<br>21.Ajax原理<br>22.模块化开发怎么做<br>23.异步加载Js的方式有哪些<br>24.xml和 json的区别<br>25.webpack如何实现打包的<br>26.常见web安全及防护原理<br>27.用过哪些设计模式<br>28.为什么要同源限制<br>29.offsetWidth/offsetHeight,clientWidth/clientHeight与scrollWidth/scrollHeight的区别<br>30.javascript有哪些方法定义对象<br>31.说说你对promise的了解<br>32.谈谈你对AMD、CMD的理解<br>33.web开发中会话跟踪的方法有哪些<br>34.介绍js有哪些内置对象？<br>35.说几条写JavaScript的基本规范？<br>36.javascript创建对象的几种方式？<br>37.eval是做什么的？<br>38.null，undefined 的区别？<br>39.[“1”, “2”, “3”].map(parseInt) 答案是多少？<br>40.javascript 代码中的”use strict”;是什么意思 ? 使用它区别是什么？<br>41.js延迟加载的方式有哪些？<br>42.defer和async<br>43.说说严格模式的限制<br>44.attribute和property的区别是什么？<br>45.ECMAScript6 怎么写class么，为什么会出现class这种东西?<br>46.常见兼容性问题<br>47.函数防抖节流的原理<br>48.原始类型有哪几种？null是对象吗？<br>49.为什么console.log(0.2+0.1==0.3) //false<br>50.说一下JS中类型转换的规则？<br>51.深拷贝和浅拷贝的区别？如何实现<br>52.如何判断this？箭头函数的this是什么<br>53.== 和 ===的区别<br>54.什么是闭包<br>55.JavaScript原型，原型链 ? 有什么特点？<br>56.typeof()和instanceof()的用法区别<br>57.什么是变量提升<br>58.all、apply以及bind函数内部实现是怎么样的<br>59.为什么会出现setTimeout倒计时误差？如何减少<br>60.谈谈你对JS执行上下文栈和作用域链的理解<br>61.new的原理是什么？通过new的方式创建对象和通过字面量创建有什么区别？<br>62.prototype 和 proto 区别是什么？<br>63.使用ES5实现一个继承？<br>64.取数组的最大值（ES5、ES6）<br>65.ES6新的特性有哪些？<br>66.promise 有几种状态, Promise 有什么优缺点 ?<br>67.Promise构造函数是同步还是异步执行，then呢 ?promise如何实现then处理 ?<br>68.Promise和setTimeout的区别 ?<br>69.如何实现 Promise.all ?<br>70.如何实现 Promise.finally ?<br>71.如何判断img加载完成<br>72.如何阻止冒泡？<br>73.如何阻止默认事件？<br>74.ajax请求时，如何解释json数据<br>75.json和jsonp的区别?<br>76.如何用原生js给一个按钮绑定两个onclick事件？<br>77.拖拽会用到哪些事件<br>78.document.write和innerHTML的区别<br>79.jQuery的事件委托方法bind 、live、delegate、on之间有什么区别？<br>80.浏览器是如何渲染页面的？<br>81.$(document).ready()方法和window.onload有什么区别？<br>82.jquery中.get()提交和post()提交有区别吗？<br>83.对前端路由的理解？前后端路由的区别？<br>84.手写一个类的继承<br>85.XMLHttpRequest：XMLHttpRequest.readyState;状态码的意思</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.简述同步和异步的区别&lt;br&gt;2.怎么添加、移除、复制、创建、和查找节点&lt;br&gt;3.实现一个函数clone 可以对Javascript中的五种主要数据类型（Number、string、Object、Array、Boolean）进行复制&lt;br&gt;4.如何消除一个数组里面重复的
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>es6常见面试题</title>
    <link href="https://wine1.github.io/2020/09/06/es6%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://wine1.github.io/2020/09/06/es6%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2020-09-06T10:24:35.000Z</published>
    <updated>2020-09-06T14:38:04.088Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>ES6新增方法面试题</p><p>1.let const var比较<br>let 块级作用域 不可以重复声明 不存在变量提升<br>var 函数作用域<br>const 声明后必须立即初始化 然后值不能改变</p><p>2.反引号（`）标识 模板字符串<br>3.函数默认参数<br>在ES6中，可以为函数的参数指定默认值。函数默认参数允许在没有值或undefined被传入时使用默认形参<br>参数变量是默认声明的，所以不能用let或const再次声明。<br>使用参数默认值时，函数不能有同名参数。<br>显式传入undefined或不传值时使用函数默认参数值；传入’’或null时使用传入的参数值。<br>通常情况下，定义了默认值的参数，应该是函数的尾参数。</p><p>4.箭头函数</p><p>5.属性简写</p><p>6.方法简写<br>7.Object.keys()方法，获取对象的所有属性名或方法名<br>8.Object.assign ()原对象的属性和方法都合并到了目标对象<br>9.for…of 循环<br>10.import和export<br>11.Promise对象<br>12.解构赋值<br>13.set数据结构（可用于快速去重）<br>14.Spread Operator 展开运算符(…)<br>15.字符串新增方法</p><p>ES6数组面试题</p><p>1.forEach(callback)<br>forEach是一个数组方法，可以用来把一个函数套用在一个数组中的每个元素上，只可用于数组</p><p>2.map()<br>map() 方法按照原始数组元素顺序依次处理元素。<br>注意： map() 不会对空数组进行检测。<br>注意： map() 不会改变原始数组。</p><p>3.filter()<br>filter过滤数组中的元素<br>注意： filter() 不会对空数组进行检测。<br>注意： filter() 不会改变原始数组。</p><p>4.reduce()<br>reduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。<br>reduce() 可以作为一个高阶函数，用于函数的 compose。<br>注意: reduce() 对于空数组是不会执行回调函数的。</p><p>5.some()<br>some() 方法用于检测数组中的元素是否满足指定条件（函数提供）。<br>some() 方法会依次执行数组的每个元素：<br>如果有一个元素满足条件，则表达式返回true , 剩余的元素不会再执行检测。<br>如果没有满足条件的元素，则返回false。<br>注意： some() 不会对空数组进行检测。<br>注意： some() 不会改变原始数组。</p><p>6.every()<br>every() 方法用于检测数组所有元素是否都符合指定条件（通过函数提供）。<br>every() 方法使用指定函数检测数组中的所有元素：<br>如果数组中检测到有一个元素不满足，则整个表达式返回 false ，且剩余的元素不会再进行检测。<br>如果所有元素都满足条件，则返回 true。<br>注意： every() 不会对空数组进行检测。<br>注意： every() 不会改变原始数组。</p><p>ES6编程题</p><p>1.使用解构，实现两个变量的值的交换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let a=1;let b=2;</span><br><span class="line"> [a,b]=[b,a];</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;ES6新增方法面试题&lt;/p&gt;
&lt;p&gt;1.let const var比较&lt;br&gt;let 块级作用域 不可以重复声明 不存在变量提升&lt;br&gt;var 函数作用域&lt;br&gt;const 声明后必须立即初始化 然后值不能改变&lt;/p&gt;
&lt;p&gt;2.反引号（
      
    
    </summary>
    
    
    
      <category term="面试题" scheme="https://wine1.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>js中的防抖和节流</title>
    <link href="https://wine1.github.io/2020/08/25/js%E4%B8%AD%E7%9A%84%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/"/>
    <id>https://wine1.github.io/2020/08/25/js%E4%B8%AD%E7%9A%84%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</id>
    <published>2020-08-25T15:16:15.000Z</published>
    <updated>2020-08-25T16:00:58.521Z</updated>
    
    <content type="html"><![CDATA[<p>debounce，去抖动。策略是当事件被触发时，设定一个周期延迟执行动作，若期间又被触发，则重新设定周期，直到周期结束，执行动作。 这是debounce的基本思想，在后期又扩展了前缘debounce，即执行动作在前，然后设定周期，周期内有事件被触发，不执行动作，且周期重新设定。</p><p>throttling，节流的策略是，固定周期内，只执行一次动作，若有新事件触发，不执行。周期结束后，又有事件触发，开始新的周期。 节流策略也分前缘和延迟两种。与debounce类似，延迟是指 周期结束后执行动作，前缘是指执行动作后再开始周期。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;debounce，去抖动。策略是当事件被触发时，设定一个周期延迟执行动作，若期间又被触发，则重新设定周期，直到周期结束，执行动作。 这是debounce的基本思想，在后期又扩展了前缘debounce，即执行动作在前，然后设定周期，周期内有事件被触发，不执行动作，且周期重新设
      
    
    </summary>
    
    
    
      <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>leetcode之数组</title>
    <link href="https://wine1.github.io/2020/08/12/leetcode%E4%B9%8B%E6%95%B0%E7%BB%84/"/>
    <id>https://wine1.github.io/2020/08/12/leetcode%E4%B9%8B%E6%95%B0%E7%BB%84/</id>
    <published>2020-08-12T15:36:36.000Z</published>
    <updated>2020-08-12T15:36:51.074Z</updated>
    
    <content type="html"><![CDATA[<h2 id="leetcode——数组类知识点及题型总结"><a href="#leetcode——数组类知识点及题型总结" class="headerlink" title="leetcode——数组类知识点及题型总结"></a>leetcode——数组类知识点及题型总结</h2><p>很多题都能靠暴力解法 但是通常都会有时间复杂度或者空间复杂度超出限制的情况，因此都不予讨论</p><ol><li><p>k-sum类 如 第一题 twosum 计算数组中的哪些值得和能等于给定的target 有时候题目中会带有是否能重复使用一个值的限制</p><ul><li>hash 遍历数组 将每一个值存入hash表中 并检测hash表中是否有 target-nums[i] 的结果 如果有 则结果就是 i 和对应的hash表中的值 时间复杂度O(n)</li><li>two-points </li></ul></li><li><p>区间类</p></li></ol><ol start="3"><li>子数组类</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;leetcode——数组类知识点及题型总结&quot;&gt;&lt;a href=&quot;#leetcode——数组类知识点及题型总结&quot; class=&quot;headerlink&quot; title=&quot;leetcode——数组类知识点及题型总结&quot;&gt;&lt;/a&gt;leetcode——数组类知识点及题型总结&lt;/
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>小程序同层渲染</title>
    <link href="https://wine1.github.io/2020/08/12/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%90%8C%E5%B1%82%E6%B8%B2%E6%9F%93/"/>
    <id>https://wine1.github.io/2020/08/12/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%90%8C%E5%B1%82%E6%B8%B2%E6%9F%93/</id>
    <published>2020-08-12T15:33:13.000Z</published>
    <updated>2020-08-12T15:33:47.128Z</updated>
    
    <content type="html"><![CDATA[<h2 id="同层渲染"><a href="#同层渲染" class="headerlink" title="同层渲染"></a>同层渲染</h2><p>小程序的内容大多是渲染在 WebView 上的，如果把 WebView 看成单独的一层，那么由系统自带的这些原生组件则位于另一个更高的层级（如 canvas、video）。两个层级是完全独立的，因此无法简单地通过使用 z-index 控制原生组件和非原生组件之间的相对层级。想要在原生组件之上只能用 cover-view 和 cover-image 来实现。但 cover-view 和 cover-image 支持的 css 样式是在很有限，而且经过实践来看，cover-view 在安卓部分机器上性能真的很差。<br><a href="https://developers.weixin.qq.com/community/develop/doc/000aa28d030f60a3c4183eecb5d801" target="_blank" rel="noopener">官方社区说明</a></p><p>然并卵 没有用</p><p>实时音视频小程序开发ios手机无法正常在小程序里视频，安卓手机就可以<br>解决方案： 在 app.json 下 window 下配置一下 “renderingMode”: “seperated”强制关掉同层<br>关掉同层渲染 “renderingMode”: “seperated”,</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;同层渲染&quot;&gt;&lt;a href=&quot;#同层渲染&quot; class=&quot;headerlink&quot; title=&quot;同层渲染&quot;&gt;&lt;/a&gt;同层渲染&lt;/h2&gt;&lt;p&gt;小程序的内容大多是渲染在 WebView 上的，如果把 WebView 看成单独的一层，那么由系统自带的这些原生组件则位于另
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>grid布局</title>
    <link href="https://wine1.github.io/2020/08/12/grid%E5%B8%83%E5%B1%80/"/>
    <id>https://wine1.github.io/2020/08/12/grid%E5%B8%83%E5%B1%80/</id>
    <published>2020-08-12T15:31:12.000Z</published>
    <updated>2020-08-12T15:33:40.530Z</updated>
    
    <content type="html"><![CDATA[<h2 id="grid布局"><a href="#grid布局" class="headerlink" title="grid布局"></a>grid布局</h2><p>gap属性能解决flex多行布局中最后一行布局不满时位置偏移的问题</p><p><a href="http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html" target="_blank" rel="noopener">阮一峰的grid布局教程</a><br>网格布局 将网页划分成一个个网格，可以任意组合不同的网格，做出各种各样的布局。<br>具体么 目前还没有使用过 最近没有用上 没找到合适的应用场景</p><a id="more"></a><p>跟flex布局有一定的相似性</p><p>display 属性<br>display: grid指定一个容器采用网格布局。</p><p>grid-template-columns 属性，<br>grid-template-rows 属性<br>容器指定了网格布局以后，接着就要划分行和列。grid-template-columns属性定义每一列的列宽，grid-template-rows属性定义每一行的行高。</p><p>repeat()<br>有时候，重复写同样的值非常麻烦，尤其网格很多时。这时，可以使用repeat()函数，简化重复的值。<br>repeat()接受两个参数，第一个参数是重复的次数（上例是3），第二个参数是所要重复的值。</p><p>auto-fill 关键字<br>有时，单元格的大小是固定的，但是容器的大小不确定。如果希望每一行（或每一列）容纳尽可能多的单元格，这时可以使用auto-fill关键字表示自动填充。</p><p>fr 关键字<br>为了方便表示比例关系，网格布局提供了fr关键字（fraction 的缩写，意为”片段”）。如果两列的宽度分别为1fr和2fr，就表示后者是前者的两倍。<br>minmax()<br>minmax()函数产生一个长度范围，表示长度就在这个范围之中。它接受两个参数，分别为最小值和最大值。</p><p>auto 关键字<br>auto关键字表示由浏览器自己决定长度。</p><p>网格线的名称<br>grid-template-columns属性和grid-template-rows属性里面，还可以使用方括号，指定每一根网格线的名字，方便以后的引用。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;grid布局&quot;&gt;&lt;a href=&quot;#grid布局&quot; class=&quot;headerlink&quot; title=&quot;grid布局&quot;&gt;&lt;/a&gt;grid布局&lt;/h2&gt;&lt;p&gt;gap属性能解决flex多行布局中最后一行布局不满时位置偏移的问题&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;阮一峰的grid布局教程&lt;/a&gt;&lt;br&gt;网格布局 将网页划分成一个个网格，可以任意组合不同的网格，做出各种各样的布局。&lt;br&gt;具体么 目前还没有使用过 最近没有用上 没找到合适的应用场景&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="https://wine1.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>解决小程序列表更新卡顿方案</title>
    <link href="https://wine1.github.io/2020/08/09/%E8%A7%A3%E5%86%B3%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%88%97%E8%A1%A8%E6%9B%B4%E6%96%B0%E5%8D%A1%E9%A1%BF%E6%96%B9%E6%A1%88/"/>
    <id>https://wine1.github.io/2020/08/09/%E8%A7%A3%E5%86%B3%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%88%97%E8%A1%A8%E6%9B%B4%E6%96%B0%E5%8D%A1%E9%A1%BF%E6%96%B9%E6%A1%88/</id>
    <published>2020-08-09T13:34:55.000Z</published>
    <updated>2020-08-09T13:35:47.999Z</updated>
    
    <content type="html"><![CDATA[<h2 id="解决小程序列表更新卡顿方案"><a href="#解决小程序列表更新卡顿方案" class="headerlink" title="解决小程序列表更新卡顿方案"></a>解决小程序列表更新卡顿方案</h2><p>什么情况会引发小程序的渲染性能问题</p><ol><li>setData传递大量的新数据</li><li>频繁的执行setData操作</li><li>过多的页面节点数</li></ol><a id="more"></a><p>官方方案 <a href="https://github.com/Tencent/westore" target="_blank" rel="noopener">https://github.com/Tencent/westore</a></p><p>解决方案（分别针对上述情况）</p><ol><li>data对象中只传输视图层要用的数据 合理利用局部更新</li><li>在不影响业务流程的前提下，将多个 setData 调用合并执行，减少线程间通信频次。<br>当需要在频繁触发的用户事件（如 PageScroll 、 Resize 事件）中调用 setData ，合理的利用 函数防抖（debounce） 和 函数节流（throttle） 可以减少 setData 执行次数。<br>函数防抖（debounce）：函数在触发n秒后才执行一次，如果在n秒内重复触发函数，则重新计算时间。<br>函数节流（throttle）：单位时间内，只会触发一次函数，如果同一个单位时间内触发多次函数，只会有一次生效。</li></ol><p>除了让开发者自觉遵循规则来减少 setData 数据传输量和执行频率之外，我们还可以自己设计一个 diff 算法，重新对 setData 进行封装，使得在 setData 执行之前，让待更新的数据与原 data 数据做 diff 对比，计算出数据差异 patch 对象，判断 patch 对象是否为空，如果为空则跳过执行更新，否则再将 patch 对象执行 setData 操作，从而达到减少数据传输量和降低执行 setData 频率的目的。</p><p>网友方案 转摘自 <a href="https://segmentfault.com/a/1190000019910111" target="_blank" rel="noopener">https://segmentfault.com/a/1190000019910111</a></p><p>小程序看起来很简单易上手 但是有很多奇奇怪怪的坑和一系列的性能优化问题 还需要深入研究才能更好的实现需求提升用户体验</p><h2 id="diff算法实现思路"><a href="#diff算法实现思路" class="headerlink" title="diff算法实现思路"></a>diff算法实现思路</h2><p>策略：在数据更新之前先对更新前后数据做diff对比，找出差异部分patch，如果patch为空，结束更新，否则只对patch部分做更新。</p><p>设计思路：</p><ul><li>diff前先将数据路径写法数据转换成格式化JSON</li><li>使用深度优先遍历策略</li><li>只对同层节点进行对比</li><li>使用数据路径方式实现局部更新</li><li>减少不必要的diff对比<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">const OBJECT_TYPE = &apos;[object Object]&apos;;</span><br><span class="line">const ARRAY_TYPE = &apos;[object Array]&apos;;</span><br><span class="line">const getType = (obj) =&gt; Object.prototype.toString.call(obj);</span><br><span class="line">const initPath = (data) =&gt; &#123;</span><br><span class="line">    if (getType(data) !== OBJECT_TYPE) return;</span><br><span class="line">    for (let item in data) &#123;</span><br><span class="line">        if (/\w+\.\w+/g.test(item) &amp;&amp; item.indexOf(&apos;[&apos;) === -1) &#123;</span><br><span class="line">            const arr = item.split(&apos;.&apos;);</span><br><span class="line">            let result = data, len = arr.length;</span><br><span class="line">            for (let i = 0; i &lt; len - 1; i++) &#123;</span><br><span class="line">                const arrItem = arr[i];</span><br><span class="line">                if (getType(result[arrItem]) !== OBJECT_TYPE) &#123;</span><br><span class="line">                    result[arrItem] = &#123;&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">                result = result[arrItem];</span><br><span class="line">            &#125;</span><br><span class="line">            result[arr[len - 1]] = data[item];</span><br><span class="line">            delete data[item];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">const initData = (cur, pre, root = false) =&gt; &#123;</span><br><span class="line">    if (cur === pre) return;</span><br><span class="line">    const curType = getType(cur), preType = getType(pre);</span><br><span class="line">    if (curType !== preType) return;</span><br><span class="line">    if (curType === ARRAY_TYPE &amp;&amp; cur.length &gt;= pre.length) &#123;</span><br><span class="line">        for (let i = 0; i &lt; pre.length; i++) &#123;</span><br><span class="line">            initData(cur[i], pre[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else if (curType === OBJECT_TYPE &amp;&amp; Object.keys(cur).length &gt;= Object.keys(pre).length) &#123;</span><br><span class="line">        for (let key in pre) &#123;</span><br><span class="line">            if (!root &amp;&amp; cur[key] === undefined) &#123; </span><br><span class="line">                cur[key] = null; </span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                initData(cur[key], pre[key]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">const doDiff = (cur, pre, target, path = &apos;&apos;, root = false) =&gt; &#123;</span><br><span class="line">    if (cur === pre) return;</span><br><span class="line">    const curRootType = getType(cur), preRootType = getType(pre);</span><br><span class="line">    if (curRootType === ARRAY_TYPE &amp;&amp; preRootType === curRootType &amp;&amp; cur.length &gt;= pre.length) &#123;</span><br><span class="line">        for (let i = 0; i &lt; cur.length; i++) &#123;</span><br><span class="line">            doDiff(cur[i], pre[i], target, `$&#123;path&#125;[$&#123;i&#125;]`); </span><br><span class="line">        &#125;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    if (curRootType === OBJECT_TYPE &amp;&amp; preRootType === curRootType &amp;&amp; (root || Object.keys(cur).length &gt;= Object.keys(pre).length)) &#123;</span><br><span class="line">        const keys = Object.keys(cur);</span><br><span class="line">        for (let key of keys) &#123;</span><br><span class="line">            const curVal = cur[key], preVal = pre[key];</span><br><span class="line">            const curType = getType(curVal), preType = getType(preVal);</span><br><span class="line">            if (curVal === preVal) continue;</span><br><span class="line">            if (curType === ARRAY_TYPE &amp;&amp; preType === curType &amp;&amp; curVal.length &gt;= preVal.length) &#123;</span><br><span class="line">                for (let i = 0; i &lt; curVal.length; i++) &#123;</span><br><span class="line">                    doDiff(curVal[i], preVal[i], target, `$&#123;path ? path + &apos;.&apos; : &apos;&apos;&#125;$&#123;key&#125;[$&#123;i&#125;]`);</span><br><span class="line">                &#125;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            if (curType === OBJECT_TYPE &amp;&amp; preType === curType &amp;&amp; Object.keys(curVal).length &gt;= Object.keys(preVal).length) &#123;</span><br><span class="line">                for (let sKey in curVal) &#123;</span><br><span class="line">                    doDiff(curVal[sKey], preVal[sKey], target, `$&#123;path ? path + &apos;.&apos; : &apos;&apos;&#125;$&#123;key&#125;.$&#123;sKey&#125;`);</span><br><span class="line">                &#125;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            target[`$&#123;path ? path + &apos;.&apos; : &apos;&apos;&#125;$&#123;key&#125;`] = curVal;</span><br><span class="line">        &#125;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    target[path] = cur;</span><br><span class="line">&#125;;</span><br><span class="line">export default function diff(data, prevData) &#123;</span><br><span class="line">    const target = &#123;&#125;;</span><br><span class="line">    initPath(data);</span><br><span class="line">    initData(data, prevData, true);</span><br><span class="line">    doDiff(data, prevData, target, &apos;&apos;, true);</span><br><span class="line">    return target;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;解决小程序列表更新卡顿方案&quot;&gt;&lt;a href=&quot;#解决小程序列表更新卡顿方案&quot; class=&quot;headerlink&quot; title=&quot;解决小程序列表更新卡顿方案&quot;&gt;&lt;/a&gt;解决小程序列表更新卡顿方案&lt;/h2&gt;&lt;p&gt;什么情况会引发小程序的渲染性能问题&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;setData传递大量的新数据&lt;/li&gt;
&lt;li&gt;频繁的执行setData操作&lt;/li&gt;
&lt;li&gt;过多的页面节点数&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>flex布局知识点</title>
    <link href="https://wine1.github.io/2020/07/22/flex%E5%B8%83%E5%B1%80%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>https://wine1.github.io/2020/07/22/flex%E5%B8%83%E5%B1%80%E7%9F%A5%E8%AF%86%E7%82%B9/</id>
    <published>2020-07-22T14:39:48.000Z</published>
    <updated>2020-08-10T15:26:54.637Z</updated>
    
    <content type="html"><![CDATA[<p>flex是一个十分好用的布局方法，能轻松的实现很多以往需要做复杂的工作才能实现的效果<br>在reactnative中 更是默认的flex布局<br>之前对flex布局都是一知半解，今天看到了一句值得划重点的知识点<br>码起来呀</p><a id="more"></a><p>在前端面试题中有一道经典css的考题：实现元素的水平垂直居中布局<br>当然实现的方法很多，毕竟css是十分灵活的<br>但是在css布局中 一行 <code>align-items:center</code> 就能解决这个问题<br>可能提到flex布局有些人也只能想到<code>justify-content:center</code>和<code>align-items:center</code><br>甚至弄不太清楚到底那个属性决定了水平居中哪个决定了垂直居中</p><p>flex布局中是分为 主轴 和 副轴 的<br>而主轴和副轴的方向又由flex-direction决定 该属性的默认值是row 即 横轴是主轴 竖轴是副轴</p><p>划重点来了</p><p>justify-content属性用于控制项目在<em>主轴</em> 的对齐方式<br>注意这里是主轴而不是横轴 当flex-direction的值是row 或者 就是默认值时，主轴就是横轴，但是当flex-direction值为column时 主轴就是竖轴</p><p>而align-items属性 是控制副轴的排列方式的</p><p>常见flex布局的考点</p><ol><li><p>实现水平垂直居中</p></li><li><p>等高布局</p><ul><li>flex布局中子元素等高</li></ul></li><li><p>Sticky Footer</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- HTML --&gt;</span><br><span class="line">&lt;header&gt;&lt;/header&gt;</span><br><span class="line">&lt;main&gt;&lt;/main&gt;</span><br><span class="line">&lt;footer&gt;&lt;/footer&gt;</span><br><span class="line">//方案1 css</span><br><span class="line">body &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">footer &#123;</span><br><span class="line">    margin-top: auto;</span><br><span class="line">&#125;</span><br><span class="line">//方案2 css</span><br><span class="line">body &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main &#123;</span><br><span class="line">    flex: 1 0 auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>均分列 </p><ul><li>flex布局 </li><li>子元素 width:calc(100% / 3)</li></ul></li><li><p><a href="https://wine1.github.io/2017/12/01/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80%E5%92%8C%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80/">圣杯布局</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;flex是一个十分好用的布局方法，能轻松的实现很多以往需要做复杂的工作才能实现的效果&lt;br&gt;在reactnative中 更是默认的flex布局&lt;br&gt;之前对flex布局都是一知半解，今天看到了一句值得划重点的知识点&lt;br&gt;码起来呀&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="https://wine1.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>async/await</title>
    <link href="https://wine1.github.io/2020/07/15/async-await/"/>
    <id>https://wine1.github.io/2020/07/15/async-await/</id>
    <published>2020-07-15T15:32:12.000Z</published>
    <updated>2020-07-15T15:38:44.441Z</updated>
    
    <content type="html"><![CDATA[<p>async/await是一对强大的异步工具<br>async 表示这是一个async函数，await只能用在这个函数里面。<br>await 表示在这里等待promise返回结果了，再继续执行。<br>await 后面跟着的应该是一个promise对象</p><p>await等待的虽然是promise对象，但不必写.then(..)，直接可以得到返回值。</p><p>捕捉错误<br>既然.then(..)不用写了，那么.catch(..)也不用写，可以直接用标准的try catch语法捕捉错误。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;async/await是一对强大的异步工具&lt;br&gt;async 表示这是一个async函数，await只能用在这个函数里面。&lt;br&gt;await 表示在这里等待promise返回结果了，再继续执行。&lt;br&gt;await 后面跟着的应该是一个promise对象&lt;/p&gt;
&lt;p&gt;awa
      
    
    </summary>
    
    
    
      <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>浅析虚拟DOM</title>
    <link href="https://wine1.github.io/2020/07/15/%E6%B5%85%E6%9E%90%E8%99%9A%E6%8B%9FDOM/"/>
    <id>https://wine1.github.io/2020/07/15/%E6%B5%85%E6%9E%90%E8%99%9A%E6%8B%9FDOM/</id>
    <published>2020-07-14T16:26:01.000Z</published>
    <updated>2020-07-15T13:36:14.211Z</updated>
    
    <content type="html"><![CDATA[<p>虚拟DOM的基本思想</p><ol><li>用js对象模拟DOM树</li><li>比较两颗虚拟DOM树的差异</li><li>把差异应用到真正的DOM树上</li></ol><a id="more"></a><p>看了下，只能说懂了一点点 不甚明白<br><a href="https://www.zhihu.com/question/29504639" target="_blank" rel="noopener">https://www.zhihu.com/question/29504639</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虚拟DOM的基本思想&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用js对象模拟DOM树&lt;/li&gt;
&lt;li&gt;比较两颗虚拟DOM树的差异&lt;/li&gt;
&lt;li&gt;把差异应用到真正的DOM树上&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>重排和重绘</title>
    <link href="https://wine1.github.io/2020/07/14/%E9%87%8D%E6%8E%92%E5%92%8C%E9%87%8D%E7%BB%98/"/>
    <id>https://wine1.github.io/2020/07/14/%E9%87%8D%E6%8E%92%E5%92%8C%E9%87%8D%E7%BB%98/</id>
    <published>2020-07-14T15:34:39.000Z</published>
    <updated>2020-07-14T16:03:36.606Z</updated>
    
    <content type="html"><![CDATA[<p>今天一个bug引发了我对重排和重绘的好奇<br>对这个知识点做个系统的了解和总结</p><a id="more"></a><p>DOM的变化引发了原生的几何属性的变化，比如宽高和位置的变化等，属于重排<br>完成重排后，要将重新构建的其他样式（如颜色）渲染到屏幕上，这个过程就是重绘<br>重排必然会引发重绘，但重绘并不一定伴随着重排</p><p>重排的触发条件：</p><ol><li>添加或者删除可以的DOM元素</li><li>元素位置改变</li><li>元素本身的尺寸变化</li><li>内容改变</li><li>页面渲染器初始化</li><li>浏览器窗口大小发生改变</li></ol><p>重绘和重排的开销是非常昂贵的，如果我们不停的在改变页面的布局，就会造成浏览器耗费大量的开销在进行页面的计算，这样的话，我们页面在用户使用起来，就会出现明显的卡顿。<br>现在的浏览器其实已经对重排进行了优化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var div = document.querySelector(&apos;.div&apos;);</span><br><span class="line">div.style.width = &apos;200px&apos;;</span><br><span class="line">div.style.background = &apos;red&apos;;</span><br><span class="line">div.style.height = &apos;300px&apos;;</span><br></pre></td></tr></table></figure><p>比较久远的浏览器，这段代码会触发页面2次重排，在分别设置宽高的时候，触发2次.<br>当代的浏览器对此进行了优化，这种思路类似于现在流行的MVVM框架使用的虚拟DOM，对改变的DOM节点进行依赖收集，确认没有改变的节点，就进行一次更新。但是浏览器针对重排的优化虽然思路和虚拟DOM接近，但是还是有本质的区别。大多数浏览器通过队列化修改并批量执行来优化重排过程。也就是说上面那段代码其实在现在的浏览器优化下，只构成一次重排。</p><p>除此之外，我们也可以针对性的做一些优化</p><ol><li>最小化重排和重绘（把会引起重排和重绘的操作一起操作，尽量只重绘或重排一次）</li><li>缓存布局信息 缓存布局信息这个概念，在《高性能JavaScript》DOM性能优化中，多次提到类似的思想.<ul><li>比如我现在要得到页面ul节点下面的100个li节点，最好的办法就是第一次获取后就保存起来，减少</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天一个bug引发了我对重排和重绘的好奇&lt;br&gt;对这个知识点做个系统的了解和总结&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>node+koa</title>
    <link href="https://wine1.github.io/2020/06/23/node-koa/"/>
    <id>https://wine1.github.io/2020/06/23/node-koa/</id>
    <published>2020-06-23T13:43:57.000Z</published>
    <updated>2020-06-27T03:33:17.625Z</updated>
    
    <content type="html"><![CDATA[<ol><li>koa+node基础搭建到实现api接口 <a href="https://www.jianshu.com/p/3b60dda108d4" target="_blank" rel="noopener">https://www.jianshu.com/p/3b60dda108d4</a></li><li>使用pm2管理node进程</li><li>使用knex操作数据库</li><li></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;koa+node基础搭建到实现api接口 &lt;a href=&quot;https://www.jianshu.com/p/3b60dda108d4&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.jianshu.com/p/3b60
      
    
    </summary>
    
    
    
      <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>小程序+腾讯云实时音视频</title>
    <link href="https://wine1.github.io/2020/06/23/%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%85%BE%E8%AE%AF%E4%BA%91%E5%AE%9E%E6%97%B6%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    <id>https://wine1.github.io/2020/06/23/%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%85%BE%E8%AE%AF%E4%BA%91%E5%AE%9E%E6%97%B6%E9%9F%B3%E8%A7%86%E9%A2%91/</id>
    <published>2020-06-23T13:38:16.000Z</published>
    <updated>2020-06-23T13:44:53.448Z</updated>
    
    <content type="html"><![CDATA[<h2 id="小程序加腾讯云实时音视频"><a href="#小程序加腾讯云实时音视频" class="headerlink" title="小程序加腾讯云实时音视频"></a>小程序加腾讯云实时音视频</h2><a id="more"></a><ol><li>腾讯实时音视频官方demo，IOS微信小程序端不显示本地和远程画面？<br> 在 app.json 下 window 下配置一下 “renderingMode”: “seperated”强制关掉同层</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;小程序加腾讯云实时音视频&quot;&gt;&lt;a href=&quot;#小程序加腾讯云实时音视频&quot; class=&quot;headerlink&quot; title=&quot;小程序加腾讯云实时音视频&quot;&gt;&lt;/a&gt;小程序加腾讯云实时音视频&lt;/h2&gt;
    
    </summary>
    
    
    
      <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>js遍历</title>
    <link href="https://wine1.github.io/2020/06/12/js%E9%81%8D%E5%8E%86/"/>
    <id>https://wine1.github.io/2020/06/12/js%E9%81%8D%E5%8E%86/</id>
    <published>2020-06-12T14:40:45.000Z</published>
    <updated>2020-06-12T14:42:05.969Z</updated>
    
    <content type="html"><![CDATA[<p>foreach和map的区别</p><ol><li><code>foreach</code><br>foreach没有返回值</li></ol><ol start="2"><li><code>map</code><br>映射 跟foreach用法类似 返回一个新数组</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;foreach和map的区别&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;foreach&lt;/code&gt;&lt;br&gt;foreach没有返回值&lt;/li&gt;
&lt;/ol&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;code&gt;map&lt;/code&gt;&lt;br&gt;映射 跟foreach用法类似 返回一个新数
      
    
    </summary>
    
    
    
      <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>touch-action</title>
    <link href="https://wine1.github.io/2020/06/12/touch-action/"/>
    <id>https://wine1.github.io/2020/06/12/touch-action/</id>
    <published>2020-06-12T14:40:01.000Z</published>
    <updated>2020-06-12T14:40:22.363Z</updated>
    
    <content type="html"><![CDATA[<h2 id="touch-action"><a href="#touch-action" class="headerlink" title="touch-action"></a>touch-action</h2><p>用于设置触摸屏用户如何操纵元素的区域</p><a id="more"></a><p>可选的属性值</p><ul><li>auto 当触控事件发生在元素上时，由浏览器来决定进行哪些操作，比如对viewport进行平滑、缩放等。</li><li>none 当触控事件发生在元素上时，不进行任何操作。</li><li>pan-x 启用单指水平平移手势。可以与 pan-y 、pan-up、pan-down 和／或 pinch-zoom 组合使用。</li><li>pan-y 启用单指垂直平移手势。可以与 pan-x 、pan-left 、pan-right 和／或 pinch-zoom 组合使用。</li><li>manipulation 浏览器只允许进行滚动和持续缩放操作。任何其它被auto值支持的行为不被支持。启用平移和缩小缩放手势，但禁用其他非标准手势，例如双击以进行缩放。 禁用双击可缩放功能可减少浏览器在用户点击屏幕时延迟生成点击事件的需要。 这是“pan-x pan-y pinch-zoom”（为了兼容性本身仍然有效）的别名。</li><li>pan-left, pan-right,pan-up,pan-down 启用以指定方向滚动开始的单指手势。 一旦滚动开始，方向可能仍然相反。 请注意，滚动“向上”（pan-up）意味着用户正在将其手指向下拖动到屏幕表面上，同样 pan-left 表示用户将其手指向右拖动。 多个方向可以组合，除非有更简单的表示（例如，“pan-left pan-right”无效，因为“pan-x”更简单，而“pan-left pan-down”有效）。</li><li>pinch-zoom 启用多手指平移和缩放页面。 这可以与任何平移值组合。</li></ul><p>应用场景：<br>将touch-action改为manipulation可以减少移动端浏览器在用户点击事件的延迟</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;touch-action&quot;&gt;&lt;a href=&quot;#touch-action&quot; class=&quot;headerlink&quot; title=&quot;touch-action&quot;&gt;&lt;/a&gt;touch-action&lt;/h2&gt;&lt;p&gt;用于设置触摸屏用户如何操纵元素的区域&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
