<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>哦。</title>
  
  <subtitle>知行合一</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wine1.github.io/"/>
  <updated>2021-03-03T14:28:36.000Z</updated>
  <id>https://wine1.github.io/</id>
  
  <author>
    <name>田京京呀~</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>跨域</title>
    <link href="https://wine1.github.io/2021/03/03/%E8%B7%A8%E5%9F%9F/"/>
    <id>https://wine1.github.io/2021/03/03/%E8%B7%A8%E5%9F%9F/</id>
    <published>2021-03-03T14:26:23.000Z</published>
    <updated>2021-03-03T14:28:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>谷歌浏览器中Response中set-cookie无效<br><a href="https://blog.csdn.net/Ych_cxy/article/details/107673208" target="_blank" rel="noopener">https://blog.csdn.net/Ych_cxy/article/details/107673208</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;谷歌浏览器中Response中set-cookie无效&lt;br&gt;&lt;a href=&quot;https://blog.csdn.net/Ych_cxy/article/details/107673208&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://b
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>js的宏任务和微任务</title>
    <link href="https://wine1.github.io/2020/09/23/js%E7%9A%84%E5%AE%8F%E4%BB%BB%E5%8A%A1%E5%92%8C%E5%BE%AE%E4%BB%BB%E5%8A%A1/"/>
    <id>https://wine1.github.io/2020/09/23/js%E7%9A%84%E5%AE%8F%E4%BB%BB%E5%8A%A1%E5%92%8C%E5%BE%AE%E4%BB%BB%E5%8A%A1/</id>
    <published>2020-09-23T14:45:29.000Z</published>
    <updated>2020-09-23T14:56:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>.宏任务（macrotask ）和微任务（microtask ）</p><p>macrotask 和 microtask 表示异步任务的两种分类。</p><p>在挂起任务时，JS 引擎会将所有任务按照类别分到这两个队列中，首先在 macrotask 的队列（这个队列也被叫做 task queue）中取出第一个任务，执行完毕后取出 microtask 队列中的所有任务顺序执行；之后再取 macrotask 任务，周而复始，直至两个队列的任务都取完。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">    //执行后 回调一个宏事件</span><br><span class="line">    console.log(&apos;内层宏事件3&apos;)</span><br><span class="line">&#125;, 0)</span><br><span class="line">console.log(&apos;外层宏事件1&apos;);</span><br><span class="line"></span><br><span class="line">new Promise((resolve) =&gt; &#123;</span><br><span class="line">    console.log(&apos;外层宏事件2&apos;);</span><br><span class="line">    resolve()</span><br><span class="line">&#125;).then(() =&gt; &#123;</span><br><span class="line">    console.log(&apos;微事件1&apos;);</span><br><span class="line">&#125;).then(()=&gt;&#123;</span><br><span class="line">    console.log(&apos;微事件2&apos;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>打印结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">外层宏事件1</span><br><span class="line">外层宏事件2</span><br><span class="line">微事件1</span><br><span class="line">微事件2</span><br><span class="line">内层宏事件3</span><br></pre></td></tr></table></figure><p>宏任务 setTimeOut setInterval<br>微任务 nextTick promise<br>先执行微任务 再执行宏任务</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;.宏任务（macrotask ）和微任务（microtask ）&lt;/p&gt;
&lt;p&gt;macrotask 和 microtask 表示异步任务的两种分类。&lt;/p&gt;
&lt;p&gt;在挂起任务时，JS 引擎会将所有任务按照类别分到这两个队列中，首先在 macrotask 的队列（这个队列也被叫做 task queue）中取出第一个任务，执行完毕后取出 microtask 队列中的所有任务顺序执行；之后再取 macrotask 任务，周而复始，直至两个队列的任务都取完。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>封装一个组件</title>
    <link href="https://wine1.github.io/2020/09/13/%E5%B0%81%E8%A3%85%E4%B8%80%E4%B8%AA%E7%BB%84%E4%BB%B6/"/>
    <id>https://wine1.github.io/2020/09/13/%E5%B0%81%E8%A3%85%E4%B8%80%E4%B8%AA%E7%BB%84%E4%BB%B6/</id>
    <published>2020-09-13T11:42:52.000Z</published>
    <updated>2021-01-16T14:43:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>自己封装一个组件</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;</span><br><span class="line">    &lt;title&gt;diago&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;./diago.css&quot; /&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;button id=&quot;showDiago&quot;&gt;点击打开弹窗&lt;/button&gt;</span><br><span class="line">    &lt;script src=&quot;./diago.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      document.getElementById(&quot;showDiago&quot;).addEventListener(&apos;click&apos;, function(e) &#123;</span><br><span class="line">        dialog.show(&#123;</span><br><span class="line">          title: &quot;biaoti&quot;,</span><br><span class="line">          content: &quot;抱歉，该游戏暂无Android版本&quot;,</span><br><span class="line">          cancel: function() &#123;</span><br><span class="line">            console.log(111);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">var dialog = (function() &#123;</span><br><span class="line">  var elem, dialog, cancelBtn, confirmBtn;</span><br><span class="line">  /**</span><br><span class="line">   * @method getNeedElement 获取所需要的节点</span><br><span class="line">   */</span><br><span class="line">  var getNeedElement = function() &#123;</span><br><span class="line">    elem = document.querySelector(&quot;.dialog-wrapper&quot;);</span><br><span class="line">    dialog = document.querySelector(&quot;.dialog&quot;);</span><br><span class="line">    cancelBtn = document.querySelector(&quot;.cancel-btn&quot;);</span><br><span class="line">    confirmBtn = document.querySelector(&quot;.confirm-btn&quot;);</span><br><span class="line">  &#125;;</span><br><span class="line">  /**</span><br><span class="line">   * @method show 打开dialog组件</span><br><span class="line">   */</span><br><span class="line">  var show = function(options = &#123;&#125;) &#123;</span><br><span class="line">    let &#123;</span><br><span class="line">      title = &quot;&quot;,</span><br><span class="line">      content = &quot;默认content&quot;,</span><br><span class="line">      btns = [&quot;确定&quot;, &quot;取消&quot;],</span><br><span class="line">      confirm = null,</span><br><span class="line">      cancel = null</span><br><span class="line">    &#125; = options;</span><br><span class="line">    let btnTemp = &quot;&quot;;</span><br><span class="line">    btns.forEach((item, index) =&gt; &#123;</span><br><span class="line">      if (index == 2) return;</span><br><span class="line">      let btnClass = index == 0 ? &quot;confirm-btn&quot; : &quot;cancel-btn&quot;;</span><br><span class="line">      let temp = `&lt;div class=&quot;btn $&#123;btnClass&#125;&quot;&gt;$&#123;item&#125;&lt;/div&gt;`;</span><br><span class="line">      btnTemp += temp;</span><br><span class="line">    &#125;);</span><br><span class="line">    let html = `&lt;div class=&quot;dialog-wrapper&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;dialog&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;title&quot;&gt;$&#123;title&#125;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;content&quot;&gt;$&#123;content&#125;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;buttons&quot;&gt;$&#123;btnTemp&#125;&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;`; // 添加到Body</span><br><span class="line">    document.body.innerHTML += html;</span><br><span class="line">    getNeedElement();</span><br><span class="line">    bindEvent(confirm, cancel);</span><br><span class="line">    return elem;</span><br><span class="line">  &#125;;</span><br><span class="line">  /**</span><br><span class="line">   * @method hide 关闭dialog组件</span><br><span class="line">   */</span><br><span class="line">  var hide = function() &#123;</span><br><span class="line">    elem.remove(elem);</span><br><span class="line">    // elem.parentNode.removeChild(elem);</span><br><span class="line">  &#125;;</span><br><span class="line">  /**</span><br><span class="line">   * @method bindEvent 给dialog绑定事件</span><br><span class="line">   * @param &#123;Object&#125; confirm 确认回调</span><br><span class="line">   * @param &#123;Object&#125; cancel 取消回调</span><br><span class="line">   */</span><br><span class="line">  var bindEvent = function(confirm, cancel) &#123;</span><br><span class="line">    confirmBtn &amp;&amp;</span><br><span class="line">      confirmBtn.addEventListener(&quot;click&quot;, e =&gt; &#123;</span><br><span class="line">        hide();</span><br><span class="line">        confirm &amp;&amp; confirm();</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">    cancelBtn &amp;&amp;</span><br><span class="line">      cancelBtn.addEventListener(&quot;click&quot;, e =&gt; &#123;</span><br><span class="line">        hide();</span><br><span class="line">        cancel &amp;&amp; cancel();</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  return &#123; show, hide &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">body,html &#123;  font-family: -apple-system, BlinkMacSystemFont, &apos;Segoe UI&apos;, Roboto, Oxygen, Ubuntu, Cantarell, &apos;Open Sans&apos;, &apos;Helvetica Neue&apos;, sans-serif;</span><br><span class="line">&#125;.dialog-wrapper &#123;  position: fixed;  display: flex;  justify-content: center;  align-items: center;  top: 0;  left: 0;  width: 100vw;  height: 100vh;  background-color: rgba(49, 49, 49, 0.5);  color: #313131;  font-size: 10px;  -webkit-tap-highlight-color: transparent;</span><br><span class="line">&#125;.dialog-wrapper.fadeIn &#123;  animation: fadeIn .2s ease;</span><br><span class="line">&#125;.dialog-wrapper.fadeOut &#123;  animation: fadeOut .2s ease forwards;</span><br><span class="line">&#125;.dialog-wrapper .dialog &#123;  position: relative;  width: 85vw;  max-width: 30em;  border-radius: .4em;  background-color: #fff;  box-sizing: border-box;  overflow: hidden;  box-shadow: 0 0 10px 1px rgba(0, 0, 0, 0.1);</span><br><span class="line">&#125;.dialog-wrapper .dialog.slideDown &#123;  animation: slideDown .2s ease;</span><br><span class="line">&#125;.dialog-wrapper .dialog.slideUp &#123;  animation: slideUp .2s ease forwards;</span><br><span class="line">&#125;.dialog-wrapper .dialog.scaleIn &#123;  animation: scaleIn 0.2s cubic-bezier(0.07, 0.89, 0.95, 1.4);</span><br><span class="line">&#125;.dialog-wrapper .dialog.scaleOut &#123;  animation: scaleOut 0.2s cubic-bezier(0.07, 0.89, 0.95, 1.4) forwards;</span><br><span class="line">&#125;.dialog-wrapper .dialog .btn &#123;  cursor: pointer;</span><br><span class="line">&#125;.dialog-wrapper .dialog .btn:active &#123;  background-color: #f4f4f4;</span><br><span class="line">&#125;.dialog-wrapper .dialog .close-btn &#123;  position: absolute;  top: 0;  right: 0;  padding: 10px;  font-size: 1.8em;</span><br><span class="line">&#125;.dialog-wrapper .dialog .title &#123;  font-size: 1.8em;  padding: 15px;  text-align: center;  background-color: #f4f4f4;</span><br><span class="line">&#125;.dialog-wrapper .dialog .title:empty &#123;  display: none;</span><br><span class="line">&#125;.dialog-wrapper .dialog .content &#123;  padding: 40px 20px;  font-size: 1.6em;  text-align: center;</span><br><span class="line">&#125;.dialog-wrapper .dialog .buttons &#123;  font-size: 1.6em;  display: flex;  flex-flow: row-reverse;</span><br><span class="line">&#125;.dialog-wrapper .dialog .buttons .btn &#123;  flex: 1;  padding: 15px;  text-align: center;  border-top: 1px solid #ebebeb;</span><br><span class="line">&#125;.dialog-wrapper .dialog .buttons .btn.confirm-btn &#123;  color: #f2d985;</span><br><span class="line">&#125;.dialog-wrapper .dialog .buttons .btn.cancel-btn &#123;  color: #313131;  border-right: 1px solid #ebebeb;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@keyframes slideDown &#123;  from &#123;    transform: translateY(-3em);</span><br><span class="line">  &#125;  to &#123;    transform: translateY(0);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@keyframes slideUp &#123;  from &#123;    transform: translateY(0);</span><br><span class="line">  &#125;  to &#123;    transform: translateY(-3em);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@keyframes fadeIn &#123;  from &#123;    opacity: .5;</span><br><span class="line">  &#125;  to &#123;    opacity: 1;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@keyframes fadeOut &#123;  from &#123;    opacity: 1;</span><br><span class="line">  &#125;  to &#123;    opacity: 0;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@keyframes scaleIn &#123;  from &#123;    transform: scale(0.8);</span><br><span class="line">  &#125;  to &#123;    transform: scale(1);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@keyframes scaleOut &#123;  from &#123;    transform: scale(1);</span><br><span class="line">  &#125;  to &#123;    transform: scale(0.8);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自己封装一个组件&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>js中的防抖和节流</title>
    <link href="https://wine1.github.io/2020/08/25/js%E4%B8%AD%E7%9A%84%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/"/>
    <id>https://wine1.github.io/2020/08/25/js%E4%B8%AD%E7%9A%84%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</id>
    <published>2020-08-25T15:16:15.000Z</published>
    <updated>2020-11-28T14:06:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>防抖和节流的原理和代码</p><a id="more"></a><p>debounce，去抖动。策略是当事件被触发时，设定一个周期延迟执行动作，若期间又被触发，则重新设定周期，直到周期结束，执行动作。 这是debounce的基本思想，在后期又扩展了前缘debounce，即执行动作在前，然后设定周期，周期内有事件被触发，不执行动作，且周期重新设定。</p><p>throttling，节流的策略是，固定周期内，只执行一次动作，若有新事件触发，不执行。周期结束后，又有事件触发，开始新的周期。 节流策略也分前缘和延迟两种。与debounce类似，延迟是指 周期结束后执行动作，前缘是指执行动作后再开始周期。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">/**防抖 一段时间内重复触发则清除定时器重新开始计时 */</span><br><span class="line">const debounce = function (fn, delay) &#123;</span><br><span class="line">    let timer = null</span><br><span class="line">    if (!delay) &#123;</span><br><span class="line">        delay = 1000</span><br><span class="line">    &#125;</span><br><span class="line">    return function (fn, delay) &#123;</span><br><span class="line">        clearTimeout(timer)</span><br><span class="line">        timer = setTimeout(fn, delay)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**节流 第一次点击执行后一段时间内再次触发不执行 直到计时结束才可以再次被触发 */</span><br><span class="line">const throttling = function (fn, delay) &#123;</span><br><span class="line">    var timer = null;</span><br><span class="line">    if (!delay) &#123;</span><br><span class="line">        delay = 1000</span><br><span class="line">    &#125;</span><br><span class="line">    return function () &#123;</span><br><span class="line">        var context = this;</span><br><span class="line">        var args = arguments;</span><br><span class="line">        if (!timer) &#123;</span><br><span class="line">            timer = setTimeout(function () &#123;</span><br><span class="line">                fn.apply(context, args);</span><br><span class="line">                timer = null;</span><br><span class="line">            &#125;, delay);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;防抖和节流的原理和代码&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>leetcode之数组</title>
    <link href="https://wine1.github.io/2020/08/12/leetcode%E4%B9%8B%E6%95%B0%E7%BB%84/"/>
    <id>https://wine1.github.io/2020/08/12/leetcode%E4%B9%8B%E6%95%B0%E7%BB%84/</id>
    <published>2020-08-12T15:36:36.000Z</published>
    <updated>2020-11-23T14:52:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="leetcode——数组类知识点及题型总结"><a href="#leetcode——数组类知识点及题型总结" class="headerlink" title="leetcode——数组类知识点及题型总结"></a>leetcode——数组类知识点及题型总结</h2><p>很多题都能靠暴力解法 但是通常都会有时间复杂度或者空间复杂度超出限制的情况，因此都不予讨论</p><a id="more"></a><ol><li><p>k-sum类 如 第一题 twosum 计算数组中的哪些值得和能等于给定的target 有时候题目中会带有是否能重复使用一个值的限制</p><ul><li>hash 遍历数组 将每一个值存入hash表中 并检测hash表中是否有 target-nums[i] 的结果 如果有 则结果就是 i 和对应的hash表中的值 时间复杂度O(n)</li><li>two-points </li></ul></li><li><p>区间类</p></li></ol><ol start="3"><li>子数组类</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;leetcode——数组类知识点及题型总结&quot;&gt;&lt;a href=&quot;#leetcode——数组类知识点及题型总结&quot; class=&quot;headerlink&quot; title=&quot;leetcode——数组类知识点及题型总结&quot;&gt;&lt;/a&gt;leetcode——数组类知识点及题型总结&lt;/h2&gt;&lt;p&gt;很多题都能靠暴力解法 但是通常都会有时间复杂度或者空间复杂度超出限制的情况，因此都不予讨论&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>小程序同层渲染</title>
    <link href="https://wine1.github.io/2020/08/12/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%90%8C%E5%B1%82%E6%B8%B2%E6%9F%93/"/>
    <id>https://wine1.github.io/2020/08/12/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%90%8C%E5%B1%82%E6%B8%B2%E6%9F%93/</id>
    <published>2020-08-12T15:33:13.000Z</published>
    <updated>2020-08-12T15:33:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="同层渲染"><a href="#同层渲染" class="headerlink" title="同层渲染"></a>同层渲染</h2><p>小程序的内容大多是渲染在 WebView 上的，如果把 WebView 看成单独的一层，那么由系统自带的这些原生组件则位于另一个更高的层级（如 canvas、video）。两个层级是完全独立的，因此无法简单地通过使用 z-index 控制原生组件和非原生组件之间的相对层级。想要在原生组件之上只能用 cover-view 和 cover-image 来实现。但 cover-view 和 cover-image 支持的 css 样式是在很有限，而且经过实践来看，cover-view 在安卓部分机器上性能真的很差。<br><a href="https://developers.weixin.qq.com/community/develop/doc/000aa28d030f60a3c4183eecb5d801" target="_blank" rel="noopener">官方社区说明</a></p><p>然并卵 没有用</p><p>实时音视频小程序开发ios手机无法正常在小程序里视频，安卓手机就可以<br>解决方案： 在 app.json 下 window 下配置一下 “renderingMode”: “seperated”强制关掉同层<br>关掉同层渲染 “renderingMode”: “seperated”,</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;同层渲染&quot;&gt;&lt;a href=&quot;#同层渲染&quot; class=&quot;headerlink&quot; title=&quot;同层渲染&quot;&gt;&lt;/a&gt;同层渲染&lt;/h2&gt;&lt;p&gt;小程序的内容大多是渲染在 WebView 上的，如果把 WebView 看成单独的一层，那么由系统自带的这些原生组件则位于另
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>grid布局</title>
    <link href="https://wine1.github.io/2020/08/12/grid%E5%B8%83%E5%B1%80/"/>
    <id>https://wine1.github.io/2020/08/12/grid%E5%B8%83%E5%B1%80/</id>
    <published>2020-08-12T15:31:12.000Z</published>
    <updated>2020-08-12T15:33:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="grid布局"><a href="#grid布局" class="headerlink" title="grid布局"></a>grid布局</h2><p>gap属性能解决flex多行布局中最后一行布局不满时位置偏移的问题</p><p><a href="http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html" target="_blank" rel="noopener">阮一峰的grid布局教程</a><br>网格布局 将网页划分成一个个网格，可以任意组合不同的网格，做出各种各样的布局。<br>具体么 目前还没有使用过 最近没有用上 没找到合适的应用场景</p><a id="more"></a><p>跟flex布局有一定的相似性</p><p>display 属性<br>display: grid指定一个容器采用网格布局。</p><p>grid-template-columns 属性，<br>grid-template-rows 属性<br>容器指定了网格布局以后，接着就要划分行和列。grid-template-columns属性定义每一列的列宽，grid-template-rows属性定义每一行的行高。</p><p>repeat()<br>有时候，重复写同样的值非常麻烦，尤其网格很多时。这时，可以使用repeat()函数，简化重复的值。<br>repeat()接受两个参数，第一个参数是重复的次数（上例是3），第二个参数是所要重复的值。</p><p>auto-fill 关键字<br>有时，单元格的大小是固定的，但是容器的大小不确定。如果希望每一行（或每一列）容纳尽可能多的单元格，这时可以使用auto-fill关键字表示自动填充。</p><p>fr 关键字<br>为了方便表示比例关系，网格布局提供了fr关键字（fraction 的缩写，意为”片段”）。如果两列的宽度分别为1fr和2fr，就表示后者是前者的两倍。<br>minmax()<br>minmax()函数产生一个长度范围，表示长度就在这个范围之中。它接受两个参数，分别为最小值和最大值。</p><p>auto 关键字<br>auto关键字表示由浏览器自己决定长度。</p><p>网格线的名称<br>grid-template-columns属性和grid-template-rows属性里面，还可以使用方括号，指定每一根网格线的名字，方便以后的引用。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;grid布局&quot;&gt;&lt;a href=&quot;#grid布局&quot; class=&quot;headerlink&quot; title=&quot;grid布局&quot;&gt;&lt;/a&gt;grid布局&lt;/h2&gt;&lt;p&gt;gap属性能解决flex多行布局中最后一行布局不满时位置偏移的问题&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;阮一峰的grid布局教程&lt;/a&gt;&lt;br&gt;网格布局 将网页划分成一个个网格，可以任意组合不同的网格，做出各种各样的布局。&lt;br&gt;具体么 目前还没有使用过 最近没有用上 没找到合适的应用场景&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="https://wine1.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>解决小程序列表更新卡顿方案</title>
    <link href="https://wine1.github.io/2020/08/09/%E8%A7%A3%E5%86%B3%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%88%97%E8%A1%A8%E6%9B%B4%E6%96%B0%E5%8D%A1%E9%A1%BF%E6%96%B9%E6%A1%88/"/>
    <id>https://wine1.github.io/2020/08/09/%E8%A7%A3%E5%86%B3%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%88%97%E8%A1%A8%E6%9B%B4%E6%96%B0%E5%8D%A1%E9%A1%BF%E6%96%B9%E6%A1%88/</id>
    <published>2020-08-09T13:34:55.000Z</published>
    <updated>2021-04-12T11:46:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="解决小程序列表更新卡顿方案"><a href="#解决小程序列表更新卡顿方案" class="headerlink" title="解决小程序列表更新卡顿方案"></a>解决小程序列表更新卡顿方案</h2><p>什么情况会引发小程序的渲染性能问题</p><ol><li>setData传递大量的新数据</li><li>频繁的执行setData操作</li><li>过多的页面节点数</li></ol><a id="more"></a><p>解决方案（分别针对上述情况）</p><ol><li>data对象中只传输视图层要用的数据 合理利用局部更新</li><li>在不影响业务流程的前提下，将多个 setData 调用合并执行，减少线程间通信频次。<br>当需要在频繁触发的用户事件（如 PageScroll 、 Resize 事件）中调用 setData ，合理的利用 函数防抖（debounce） 和 函数节流（throttle） 可以减少 setData 执行次数。<br>函数防抖（debounce）：函数在触发n秒后才执行一次，如果在n秒内重复触发函数，则重新计算时间。<br>函数节流（throttle）：单位时间内，只会触发一次函数，如果同一个单位时间内触发多次函数，只会有一次生效。</li></ol><p>除了让开发者自觉遵循规则来减少 setData 数据传输量和执行频率之外，我们还可以自己设计一个 diff 算法，重新对 setData 进行封装，使得在 setData 执行之前，让待更新的数据与原 data 数据做 diff 对比，计算出数据差异 patch 对象，判断 patch 对象是否为空，如果为空则跳过执行更新，否则再将 patch 对象执行 setData 操作，从而达到减少数据传输量和降低执行 setData 频率的目的。</p><p>网友方案 转摘自 <a href="https://segmentfault.com/a/1190000019910111" target="_blank" rel="noopener">https://segmentfault.com/a/1190000019910111</a></p><p>小程序看起来很简单易上手 但是有很多奇奇怪怪的坑和一系列的性能优化问题 还需要深入研究才能更好的实现需求提升用户体验</p><h2 id="diff算法实现思路"><a href="#diff算法实现思路" class="headerlink" title="diff算法实现思路"></a>diff算法实现思路</h2><p>策略：在数据更新之前先对更新前后数据做diff对比，找出差异部分patch，如果patch为空，结束更新，否则只对patch部分做更新。</p><p>设计思路：</p><ul><li>diff前先将数据路径写法数据转换成格式化JSON</li><li>使用深度优先遍历策略</li><li>只对同层节点进行对比</li><li>使用数据路径方式实现局部更新</li><li>减少不必要的diff对比<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">const OBJECT_TYPE = &apos;[object Object]&apos;;</span><br><span class="line">const ARRAY_TYPE = &apos;[object Array]&apos;;</span><br><span class="line">const getType = (obj) =&gt; Object.prototype.toString.call(obj);</span><br><span class="line">const initPath = (data) =&gt; &#123;</span><br><span class="line">    if (getType(data) !== OBJECT_TYPE) return;</span><br><span class="line">    for (let item in data) &#123;</span><br><span class="line">        if (/\w+\.\w+/g.test(item) &amp;&amp; item.indexOf(&apos;[&apos;) === -1) &#123;</span><br><span class="line">            const arr = item.split(&apos;.&apos;);</span><br><span class="line">            let result = data, len = arr.length;</span><br><span class="line">            for (let i = 0; i &lt; len - 1; i++) &#123;</span><br><span class="line">                const arrItem = arr[i];</span><br><span class="line">                if (getType(result[arrItem]) !== OBJECT_TYPE) &#123;</span><br><span class="line">                    result[arrItem] = &#123;&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">                result = result[arrItem];</span><br><span class="line">            &#125;</span><br><span class="line">            result[arr[len - 1]] = data[item];</span><br><span class="line">            delete data[item];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">const initData = (cur, pre, root = false) =&gt; &#123;</span><br><span class="line">    if (cur === pre) return;</span><br><span class="line">    const curType = getType(cur), preType = getType(pre);</span><br><span class="line">    if (curType !== preType) return;</span><br><span class="line">    if (curType === ARRAY_TYPE &amp;&amp; cur.length &gt;= pre.length) &#123;</span><br><span class="line">        for (let i = 0; i &lt; pre.length; i++) &#123;</span><br><span class="line">            initData(cur[i], pre[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else if (curType === OBJECT_TYPE &amp;&amp; Object.keys(cur).length &gt;= Object.keys(pre).length) &#123;</span><br><span class="line">        for (let key in pre) &#123;</span><br><span class="line">            if (!root &amp;&amp; cur[key] === undefined) &#123; </span><br><span class="line">                cur[key] = null; </span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                initData(cur[key], pre[key]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">const doDiff = (cur, pre, target, path = &apos;&apos;, root = false) =&gt; &#123;</span><br><span class="line">    if (cur === pre) return;</span><br><span class="line">    const curRootType = getType(cur), preRootType = getType(pre);</span><br><span class="line">    if (curRootType === ARRAY_TYPE &amp;&amp; preRootType === curRootType &amp;&amp; cur.length &gt;= pre.length) &#123;</span><br><span class="line">        for (let i = 0; i &lt; cur.length; i++) &#123;</span><br><span class="line">            doDiff(cur[i], pre[i], target, `$&#123;path&#125;[$&#123;i&#125;]`); </span><br><span class="line">        &#125;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    if (curRootType === OBJECT_TYPE &amp;&amp; preRootType === curRootType &amp;&amp; (root || Object.keys(cur).length &gt;= Object.keys(pre).length)) &#123;</span><br><span class="line">        const keys = Object.keys(cur);</span><br><span class="line">        for (let key of keys) &#123;</span><br><span class="line">            const curVal = cur[key], preVal = pre[key];</span><br><span class="line">            const curType = getType(curVal), preType = getType(preVal);</span><br><span class="line">            if (curVal === preVal) continue;</span><br><span class="line">            if (curType === ARRAY_TYPE &amp;&amp; preType === curType &amp;&amp; curVal.length &gt;= preVal.length) &#123;</span><br><span class="line">                for (let i = 0; i &lt; curVal.length; i++) &#123;</span><br><span class="line">                    doDiff(curVal[i], preVal[i], target, `$&#123;path ? path + &apos;.&apos; : &apos;&apos;&#125;$&#123;key&#125;[$&#123;i&#125;]`);</span><br><span class="line">                &#125;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            if (curType === OBJECT_TYPE &amp;&amp; preType === curType &amp;&amp; Object.keys(curVal).length &gt;= Object.keys(preVal).length) &#123;</span><br><span class="line">                for (let sKey in curVal) &#123;</span><br><span class="line">                    doDiff(curVal[sKey], preVal[sKey], target, `$&#123;path ? path + &apos;.&apos; : &apos;&apos;&#125;$&#123;key&#125;.$&#123;sKey&#125;`);</span><br><span class="line">                &#125;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            target[`$&#123;path ? path + &apos;.&apos; : &apos;&apos;&#125;$&#123;key&#125;`] = curVal;</span><br><span class="line">        &#125;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    target[path] = cur;</span><br><span class="line">&#125;;</span><br><span class="line">export default function diff(data, prevData) &#123;</span><br><span class="line">    const target = &#123;&#125;;</span><br><span class="line">    initPath(data);</span><br><span class="line">    initData(data, prevData, true);</span><br><span class="line">    doDiff(data, prevData, target, &apos;&apos;, true);</span><br><span class="line">    return target;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;解决小程序列表更新卡顿方案&quot;&gt;&lt;a href=&quot;#解决小程序列表更新卡顿方案&quot; class=&quot;headerlink&quot; title=&quot;解决小程序列表更新卡顿方案&quot;&gt;&lt;/a&gt;解决小程序列表更新卡顿方案&lt;/h2&gt;&lt;p&gt;什么情况会引发小程序的渲染性能问题&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;setData传递大量的新数据&lt;/li&gt;
&lt;li&gt;频繁的执行setData操作&lt;/li&gt;
&lt;li&gt;过多的页面节点数&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="小程序" scheme="https://wine1.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>匹配js中的enter换行操作</title>
    <link href="https://wine1.github.io/2020/07/23/%E5%8C%B9%E9%85%8Djs%E4%B8%AD%E7%9A%84enter%E6%8D%A2%E8%A1%8C%E6%93%8D%E4%BD%9C/"/>
    <id>https://wine1.github.io/2020/07/23/%E5%8C%B9%E9%85%8Djs%E4%B8%AD%E7%9A%84enter%E6%8D%A2%E8%A1%8C%E6%93%8D%E4%BD%9C/</id>
    <published>2020-07-23T14:54:50.000Z</published>
    <updated>2021-01-19T15:21:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>前几日在被莫名其妙的提了个bug<br>测试说 测试数据配置的时候有用enter换行 为什么在我的小程序里换行就神奇的消失了<br>第一次遇到这样的情况 在我的认真查找下 终于发现在数据里 字里行间还隐秘的藏着一些 回车符 （我实在是打不出来那个小小的符号了）</p><p>但是在html文本中 这个符号是会被自动忽略掉的 所以我们要把它替换成html可以识别的换行符</p><p> str= str.replace(/[\r\n]/g, “\n”);用 \n 替换<br> 小程序中 只有在在text标签中可以换行 view里面 \n是无法换行的</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前几日在被莫名其妙的提了个bug&lt;br&gt;测试说 测试数据配置的时候有用enter换行 为什么在我的小程序里换行就神奇的消失了&lt;br&gt;第一次遇到这样的情况 在我的认真查找下 终于发现在数据里 字里行间还隐秘的藏着一些 回车符 （我实在是打不出来那个小小的符号了）&lt;/p&gt;
&lt;p
      
    
    </summary>
    
    
    
      <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="https://wine1.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>flex布局知识点</title>
    <link href="https://wine1.github.io/2020/07/22/flex%E5%B8%83%E5%B1%80%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>https://wine1.github.io/2020/07/22/flex%E5%B8%83%E5%B1%80%E7%9F%A5%E8%AF%86%E7%82%B9/</id>
    <published>2020-07-22T14:39:48.000Z</published>
    <updated>2020-08-10T15:26:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>flex是一个十分好用的布局方法，能轻松的实现很多以往需要做复杂的工作才能实现的效果<br>在reactnative中 更是默认的flex布局<br>之前对flex布局都是一知半解，今天看到了一句值得划重点的知识点<br>码起来呀</p><a id="more"></a><p>在前端面试题中有一道经典css的考题：实现元素的水平垂直居中布局<br>当然实现的方法很多，毕竟css是十分灵活的<br>但是在css布局中 一行 <code>align-items:center</code> 就能解决这个问题<br>可能提到flex布局有些人也只能想到<code>justify-content:center</code>和<code>align-items:center</code><br>甚至弄不太清楚到底那个属性决定了水平居中哪个决定了垂直居中</p><p>flex布局中是分为 主轴 和 副轴 的<br>而主轴和副轴的方向又由flex-direction决定 该属性的默认值是row 即 横轴是主轴 竖轴是副轴</p><p>划重点来了</p><p>justify-content属性用于控制项目在<em>主轴</em> 的对齐方式<br>注意这里是主轴而不是横轴 当flex-direction的值是row 或者 就是默认值时，主轴就是横轴，但是当flex-direction值为column时 主轴就是竖轴</p><p>而align-items属性 是控制副轴的排列方式的</p><p>常见flex布局的考点</p><ol><li><p>实现水平垂直居中</p></li><li><p>等高布局</p><ul><li>flex布局中子元素等高</li></ul></li><li><p>Sticky Footer</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- HTML --&gt;</span><br><span class="line">&lt;header&gt;&lt;/header&gt;</span><br><span class="line">&lt;main&gt;&lt;/main&gt;</span><br><span class="line">&lt;footer&gt;&lt;/footer&gt;</span><br><span class="line">//方案1 css</span><br><span class="line">body &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">footer &#123;</span><br><span class="line">    margin-top: auto;</span><br><span class="line">&#125;</span><br><span class="line">//方案2 css</span><br><span class="line">body &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main &#123;</span><br><span class="line">    flex: 1 0 auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>均分列 </p><ul><li>flex布局 </li><li>子元素 width:calc(100% / 3)</li></ul></li><li><p><a href="https://wine1.github.io/2017/12/01/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80%E5%92%8C%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80/">圣杯布局</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;flex是一个十分好用的布局方法，能轻松的实现很多以往需要做复杂的工作才能实现的效果&lt;br&gt;在reactnative中 更是默认的flex布局&lt;br&gt;之前对flex布局都是一知半解，今天看到了一句值得划重点的知识点&lt;br&gt;码起来呀&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="https://wine1.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>浅析虚拟DOM</title>
    <link href="https://wine1.github.io/2020/07/15/%E6%B5%85%E6%9E%90%E8%99%9A%E6%8B%9FDOM/"/>
    <id>https://wine1.github.io/2020/07/15/%E6%B5%85%E6%9E%90%E8%99%9A%E6%8B%9FDOM/</id>
    <published>2020-07-14T16:26:01.000Z</published>
    <updated>2021-03-11T14:06:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>虚拟DOM的基本思想</p><ol><li>用js对象模拟DOM树</li><li>比较两颗虚拟DOM树的差异</li><li>把差异应用到真正的DOM树上</li></ol><a id="more"></a><h3 id="虚拟dom"><a href="#虚拟dom" class="headerlink" title="虚拟dom"></a>虚拟dom</h3><p>好处</p><ul><li>不用手动操作dom树</li><li>尽可能小面积的重绘视图 节省性能<br>算法实现</li><li>用js对象模拟dom树</li><li>比较两棵虚拟dom树的差异</li><li>差异化更新dom树</li></ul><blockquote><p>用 JavaScript 对象结构表示 DOM 树的结构；<br>然后用这个树构建一个真正的 DOM 树，插到文档当中当状态变更的时候，重新构造一棵新的对象树;<br>然后用新的树和旧的树进行比较，记录两棵树差异把2所记录的差异应用到步骤1所构建的真正的DOM树上，视图就更新了</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//一段dom对象</span><br><span class="line">var element=&#123;</span><br><span class="line">    tagname=&quot;ul&quot;,</span><br><span class="line">    props:&#123;</span><br><span class="line">        id:&apos;list&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    children:[</span><br><span class="line">        &#123;tagName: &apos;li&apos;, props: &#123;class: &apos;item&apos;&#125;, children: [&quot;Item 1&quot;]&#125;,</span><br><span class="line">        &#123;tagName: &apos;li&apos;, props: &#123;class: &apos;item&apos;&#125;, children: [&quot;Item 2&quot;]&#125;,</span><br><span class="line">        &#123;tagName: &apos;li&apos;, props: &#123;class: &apos;item&apos;&#125;, children: [&quot;Item 3&quot;]&#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>用js实现dom对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function Element(tagname,props,children) &#123;</span><br><span class="line">    this.tagname=tagname</span><br><span class="line">    this.props=props</span><br><span class="line">    this.children=children</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// es6 class</span><br><span class="line">class Element &#123;</span><br><span class="line">  constructor(tagname, props = &#123;&#125;, children = []) &#123;</span><br><span class="line">    this.tagname = tagname</span><br><span class="line">    this.props = props</span><br><span class="line">    this.children = children</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = function (tagName, props, children) &#123;</span><br><span class="line">  return new Element(tagName, props, children)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将虚拟dom应用到真正的dom树</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Element.prototype.render=function() &#123;</span><br><span class="line">    let el=document.createElement(this.tagname)</span><br><span class="line">    let props=this.props</span><br><span class="line"></span><br><span class="line">    for(let propname in props)&#123;</span><br><span class="line">        let propvalue=props[propname]</span><br><span class="line">        el.setAttribute(propname,propvalue)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    let children=this.children||[]</span><br><span class="line"></span><br><span class="line">    children.forEach(function (child)&#123;</span><br><span class="line">        let childEl=(child instanceof Element)?child.render():document.createTextNode(child)</span><br><span class="line">        el.appendChild(childEl)</span><br><span class="line">    &#125;)</span><br><span class="line">    return el</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>比较两棵虚拟dom树的差异(diff算法) 🌟</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">function diff(oldTree,newTree) &#123;</span><br><span class="line">    let index=0</span><br><span class="line">    let patches=&#123;&#125;//记录节点差异的对象</span><br><span class="line">    dfs(oldTree,newTree,index,patches)</span><br><span class="line">    return patches</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let initialIndex = 0</span><br><span class="line"></span><br><span class="line">function dfs(oldNode,newNode,index,patches)&#123;</span><br><span class="line">    let diffResult=[]</span><br><span class="line"></span><br><span class="line">    if(!newNode) &#123;</span><br><span class="line">        diffResult.push(&#123;</span><br><span class="line">            type:&apos;REMOVE&apos;,</span><br><span class="line">            index</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    else if(typeof oldNode === &apos;string  &amp;&amp; typeof newVirtualDom === &apos;string&apos;) &#123;</span><br><span class="line">        if(oldNode !=== newNode) &#123;</span><br><span class="line">            diffResult.push(&#123;</span><br><span class="line">                type: &apos;MODIFY_TEXT&apos;,</span><br><span class="line">                data: newVirtualDom,</span><br><span class="line">                index</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;else if(oldVirtualDom.tagName === newVirtualDom.tagName) &#123;</span><br><span class="line">        let diffAttributeResult=&#123;&#125;</span><br><span class="line">        for(let key in oldNode) &#123;</span><br><span class="line">            if(oldNode[key]!==newNode[key]) &#123;</span><br><span class="line">                diffAttributeResult[key]=newNode[key]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        for(let key in newNode) &#123;</span><br><span class="line">            if(!oldNode.hasOwnProperty(key)) &#123;</span><br><span class="line">                diffAttributeResult[key]=newNode[key]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">       if (Object.keys(diffAttributeResult).length &gt; 0) &#123;</span><br><span class="line">            diffResult.push(&#123; </span><br><span class="line">            type: &apos;MODIFY_ATTRIBUTES&apos;, </span><br><span class="line">            diffAttributeResult </span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        oldNode.children,forEach((child,index)=&gt;&#123;</span><br><span class="line">            diff(child,newNode.children[index],++initialIndex,patches)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    else &#123;</span><br><span class="line">         diffResult.push(&#123; </span><br><span class="line">            type: &apos;REPLACE&apos;, </span><br><span class="line">            newNode</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  if (!oldNode) &#123;</span><br><span class="line">    diffResult.push(&#123; </span><br><span class="line">      type: &apos;REPLACE&apos;, </span><br><span class="line">      newNode</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if (diffResult.length) &#123;</span><br><span class="line">    patches[index] = diffResult</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将差异应用到dom上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">const walk = (node, walker, patches) =&gt; &#123;</span><br><span class="line">  let currentPatch = patches[walker.index]</span><br><span class="line"></span><br><span class="line">  let childNodes = node.childNodes</span><br><span class="line"></span><br><span class="line">  childNodes.forEach(child =&gt; &#123;</span><br><span class="line">    walker.index++</span><br><span class="line">    walk(child, walker, patches)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  if (currentPatch) &#123;</span><br><span class="line">    doPatch(node, currentPatch)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const doPatch = (node, patches) =&gt; &#123;</span><br><span class="line">  patches.forEach(patch =&gt; &#123;</span><br><span class="line">    switch (patch.type) &#123;</span><br><span class="line">      case &apos;MODIFY_ATTRIBUTES&apos;:</span><br><span class="line">        const attributes = patch.diffAttributeResult.attributes</span><br><span class="line">        for (let key in attributes) &#123;</span><br><span class="line">            if (node.nodeType !== 1) return</span><br><span class="line">            const value = attributes[key]</span><br><span class="line">            if (value) &#123;</span><br><span class="line">              setAttribute(node, key, value)</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">              node.removeAttribute(key)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        break</span><br><span class="line">      case &apos;MODIFY_TEXT&apos;:</span><br><span class="line">        node.textContent = patch.data</span><br><span class="line">        break</span><br><span class="line">      case &apos;REPLACE&apos;:</span><br><span class="line">        let newNode = (patch.newNode instanceof Element) ? render(patch.newNode) : document.createTextNode(patch.newNode)</span><br><span class="line">        node.parentNode.replaceChild(newNode, node)</span><br><span class="line">        break</span><br><span class="line">        case &apos;REMOVE&apos;:</span><br><span class="line">        node.parentNode.removeChild(node)</span><br><span class="line">        break</span><br><span class="line">      default:</span><br><span class="line">        break</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><a href="https://gitbook.cn/gitchat/column/5c91c813968b1d64b1e08fde/topic/5cbbef7cbbbba80861a35c23" target="_blank" rel="noopener">买的课程中的原链接</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虚拟DOM的基本思想&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用js对象模拟DOM树&lt;/li&gt;
&lt;li&gt;比较两颗虚拟DOM树的差异&lt;/li&gt;
&lt;li&gt;把差异应用到真正的DOM树上&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>重排和重绘</title>
    <link href="https://wine1.github.io/2020/07/14/%E9%87%8D%E6%8E%92%E5%92%8C%E9%87%8D%E7%BB%98/"/>
    <id>https://wine1.github.io/2020/07/14/%E9%87%8D%E6%8E%92%E5%92%8C%E9%87%8D%E7%BB%98/</id>
    <published>2020-07-14T15:34:39.000Z</published>
    <updated>2020-07-14T16:03:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天一个bug引发了我对重排和重绘的好奇<br>对这个知识点做个系统的了解和总结</p><a id="more"></a><p>DOM的变化引发了原生的几何属性的变化，比如宽高和位置的变化等，属于重排<br>完成重排后，要将重新构建的其他样式（如颜色）渲染到屏幕上，这个过程就是重绘<br>重排必然会引发重绘，但重绘并不一定伴随着重排</p><p>重排的触发条件：</p><ol><li>添加或者删除可以的DOM元素</li><li>元素位置改变</li><li>元素本身的尺寸变化</li><li>内容改变</li><li>页面渲染器初始化</li><li>浏览器窗口大小发生改变</li></ol><p>重绘和重排的开销是非常昂贵的，如果我们不停的在改变页面的布局，就会造成浏览器耗费大量的开销在进行页面的计算，这样的话，我们页面在用户使用起来，就会出现明显的卡顿。<br>现在的浏览器其实已经对重排进行了优化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var div = document.querySelector(&apos;.div&apos;);</span><br><span class="line">div.style.width = &apos;200px&apos;;</span><br><span class="line">div.style.background = &apos;red&apos;;</span><br><span class="line">div.style.height = &apos;300px&apos;;</span><br></pre></td></tr></table></figure><p>比较久远的浏览器，这段代码会触发页面2次重排，在分别设置宽高的时候，触发2次.<br>当代的浏览器对此进行了优化，这种思路类似于现在流行的MVVM框架使用的虚拟DOM，对改变的DOM节点进行依赖收集，确认没有改变的节点，就进行一次更新。但是浏览器针对重排的优化虽然思路和虚拟DOM接近，但是还是有本质的区别。大多数浏览器通过队列化修改并批量执行来优化重排过程。也就是说上面那段代码其实在现在的浏览器优化下，只构成一次重排。</p><p>除此之外，我们也可以针对性的做一些优化</p><ol><li>最小化重排和重绘（把会引起重排和重绘的操作一起操作，尽量只重绘或重排一次）</li><li>缓存布局信息 缓存布局信息这个概念，在《高性能JavaScript》DOM性能优化中，多次提到类似的思想.<ul><li>比如我现在要得到页面ul节点下面的100个li节点，最好的办法就是第一次获取后就保存起来，减少</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天一个bug引发了我对重排和重绘的好奇&lt;br&gt;对这个知识点做个系统的了解和总结&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>node+koa</title>
    <link href="https://wine1.github.io/2020/06/23/node-koa/"/>
    <id>https://wine1.github.io/2020/06/23/node-koa/</id>
    <published>2020-06-23T13:43:57.000Z</published>
    <updated>2020-06-27T03:33:18.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li>koa+node基础搭建到实现api接口 <a href="https://www.jianshu.com/p/3b60dda108d4" target="_blank" rel="noopener">https://www.jianshu.com/p/3b60dda108d4</a></li><li>使用pm2管理node进程</li><li>使用knex操作数据库</li><li></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;koa+node基础搭建到实现api接口 &lt;a href=&quot;https://www.jianshu.com/p/3b60dda108d4&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.jianshu.com/p/3b60
      
    
    </summary>
    
    
    
      <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>小程序+腾讯云实时音视频</title>
    <link href="https://wine1.github.io/2020/06/23/%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%85%BE%E8%AE%AF%E4%BA%91%E5%AE%9E%E6%97%B6%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    <id>https://wine1.github.io/2020/06/23/%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%85%BE%E8%AE%AF%E4%BA%91%E5%AE%9E%E6%97%B6%E9%9F%B3%E8%A7%86%E9%A2%91/</id>
    <published>2020-06-23T13:38:16.000Z</published>
    <updated>2020-06-23T13:44:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="小程序加腾讯云实时音视频"><a href="#小程序加腾讯云实时音视频" class="headerlink" title="小程序加腾讯云实时音视频"></a>小程序加腾讯云实时音视频</h2><a id="more"></a><ol><li>腾讯实时音视频官方demo，IOS微信小程序端不显示本地和远程画面？<br> 在 app.json 下 window 下配置一下 “renderingMode”: “seperated”强制关掉同层</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;小程序加腾讯云实时音视频&quot;&gt;&lt;a href=&quot;#小程序加腾讯云实时音视频&quot; class=&quot;headerlink&quot; title=&quot;小程序加腾讯云实时音视频&quot;&gt;&lt;/a&gt;小程序加腾讯云实时音视频&lt;/h2&gt;
    
    </summary>
    
    
    
      <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>js遍历</title>
    <link href="https://wine1.github.io/2020/06/12/js%E9%81%8D%E5%8E%86/"/>
    <id>https://wine1.github.io/2020/06/12/js%E9%81%8D%E5%8E%86/</id>
    <published>2020-06-12T14:40:45.000Z</published>
    <updated>2020-06-12T14:42:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>foreach和map的区别</p><ol><li><code>foreach</code><br>foreach没有返回值</li></ol><ol start="2"><li><code>map</code><br>映射 跟foreach用法类似 返回一个新数组</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;foreach和map的区别&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;foreach&lt;/code&gt;&lt;br&gt;foreach没有返回值&lt;/li&gt;
&lt;/ol&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;code&gt;map&lt;/code&gt;&lt;br&gt;映射 跟foreach用法类似 返回一个新数
      
    
    </summary>
    
    
    
      <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>touch-action</title>
    <link href="https://wine1.github.io/2020/06/12/touch-action/"/>
    <id>https://wine1.github.io/2020/06/12/touch-action/</id>
    <published>2020-06-12T14:40:01.000Z</published>
    <updated>2020-06-12T14:40:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="touch-action"><a href="#touch-action" class="headerlink" title="touch-action"></a>touch-action</h2><p>用于设置触摸屏用户如何操纵元素的区域</p><a id="more"></a><p>可选的属性值</p><ul><li>auto 当触控事件发生在元素上时，由浏览器来决定进行哪些操作，比如对viewport进行平滑、缩放等。</li><li>none 当触控事件发生在元素上时，不进行任何操作。</li><li>pan-x 启用单指水平平移手势。可以与 pan-y 、pan-up、pan-down 和／或 pinch-zoom 组合使用。</li><li>pan-y 启用单指垂直平移手势。可以与 pan-x 、pan-left 、pan-right 和／或 pinch-zoom 组合使用。</li><li>manipulation 浏览器只允许进行滚动和持续缩放操作。任何其它被auto值支持的行为不被支持。启用平移和缩小缩放手势，但禁用其他非标准手势，例如双击以进行缩放。 禁用双击可缩放功能可减少浏览器在用户点击屏幕时延迟生成点击事件的需要。 这是“pan-x pan-y pinch-zoom”（为了兼容性本身仍然有效）的别名。</li><li>pan-left, pan-right,pan-up,pan-down 启用以指定方向滚动开始的单指手势。 一旦滚动开始，方向可能仍然相反。 请注意，滚动“向上”（pan-up）意味着用户正在将其手指向下拖动到屏幕表面上，同样 pan-left 表示用户将其手指向右拖动。 多个方向可以组合，除非有更简单的表示（例如，“pan-left pan-right”无效，因为“pan-x”更简单，而“pan-left pan-down”有效）。</li><li>pinch-zoom 启用多手指平移和缩放页面。 这可以与任何平移值组合。</li></ul><p>应用场景：<br>将touch-action改为manipulation可以减少移动端浏览器在用户点击事件的延迟</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;touch-action&quot;&gt;&lt;a href=&quot;#touch-action&quot; class=&quot;headerlink&quot; title=&quot;touch-action&quot;&gt;&lt;/a&gt;touch-action&lt;/h2&gt;&lt;p&gt;用于设置触摸屏用户如何操纵元素的区域&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>css3实现加载图标</title>
    <link href="https://wine1.github.io/2020/06/12/css3%E5%AE%9E%E7%8E%B0%E5%8A%A0%E8%BD%BD%E5%9B%BE%E6%A0%87/"/>
    <id>https://wine1.github.io/2020/06/12/css3%E5%AE%9E%E7%8E%B0%E5%8A%A0%E8%BD%BD%E5%9B%BE%E6%A0%87/</id>
    <published>2020-06-12T14:32:57.000Z</published>
    <updated>2020-11-23T14:33:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>纯css3实现loading效果</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;wrapper&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;line1&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;line2&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;line3&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;line4&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;line5&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;line6&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;line7&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;line8&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;line9&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;line10&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;line11&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;line12&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        @-webkit-keyframes loading &#123;</span><br><span class="line">            from &#123;</span><br><span class="line">                opacity: 1;</span><br><span class="line">                width: 5px;</span><br><span class="line">                height: 20px;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            to &#123;</span><br><span class="line">                opacity: 0.25;</span><br><span class="line">                width: 5px;</span><br><span class="line">                height: 20px;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .wrapper &#123;</span><br><span class="line">            position: relative;</span><br><span class="line">            top: 50%;</span><br><span class="line">            left: 50%;</span><br><span class="line">            display: inline-block;</span><br><span class="line">            zoom: 0.3;</span><br><span class="line">            /*通过修改这个值(值的区间为0-1)的大小来设置菊花的大小*/</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .wrapper div &#123;</span><br><span class="line">            width: 3px;</span><br><span class="line">            height: 16px;</span><br><span class="line">            background: #a4a2a4;</span><br><span class="line">            position: absolute;</span><br><span class="line">            left: 100%;</span><br><span class="line">            top: 100%;</span><br><span class="line">            opacity: 0;</span><br><span class="line"></span><br><span class="line">            -webkit-animation: loading 1.2s linear infinite;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .wrapper .line1 &#123;</span><br><span class="line">            -webkit-transform: rotate(0deg) translate(0, -34px);</span><br><span class="line">            -webkit-animation-delay: 0s;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .wrapper .line2 &#123;</span><br><span class="line">            -webkit-transform: rotate(30deg) translate(0, -34px);</span><br><span class="line">            -webkit-animation-delay: 0.1s;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .wrapper .line3 &#123;</span><br><span class="line">            -webkit-transform: rotate(60deg) translate(0, -34px);</span><br><span class="line">            -webkit-animation-delay: 0.2s;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .wrapper .line4 &#123;</span><br><span class="line">            -webkit-transform: rotate(90deg) translate(0, -34px);</span><br><span class="line">            -webkit-animation-delay: 0.3s;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .wrapper .line5 &#123;</span><br><span class="line">            -webkit-transform: rotate(120deg) translate(0, -34px);</span><br><span class="line">            -webkit-animation-delay: 0.4s;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .wrapper .line6 &#123;</span><br><span class="line">            -webkit-transform: rotate(150deg) translate(0, -34px);</span><br><span class="line">            -webkit-animation-delay: 0.5s;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .wrapper .line7 &#123;</span><br><span class="line">            -webkit-transform: rotate(180deg) translate(0, -34px);</span><br><span class="line">            -webkit-animation-delay: 0.6s;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .wrapper .line8 &#123;</span><br><span class="line">            -webkit-transform: rotate(210deg) translate(0, -34px);</span><br><span class="line">            -webkit-animation-delay: 0.7s;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .wrapper .line9 &#123;</span><br><span class="line">            -webkit-transform: rotate(240deg) translate(0, -34px);</span><br><span class="line">            -webkit-animation-delay: 0.8s;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .wrapper .line10 &#123;</span><br><span class="line">            -webkit-transform: rotate(270deg) translate(0, -34px);</span><br><span class="line">            -webkit-animation-delay: 0.9s;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .wrapper .line11 &#123;</span><br><span class="line">            -webkit-transform: rotate(300deg) translate(0, -34px);</span><br><span class="line">            -webkit-animation-delay: 1.0s;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .wrapper .line12 &#123;</span><br><span class="line">            -webkit-transform: rotate(330deg) translate(0, -34px);</span><br><span class="line">            -webkit-animation-delay: 1.1s;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;纯css3实现loading效果&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="https://wine1.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>层序遍历</title>
    <link href="https://wine1.github.io/2020/06/12/%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    <id>https://wine1.github.io/2020/06/12/%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/</id>
    <published>2020-06-12T14:29:10.000Z</published>
    <updated>2021-01-16T13:00:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>小余同学给讲的层次遍历</p><a id="more"></a><p><img src="/2020/06/12/层序遍历/tu1.png" alt="灵魂画手作图层次遍历"><br>层序遍历就是从上到下 从左到右遍历二叉树 比如上面这颗 层序遍历就是 1 4 2 3 5</p><p>要实现层序遍历一般我们使用队列（why？因为先进先出，这和二叉树的访问结构对上了，某一层进入队列，可以先访问这一层的节点，再通过每个节点的左右孩子访问下一层，然后把对应节点出列） </p><p>Leetcode里面的代码其实就是给定你数据结构的定义，你只要能了解就可以用</p><p>其实是这样的<br>Struct Node{<br>   Int val;<br>   Node left;<br>   Node right；<br>}</p><p>Root也是Node类型是给定的二叉树的根 二叉树的结构已经通过left和right定义好 比如上面root.left（也是一个Node型变量）代表它的左孩子，root.left.val 代表左孩子的结点的值是4，root.right.val=2</p><p>传入函数的是根结点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">var levelOrderBottom = function(root) &#123;</span><br><span class="line">  if(!root)return []; //如果根是空节点 retrun 空的数组</span><br><span class="line">  let queue=[root]; //根入列</span><br><span class="line">  let res=[];</span><br><span class="line">  let level=0; //记录层数初始值为0</span><br><span class="line">  while(queue.length)&#123;  //当队列不为空时</span><br><span class="line">    let temp=[];//临时变量用来存放下一层的所有节点</span><br><span class="line">    res[level]=[];//某一层的层序遍历结果</span><br><span class="line">    for(let i=0;i&lt;queue.length;i++)&#123; //遍历某一层的节点</span><br><span class="line">      res[level].push(queue[i].val);//将此节点入本层队列</span><br><span class="line">      if(queue[i].left)&#123;</span><br><span class="line">        temp.push(queue[i].left); //将左孩子（即下一层）入temp队列</span><br><span class="line">      &#125;</span><br><span class="line">      if(queue[i].right)&#123;</span><br><span class="line">        temp.push(queue[i].right);// 将右孩子（即下一层）入temp队列</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    queue=temp; //此时temp里就有下一层按从左到右顺序的所有节点将它赋值给queue，接着重复遍历queue直到空</span><br><span class="line">    ++level;//由于这一层的节点遍历完（跳出前面的for循环了），此时的queue是装的下一层节点所以层数加1</span><br><span class="line">  &#125;</span><br><span class="line">  return res.reverse();//由于层序是从上到下从左到右 题目是从下到上从右到左，过将层序结果reverse一下即可 </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>通过上面的二叉树模拟一下：<br>开始 queue 里面是 1节点 level是0，，res为空<br>当queue.length（1）不为0循环：<br>   Temp置空<br>   走for遍历这一层的节点；</p><p>将 1节点放入res[level]队列 （level为0）<br>看看他的左右孩子是否存在，依次进入temp队列 此时temp是 4和2节点</p><p>第一层遍历完了temp赋值给queue（4和2）,level++为1</p><p>当queue.length（2）不为0循环：<br>   temp为空（由于上次循环里temp放的是这一层的节点，而temp是要每次存放下一层的节点故每次for遍历此层前将temp置空）<br>   走for遍历这一层的节点；</p><p>将 4节点放入res[level]队列 （level为1）<br>看看他的左右孩子是否存在，依次进入temp队列 此时temp是3节点<br>将 2节点放入res[level]队列 （level为1）<br>看看他的左右孩子是否存在，依次进入temp队列 此时temp是3和5节点</p><p>第二层遍历完了temp赋值给queue（3和5）,level++为2</p><p>当queue.length（2）不为0循环：<br>   temp为空（由于上次循环里temp放的是这一层的节点，而temp是要每次存放下一层的节点故每次for遍历此层前将temp置空）<br>   走for遍历这一层的节点；</p><p>将 3节点放入res[level]队列 （level为2）<br>看看他的左右孩子是否存在（不存在），依次进入temp队列 此时temp为空<br>将 5节点放入res[level]队列 （level为2）<br>看看他的左右孩子是否存在（不存在），依次进入temp队列 此时temp依然是空</p><p>第二层遍历完了temp赋值给queue（为空）,level++为3</p><p>此时queue长度为空，跳出循环，而level就是二叉树的层数（虽然从0层开始（为了和数组下标对应）但是再遍历完第二层（此时是最后一层遍历后仍然加1）为3）<br>然后将res数组reverse一下得到结果</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;小余同学给讲的层次遍历&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="算法" scheme="https://wine1.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>小程序开发总结</title>
    <link href="https://wine1.github.io/2020/06/11/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/"/>
    <id>https://wine1.github.io/2020/06/11/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/</id>
    <published>2020-06-11T15:44:36.000Z</published>
    <updated>2020-09-07T12:49:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>虽然之前提换组没有成功，但是也阴差阳错参与到了小程序开发组<br>开启了小程序开发的升级打怪之路</p><a id="more"></a><ol><li><a href="https://www.jianshu.com/p/25f28d80ec81" target="_blank" rel="noopener">rpx单位</a></li><li>没有刷新页面的功能，页面数据都是异步请求获取的，你删除某个商品的时候，直接再请求一次数据，更改页面的数据就可以了。</li><li>点击事件传递参数 微信小程序 点击事件获取到的 event.currentTarget.dataset<a href="https://blog.csdn.net/weixin_37861326/article/details/84027569" target="_blank" rel="noopener">https://blog.csdn.net/weixin_37861326/article/details/84027569</a></li><li>小程序实现长按复制文字 <a href="https://blog.csdn.net/weixin_39589455/article/details/99704077" target="_blank" rel="noopener">https://blog.csdn.net/weixin_39589455/article/details/99704077</a></li><li>小程序使用sass <a href="https://www.jb51.net/article/144681.htm" target="_blank" rel="noopener">https://www.jb51.net/article/144681.htm</a></li><li>微信小程序01：关于错误Page “pages/goods_list/index” has not been registered yet.的原因 </li><li>小程序打开H5 <a href="https://www.jianshu.com/p/3c8e84c6e67d" target="_blank" rel="noopener">https://www.jianshu.com/p/3c8e84c6e67d</a></li><li>小程序使textarea自动聚焦 </li><li>9.e.target和e.currentTarget的区别  e.target 指向触发事件监听的对象。<br>e.currentTarget 指向添加监听事件的对象，指向代码中点击事件的元素<br>e.target始终指向即当前点击的目标元素，e.currentTarget在事件委托中，如果监听元素不是目标元素，则指向监听元素</li><li>bind call 的作用和区别</li><li>methods中的函数和直接写在page中函数的区别</li><li>catchTap</li><li>生命周期</li><li>wx.onMemoryWarning 监听内存不足警告</li><li>页面跳转传参 <a href="https://www.jianshu.com/p/079db5ea1a9b" target="_blank" rel="noopener">https://www.jianshu.com/p/079db5ea1a9b</a></li><li>小程序实现写入缓存与读取缓存</li><li>17 flex布局</li><li>设置小程序的状态栏、导航条、标题、窗口背景色[Window] <a href="https://blog.csdn.net/dxnn520/article/details/79342548" target="_blank" rel="noopener">https://blog.csdn.net/dxnn520/article/details/79342548</a></li><li>textarea 中 ajust-position 中 false 值需要用双层中括号包起来 否则不生效</li><li>【微信小程序】微信小程序阻止IOS页面上下拖动问题<br>为了阻止IOS端小程序页面上下拖动可以再对应的json文件当中添加这个配置 “disableScroll”:true</li><li>小程序windowHeight在不同页面高度不一致问题及解决方案<br><a href="https://blog.csdn.net/qq_41619741/article/details/83143624" target="_blank" rel="noopener">https://blog.csdn.net/qq_41619741/article/details/83143624</a> </li><li>小程序的windowheight和screenheight</li><li>小程序阻止事件冒泡 <a href="https://blog.csdn.net/promiseCao/article/details/83926807?utm_medium=distribute.pc_relevant.none-task-blog-baidujs-2" target="_blank" rel="noopener">https://blog.csdn.net/promiseCao/article/details/83926807?utm_medium=distribute.pc_relevant.none-task-blog-baidujs-2</a></li><li>组件层级问题 <a href="https://www.cnblogs.com/duxingdexin/p/9585285.html" target="_blank" rel="noopener">https://www.cnblogs.com/duxingdexin/p/9585285.html</a></li><li>使用TypeScript开发小程序入门 <a href="https://www.jianshu.com/p/c778943acb37" target="_blank" rel="noopener">https://www.jianshu.com/p/c778943acb37</a></li><li>当input框输入到限定长度时，自动focus下一个input框 <a href="https://blog.csdn.net/weixin_30781107/article/details/95180186" target="_blank" rel="noopener">https://blog.csdn.net/weixin_30781107/article/details/95180186</a></li><li>新增页面 has not been registered yet自行创建的新页面 .js文件中，必须有 Page({ }) 里面留空即可，否则就会爆这个错误 Page “pages/detail/detail” has not been registered yet. 并且页面上的文字也不会显示。 .json文件中，必须有{ }</li><li>wx.redirectTo(OBJECT) 关闭当前页面，跳转到应用内的某个页面。</li><li>wx.navigateTo(OBJECT) 保留当前页面，跳转到应用内的某个页面，使用wx.navigateBack可以返回到原页面。</li><li>webview中的页面怎么跳转回小程序？<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wx.miniProgram.navigateTo(&#123;</span><br><span class="line">url:’pages/login/login’+’$params’</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">**//跳转到小程序导航页面**</span><br><span class="line">wx.miniProgram.switchTab(&#123;</span><br><span class="line">url:’/pages/index/index’</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="30"><li>live-player 全屏<br><a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/live/LivePlayerContext.html" target="_blank" rel="noopener">https://developers.weixin.qq.com/miniprogram/dev/api/media/live/LivePlayerContext.html</a></li></ol><h2 id="小程序组件传参"><a href="#小程序组件传参" class="headerlink" title="小程序组件传参"></a>小程序组件传参</h2><p>父组件A向子组件B传参</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">   //子组件 wxml</span><br><span class="line">&lt;cover-view class=&apos;nav-title&apos;&gt;&#123;&#123;title&#125;&#125;&lt;/cover-view&gt;</span><br><span class="line">   //子组件 js</span><br><span class="line">   properties: &#123;</span><br><span class="line">       title: &#123;</span><br><span class="line">       type: String,</span><br><span class="line">       value: &apos;&apos;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   //父组件wxml</span><br><span class="line">   &lt;navbar title=&quot;&#123;&#123;title&#125;&#125;&quot;  /&gt;</span><br><span class="line">   //父组件js</span><br><span class="line">   data:&#123;</span><br><span class="line">       title: &apos;标题&apos;, </span><br><span class="line">   &#125;</span><br><span class="line">   //json文件当然是需要配置的</span><br></pre></td></tr></table></figure><p>子组件B向父组件A传参</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">   //子组件 wxml</span><br><span class="line">&lt;cover-view class=&apos;nav-title&apos; bindtap=&quot;Change&quot;&gt;&#123;&#123;title&#125;&#125;&lt;/cover-view&gt;</span><br><span class="line">   &lt;view bindtap=&quot;trigger&quot;&gt;&lt;/view&gt;</span><br><span class="line">   //子组件 js</span><br><span class="line">    data:&#123;</span><br><span class="line">       title:&apos;标题&apos;</span><br><span class="line">   &#125;，</span><br><span class="line">  methods:&#123;</span><br><span class="line">   trigger() &#123;</span><br><span class="line">     let &#123; title &#125; = this.data</span><br><span class="line">     this.triggerEvent(&apos;change&apos;, &#123; param: title &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   //父组件wxml</span><br><span class="line">   &lt;navbar title=&quot;&#123;&#123;title&#125;&#125;&quot; bind:change=&quot;change&quot; /&gt;</span><br><span class="line">   //父组件js</span><br><span class="line">  methods:&#123;</span><br><span class="line">       change(e) &#123;</span><br><span class="line">           let title=e.detail.param</span><br><span class="line">       &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>向组件中传递参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">wxml：&lt;view wx:for=&quot;&#123;&#123;imgs&#125;&#125;&quot; wx:key=&quot;index&quot; style=&quot;width: 500rpx;height: 300rpx;margin: 30rpx auto;&quot;&gt;</span><br><span class="line">　　&lt;button bindtap=&quot;ondelete&quot; style=&quot;&quot; data-index=&quot;&#123;&#123;index&#125;&#125;&quot;&gt;删除&lt;/button&gt;</span><br><span class="line">　　&lt;image src=&quot;&#123;&#123;item.url&#125;&#125;&quot; style=&quot;width: 100%;height: 100%;&quot;&gt;&lt;/image&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">&lt;xly-upload id=&apos;btn&apos; customeStyle=&quot;true&quot;  bindsuccess=&quot;uploadChange&quot;binddelete=&quot;deleteChange&quot; bindfail=&quot;uploadfail&quot;&gt;</span><br><span class="line">&lt;text&gt;上传&lt;/text&gt;</span><br><span class="line">&lt;/xly-upload&gt;</span><br><span class="line"></span><br><span class="line">js:   </span><br><span class="line"></span><br><span class="line">ondelete(e) &#123;</span><br><span class="line">this.selectComponent(&apos;#btn&apos;).DelImg(e);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>获取子组件的dom<br><a href="https://developers.weixin.qq.com/miniprogram/dev/api/wxml/SelectorQuery.select.html" target="_blank" rel="noopener">https://developers.weixin.qq.com/miniprogram/dev/api/wxml/SelectorQuery.select.html</a><br>跨自定义组件的后代选择器：.the-ancestor &gt;&gt;&gt; .the-descendant</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虽然之前提换组没有成功，但是也阴差阳错参与到了小程序开发组&lt;br&gt;开启了小程序开发的升级打怪之路&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>webpack配置css-modules</title>
    <link href="https://wine1.github.io/2020/05/20/webpack%E9%85%8D%E7%BD%AEcss-modules/"/>
    <id>https://wine1.github.io/2020/05/20/webpack%E9%85%8D%E7%BD%AEcss-modules/</id>
    <published>2020-05-20T11:54:50.000Z</published>
    <updated>2020-05-20T12:00:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>CSS Modules 是指：<br>项目中所有 class 名称默认都是局部起作用的。</p><p>CSS的规则都是全局的，任何一个组件的样式规则，都对整个页面有效。<br>产生局部作用域的唯一方法，就是使用一个独一无二的class的名字，不会与其他选择器重名。这就是 CSS Modules 的做法。</p><a id="more"></a><p><a href="https://gitbook.cn/gitchat/column/5c91c813968b1d64b1e08fde/topic/5cbbef07bbbba80861a35c21" target="_blank" rel="noopener">https://gitbook.cn/gitchat/column/5c91c813968b1d64b1e08fde/topic/5cbbef07bbbba80861a35c21</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CSS Modules 是指：&lt;br&gt;项目中所有 class 名称默认都是局部起作用的。&lt;/p&gt;
&lt;p&gt;CSS的规则都是全局的，任何一个组件的样式规则，都对整个页面有效。&lt;br&gt;产生局部作用域的唯一方法，就是使用一个独一无二的class的名字，不会与其他选择器重名。这就是 CSS Modules 的做法。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
