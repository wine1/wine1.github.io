<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wonderland</title>
  
  <subtitle>welcome to wonderland</subtitle>
  <link href="https://wine1.github.io/atom.xml" rel="self"/>
  
  <link href="https://wine1.github.io/"/>
  <updated>2023-09-11T13:12:36.941Z</updated>
  <id>https://wine1.github.io/</id>
  
  <author>
    <name>Rabbit</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>浅谈前端设计模式</title>
    <link href="https://wine1.github.io/2023/07/13/%E6%B5%85%E8%B0%88%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://wine1.github.io/2023/07/13/%E6%B5%85%E8%B0%88%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2023-07-13T14:49:26.000Z</published>
    <updated>2023-09-11T13:12:36.941Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是设计模式"><a href="#什么是设计模式" class="headerlink" title="什么是设计模式"></a>什么是设计模式</h3><p>设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。<br>简单来说 它是一套被反复使用、多人知晓的、经过分类的、代码设计经验总结。</p><span id="more"></span><h3 id="设计模式的原则"><a href="#设计模式的原则" class="headerlink" title="设计模式的原则"></a>设计模式的原则</h3><p>单一职责原则：就是功能要单一，简而言之就是一个类负责做一件事情。<br>开放封闭原则：对扩展开放，对修改关闭。<br>里氏替换原则：基类出现的地方，子类一定出现，不要破坏继承体系。<br>接口隔离原则：客户端不应该依赖它不需要的接口；一个类对另一个类的依赖应该建立在最小的接口上。<br>依赖翻转原则：针对接口编程，依赖抽象而不依赖具体。<br>合成复用原则：少用继承，多用合成方式实现。</p><h3 id="前端常用设计模式"><a href="#前端常用设计模式" class="headerlink" title="前端常用设计模式"></a>前端常用设计模式</h3><h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4><p>这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。<br>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。<br>单例模式是一种创建型设计模式，它确保一个类只有一个实例，并提供了一个全局访问点来访问该实例。<br>主要解决：一个全局使用的类频繁地创建与销毁。<br>何时使用：当您想控制实例数目，节省系统资源的时候。<br>如何解决：判断系统是否已经有这个单例，如果有则返回，如果没有则创建。<br>关键代码：构造函数是私有的。<br>常见实现方法，该方法在多线程的状态下不能正常工作，但是 js 是单线程工作，所以不用考虑这个问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line"> private static Singleton instance;</span><br><span class="line"> private Singleton ()&#123;&#125;</span><br><span class="line"></span><br><span class="line">    public static Singleton getInstance() &#123;</span><br><span class="line">        if (instance == null) &#123;</span><br><span class="line">            instance = new Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h4><p>当对象间存在一对多关系时，则使用观察者模式（Observer Pattern）。比如，当一个对象被修改时，则会自动通知依赖它的对象。观察者模式属于行为型模式。<br>主要解决：一个对象状态改变给其他对象通知的问题，而且要考虑到易用和低耦合，保证高度的协作。<br>何时使用：一个对象（目标对象）的状态发生改变，所有的依赖对象（观察者对象）都将得到通知，进行广播通知。<br>如何解决：使用面向对象技术，可以将这种依赖关系弱化。<br>关键代码：在抽象类里有一个 ArrayList 存放观察者们。</p><h4 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h4><p>其实 24 种基本的设计模式中并没有发布订阅模式，它只是观察者模式的一个别称。<br>但是经过时间的沉淀，似乎它已经强大了起来，已经独立于观察者模式，成为另外一种不同的设计模式。<br>在现在的发布订阅模式中，称为发布者的消息发送者不会将消息直接发送给订阅者，这意味着发布者和订阅者不知道彼此的存在。在发布者和订阅者之间存在第三个组件，称为调度中心或事件通道，它维持着发布者和订阅者之间的联系，过滤所有发布者传入的消息并相应地分发它们给订阅者。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">const EventEmit = function() &#123;</span><br><span class="line">  this.events = &#123;&#125;;</span><br><span class="line">  this.on = function(name, cb) &#123;</span><br><span class="line">    if (this.events[name]) &#123;</span><br><span class="line">      this.events[name].push(cb);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      this.events[name] = [cb];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  this.trigger = function(name, ...arg) &#123;</span><br><span class="line">    if (this.events[name]) &#123;</span><br><span class="line">      this.events[name].forEach(eventListener =&gt; &#123;</span><br><span class="line">        eventListener(...arg);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h4><p>主要解决：在有多种算法相似的情况下，使用 if…else 所带来的复杂和难以维护。<br>何时使用：一个系统有许多许多类，而区分它们的只是他们直接的行为。<br>如何解决：将这些算法封装成一个一个的类，任意地替换。<br>关键代码：实现同一个接口。<br>举个 🌰 : 表单验证中，要校验不同的规则，如果通过条件判断代码就会非常难以理解和维护，换成以下策略模式实现的方法，更加简洁明了<br><img src="/2023/07/13/%E6%B5%85%E8%B0%88%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/pic1.png" alt="tu"><br>使用的时候，调用不同的类方法</p><h4 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h4><p>装饰器模式（Decorator Pattern）允许向一个现有的对象添加新的功能，同时又不改变其结构。这种类型的设计模式属于结构型模式，它是作为现有的类的一个包装。<br>装饰器模式通过将对象包装在装饰器类中，以便动态地修改其行为。<br>在前端中的应用 举个 🌰: HOC<br>定义一个黄色背景的高阶组件，既不影响子组件的结构，又拓展了组件的功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import React from &#x27;react&#x27;;</span><br><span class="line"></span><br><span class="line">const yellowHOC = WrapperComponent =&gt; &#123;</span><br><span class="line">  return class extends React.Component &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      &lt;div style=&#123;&#123; backgroundColor: &#x27;yellow&#x27; &#125;&#125;&gt;</span><br><span class="line">        &lt;WrapperComponent &#123;...this.props&#125; /&gt;</span><br><span class="line">      &lt;/div&gt;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default yellowHOC;</span><br><span class="line"></span><br><span class="line">import React from &#x27;react&#x27;;</span><br><span class="line">import yellowHOC from &#x27;./yellowHOC&#x27;;</span><br><span class="line"></span><br><span class="line">class TargetComponent extends Reac.Compoment &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return &lt;div&gt;66666&lt;/div&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default yellowHOC(TargetComponent);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;什么是设计模式&quot;&gt;&lt;a href=&quot;#什么是设计模式&quot; class=&quot;headerlink&quot; title=&quot;什么是设计模式&quot;&gt;&lt;/a&gt;什么是设计模式&lt;/h3&gt;&lt;p&gt;设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。&lt;br&gt;简单来说 它是一套被反复使用、多人知晓的、经过分类的、代码设计经验总结。&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="工程" scheme="https://wine1.github.io/tags/%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>ReactNative开发App</title>
    <link href="https://wine1.github.io/2023/07/12/ReactNative%E5%BC%80%E5%8F%91App/"/>
    <id>https://wine1.github.io/2023/07/12/ReactNative%E5%BC%80%E5%8F%91App/</id>
    <published>2023-07-12T00:38:47.000Z</published>
    <updated>2023-07-12T14:20:46.506Z</updated>
    
    <content type="html"><![CDATA[<p>一年多没有更新博客 经历了 22 年上海三月到五月的封控，辞掉了之前的工作。六月解封之后就火速跑到了杭州，换了新的工作，一直到现在。</p><p>近一年一直在做物联网 iot 工业互联网相关的事情<br>做了快一年的 app 多少也算是有一些收获，整理一下，也算是对这个项目的一个总结</p><span id="more"></span><p>背景：组里有做 app 的需求，又没有专门做 native App 的开发人员，所以就选择了用跨端框架来实现，因为做过 react native 又对 flutter 不熟悉，所以顺理成章的选择了这个技术栈。 中间经历很多，活了很多时间在了解一些规则和配置方法上，在这里记录一下，说不定后面忘了还可以回头看看</p><p>开发前的准备：</p><p>开发过程中的一点说明：</p><p>打包配置：</p><p>提测：</p><p>上线：</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;一年多没有更新博客 经历了 22 年上海三月到五月的封控，辞掉了之前的工作。六月解封之后就火速跑到了杭州，换了新的工作，一直到现在。&lt;/p&gt;
&lt;p&gt;近一年一直在做物联网 iot 工业互联网相关的事情&lt;br&gt;做了快一年的 app 多少也算是有一些收获，整理一下，也算是对这个项目的一个总结&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="ReactNative" scheme="https://wine1.github.io/tags/ReactNative/"/>
    
  </entry>
  
  <entry>
    <title>常见网络问题总结</title>
    <link href="https://wine1.github.io/2022/05/09/%E5%B8%B8%E8%A7%81%E7%BD%91%E7%BB%9C%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>https://wine1.github.io/2022/05/09/%E5%B8%B8%E8%A7%81%E7%BD%91%E7%BB%9C%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</id>
    <published>2022-05-09T02:08:11.000Z</published>
    <updated>2022-05-17T05:54:37.730Z</updated>
    
    <content type="html"><![CDATA[<p>搜集自网络的一些常见网络问题</p><span id="more"></span><ol><li><p>网络分层结构<br>应用层：为应用程序提供交互服务。<br>传输层：负责向两台主机进程之间的通信提供数据传输服务。传输层的协议主要有传输控制协议 TCP 和用户数据协议 UDP。<br>网络层：选择合适的路由和交换结点，确保数据及时传送。主要包括 IP 协议。<br>数据链路层：在两个相邻节点之间传送数据时，数据链路层将网络层交下来的 IP 数据报组装成帧，在两个相邻节点间的链路上传送帧。<br>物理层：实现相邻节点间比特流的透明传输，尽可能屏蔽传输介质和物理设备的差异。</p></li><li><p>三次握手</p><ol><li>服务端向客户端发送建立连接请求。客户端随机生成一个起始序列号 x,</li><li>服务端收到消息后向客户端发送确认连接请求</li><li></li></ol></li><li><p>两次握手可以吗？</p></li><li><p>四次挥手</p></li><li><p>第四次挥手为什么要等待 2MSL？</p></li><li><p>为什么是四次挥手？</p></li><li><p>TCP 有哪些特点？</p></li><li><p>TCP 和 UDP 的区别？</p></li><li><p>HTTP 协议的特点？</p></li><li><p>HTTP 报文格式</p></li><li><p>HTTP 状态码有哪些？</p></li><li><p>HTTP1.0 和 HTTP1.1 的区别?</p></li><li><p>HTTP1.1 和 HTTP2.0 的区别？</p></li><li><p>HTTPS 与 HTTP 的区别？</p></li><li><p>什么是数字证书？</p></li><li><p>HTTPS 原理</p></li><li><p>DNS 的解析过程？</p></li><li><p>浏览器中输入 URL 返回页面过程？</p></li><li><p>Cookie 和 Session 的区别？</p></li><li><p>什么是对称加密和非对称加密？</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;搜集自网络的一些常见网络问题&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="网络" scheme="https://wine1.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>封装axios</title>
    <link href="https://wine1.github.io/2022/04/13/%E5%B0%81%E8%A3%85axios/"/>
    <id>https://wine1.github.io/2022/04/13/%E5%B0%81%E8%A3%85axios/</id>
    <published>2022-04-13T05:21:21.000Z</published>
    <updated>2022-04-13T05:21:34.719Z</updated>
    
    
    
    
    
    <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>文件上传</title>
    <link href="https://wine1.github.io/2022/01/11/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <id>https://wine1.github.io/2022/01/11/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</id>
    <published>2022-01-11T03:02:40.000Z</published>
    <updated>2022-05-17T14:24:41.547Z</updated>
    
    <content type="html"><![CDATA[<p>react + node 实现文件上传</p><span id="more"></span><p>node 端接收并转存文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">static updateUserAvatar = async (ctx: any) =&gt; &#123;</span><br><span class="line">    const file = ctx.request.files.file || &#123;&#125;</span><br><span class="line">    let code = 0, data = &#123;&#125;, message = &#x27;&#x27;</span><br><span class="line">    if (file) &#123;</span><br><span class="line">        let filePath = path.join(__dirname, &#x27;../../&#x27;, &#x27;public/upload/&#x27;) + `/$&#123;file.name&#125;`;</span><br><span class="line">        // 创建可写流</span><br><span class="line">        const upStream = fs.createWriteStream(filePath);</span><br><span class="line">        const reader = fs.createReadStream(file.path)</span><br><span class="line">        // 可读流通过管道写入可写流</span><br><span class="line">        reader.pipe(upStream);</span><br><span class="line">        message = &quot;上传成功！&quot;;</span><br><span class="line">        data = &#123; path: `/public/upload/$&#123;file.name&#125;` &#125;</span><br><span class="line">        code = 1</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        message = &quot;上传图片失败！&quot;;</span><br><span class="line">        data = &#123;&#125;</span><br><span class="line">        code = 1</span><br><span class="line">    &#125;</span><br><span class="line">    ctx.body = &#123;</span><br><span class="line">        code,</span><br><span class="line">        data,</span><br><span class="line">        message</span><br><span class="line">    &#125;</span><br><span class="line">    return</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端有两种方案</p><ol><li>用 form 表单<br>form 上传 利用 form 表单的 enctype 属性可以把表单提交的对象设置为多媒体资源，然后通过 inuput:file 就可以实现文件上传的功能<br>这个方法相对便捷有效而且还不用考虑跨域的问题，毕竟我们上传的文件终究还是要访问 API 接口；不过这种方法还有一个不方便的地方，就是 form 表单会<strong>默认跳转也就是会在浏览器访问你所提交文件的那个接口</strong>，这个行为处理起来很麻烦。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;http://localhost:8088/api/user/updateUserAvatar&quot; method=&quot;post&quot; encType=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">  &lt;input type=&quot;file&quot; name=&quot;file&quot; value=&#x27;&#x27; onChange=&#123;(e: any) =&gt; handleFileChange(e)&#125; /&gt;</span><br><span class="line">  &lt;input type=&quot;submit&quot; value=&quot;提交&quot; /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>用 xhr 自己发送<br>自己发送时会遇到跨域问题，后端解决</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;input type=&quot;file&quot; name=&quot;file&quot; onChange=&#123;(e: any) =&gt; handleFileChange(e)&#125; /&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;提交&quot; onClick=&#123;submit&#125; /&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    const [fileValue, setFileValue] = useState(&#123;&#125;)</span><br><span class="line"></span><br><span class="line">    const handleFileChange = (e: any) =&gt; &#123;</span><br><span class="line">        const file = e.target.files</span><br><span class="line">        const data = new FormData()</span><br><span class="line">        data.append(&#x27;file&#x27;, file[0])</span><br><span class="line">        setFileValue(data)</span><br><span class="line">    &#125;</span><br><span class="line">    const submit = async () =&gt; &#123;</span><br><span class="line">        const res = await newApi.upload(&#123; data: fileValue &#125;)</span><br><span class="line">        console.log(111, res)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>node 端的跨域处理</p><ol><li>koa2-cors</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install koa2-cors --save</span><br><span class="line">const cors = require(&#x27;koa2-cors&#x27;);</span><br><span class="line">app.use(cors())</span><br></pre></td></tr></table></figure><ol start="2"><li>自己写一个中间件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">app.use(async (ctx: any, next: any) =&gt; &#123;</span><br><span class="line">  ctx.set(&#x27;Access-Control-Allow-Origin&#x27;, &#x27;*&#x27;);</span><br><span class="line">  ctx.set(&#x27;Access-Control-Allow-Headers&#x27;, &#x27;Content-Type, Content-Length, Authorization, Accept, X-Requested-With , yourHeaderFeild&#x27;);</span><br><span class="line">  ctx.set(&#x27;Access-Control-Allow-Methods&#x27;, &#x27;PUT, POST, GET, DELETE, OPTIONS&#x27;);</span><br><span class="line">  if (ctx.method == &#x27;OPTIONS&#x27;) &#123;</span><br><span class="line">    ctx.body = 200;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    await next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>关于登录鉴权</p><p>如果两种场景都有，怎么封装组件</p><p>大文件上传<br>断点续传<br>h h h h h h h h h h h<br>gy</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;react + node 实现文件上传&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>node项目中使用typescript</title>
    <link href="https://wine1.github.io/2021/12/10/node%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8typescript/"/>
    <id>https://wine1.github.io/2021/12/10/node%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8typescript/</id>
    <published>2021-12-10T10:43:43.000Z</published>
    <updated>2021-12-22T02:34:01.889Z</updated>
    
    <content type="html"><![CDATA[<p>写一个 node 项目，写着写着觉得 ts 在 node 的场景里应该会更加如鱼得水</p><span id="more"></span><p>首先安装一个 ts 如果没有装的话<br><code>npm install -g typescript</code></p><p>在项目下 执行 <code>tsc --init</code>以生成 tsconfig.json 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;compilerOptions&quot;: &#123;</span><br><span class="line">    // &quot;incremental&quot;: true,                   /* 增量编译 提高编译速度*/</span><br><span class="line">    &quot;target&quot;: &quot;ES2019&quot;,                       /* 编译目标ES版本*/</span><br><span class="line">    &quot;module&quot;: &quot;commonjs&quot;,                     /* 编译目标模块系统*/</span><br><span class="line">    // &quot;lib&quot;: [],                             /* 编译过程中需要引入的库文件列表*/</span><br><span class="line">    &quot;declaration&quot;: true,                      /* 编译时创建声明文件 */</span><br><span class="line">    &quot;outDir&quot;: &quot;dist&quot;,                         /* ts编译输出目录 */</span><br><span class="line">    &quot;rootDir&quot;: &quot;src&quot;,                         /* ts编译根目录. */</span><br><span class="line">    // &quot;importHelpers&quot;: true,                 /* 从tslib导入辅助工具函数(如__importDefault)*/</span><br><span class="line">    &quot;strict&quot;: true,                           /* 严格模式开关 等价于noImplicitAny、strictNullChecks、strictFunctionTypes、strictBindCallApply等设置true */</span><br><span class="line">    &quot;noUnusedLocals&quot;: true,                   /* 未使用局部变量报错*/</span><br><span class="line">    &quot;noUnusedParameters&quot;: true,               /* 未使用参数报错*/</span><br><span class="line">    &quot;noImplicitReturns&quot;: true,                /* 有代码路径没有返回值时报错*/</span><br><span class="line">    &quot;noFallthroughCasesInSwitch&quot;: true,       /* 不允许switch的case语句贯穿*/</span><br><span class="line">    &quot;moduleResolution&quot;: &quot;node&quot;,               /* 模块解析策略 */</span><br><span class="line">    &quot;typeRoots&quot;: [                            /* 要包含的类型声明文件路径列表*/</span><br><span class="line">      &quot;./typings&quot;,</span><br><span class="line">      &quot;./node_modules/@types&quot;</span><br><span class="line">      ],</span><br><span class="line">    &quot;allowSyntheticDefaultImports&quot;: false,    /* 允许从没有设置默认导出的模块中默认导入，仅用于提示，不影响编译结果*/</span><br><span class="line">    &quot;esModuleInterop&quot;: false,                /* 允许编译生成文件时，在代码中注入工具类(__importDefault、__importStar)对ESM与commonjs混用情况做兼容处理*/</span><br><span class="line">    &quot;watch&quot;:true                            /** 监听ts文件变化并自动更新 */</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;include&quot;: [                                /* 需要编译的文件 */</span><br><span class="line">    &quot;src/**/*.ts&quot;,</span><br><span class="line">    &quot;typings/**/*.ts&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;exclude&quot;: [                                /* 编译需要排除的文件 */</span><br><span class="line">    &quot;node_modules/**&quot;</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置文件注意点<br>“module”是用来指定设置编译后的 js 代码，使用何种模块规范。由于是开发 node.js 项目，所以选择 commonjs。(有兴趣的话，可以把所有 module 所有可能的值都试一遍，查看编译后的 js 文件的差别，会发现生成的代码还是很不错的，很干净。)</p><p>“target”是编译后的 js 代码遵循何种规范，可以是 es3/es5/es6 等等，这里为了对比 ts 2.0 代码和 es6 代码的不同，使用了”es6”。</p><p>“rootDir”是一个需要注意的地方，它会告诉编译器，此目录下的文件需要经过编译。那么，如果设置了这个选项，又在外部（比如根目录）放置了.ts 文件，会怎么样呢？tsc 会提示一条类似这样的错误：</p><p>生成.d.ts 文件<br>xx.d.ts 声明文件，来说明模块对外公开的方法和属性的类型以及内容。<br><code>npm install --save-dev @types/node</code></p><p>安装 nodemon 以及 ts-node 用于监控 指定目录 ts 代码的改动，改动后自动编译运行项目。<br>// 仅开发环境安装<br><code>npm install --save-dev nodemon</code> // nodemon 用来监视 node.js 应用程序中的任何更改并自动重启服务<br><code>npm install --save-dev ts-node</code> // ts-node 命令可直接执行 TypeScript 源文件而不需要预先编译</p><p>package.json<br>script 中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;start&quot;: &quot;nodemon ./index.ts&quot;,</span><br><span class="line">&quot;watch&quot;: &quot;tsc&quot; //tsconfig中配置 watch:true</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;写一个 node 项目，写着写着觉得 ts 在 node 的场景里应该会更加如鱼得水&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="工程化" scheme="https://wine1.github.io/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>react组件通信</title>
    <link href="https://wine1.github.io/2021/06/24/react%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/"/>
    <id>https://wine1.github.io/2021/06/24/react%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/</id>
    <published>2021-06-24T15:50:33.000Z</published>
    <updated>2021-06-24T15:57:11.782Z</updated>
    
    <content type="html"><![CDATA[<p>react中 props是不可更改的 所以在子组件中 想要更改父组件传进来的props 只能把它先赋值给state<br>例如</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">constructor(props) &#123;</span><br><span class="line">      super(props)</span><br><span class="line">      this.state= &#123;</span><br><span class="line">          stateList:this.props.list</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>然后就是要在父组件更新的时候 同步通知到子组件<br>网上搜到最多的就是<code>componentWillReceiveProps</code>这个钩子函数<br>目前还是能用 但是官方文档已经建议废弃这个用法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">componentWillReceiveProps(props) &#123;</span><br><span class="line">   this.setState(&#123;</span><br><span class="line">    stateList:props.list</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>转而使用这个方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">static getDerivedStateFromProps(nextProps,preState) &#123;</span><br><span class="line">    console.log(nextProps,preState)</span><br><span class="line">    if(nextProps.list!==preState.stateList) &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            stateList:[...nextProps.list]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return null</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;react中 props是不可更改的 所以在子组件中 想要更改父组件传进来的props 只能把它先赋值给state&lt;br&gt;例如&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="react" scheme="https://wine1.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>用createReactApp创建项目之后的配置</title>
    <link href="https://wine1.github.io/2021/06/03/%E7%94%A8createReactApp%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E4%B9%8B%E5%90%8E%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
    <id>https://wine1.github.io/2021/06/03/%E7%94%A8createReactApp%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E4%B9%8B%E5%90%8E%E7%9A%84%E9%85%8D%E7%BD%AE/</id>
    <published>2021-06-03T11:09:16.000Z</published>
    <updated>2021-06-03T11:19:17.343Z</updated>
    
    <content type="html"><![CDATA[<p>在用<a href="https://github.com/facebook/create-react-app">create-react-app</a>创建一个新的react项目之后<br>会发现package.json里面没有webpack 这是因为 用这个脚手架创建的项目 webpack相关配置都被集成在 react-scripts中了<br>脚手架本身提供了 ejest 来把webpack相关配置暴露出来 但是这个过程是不可逆的 弹出配置后，你将无法跟随官方的脚步去升级项目的 react-script 版本 谨慎操作 反正我没操作<br>如果我们想自己加一些配置 可以通过craco实现</p><span id="more"></span><ol><li><p>安装包<br><code>yarn add @craco/craco</code></p></li><li><p>项目根目录创建 craco.config.js 文件</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/* craco.config.js */</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改 package.json 的 scripts 命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/* package.json */</span><br><span class="line"></span><br><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">-   &quot;start&quot;: &quot;react-scripts start&quot;,</span><br><span class="line">+   &quot;start&quot;: &quot;craco start&quot;,</span><br><span class="line">-   &quot;build&quot;: &quot;react-scripts build&quot;,</span><br><span class="line">+   &quot;build&quot;: &quot;craco build&quot;</span><br><span class="line">-   &quot;test&quot;: &quot;react-scripts test&quot;,</span><br><span class="line">+   &quot;test&quot;: &quot;craco test&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;在用&lt;a href=&quot;https://github.com/facebook/create-react-app&quot;&gt;create-react-app&lt;/a&gt;创建一个新的react项目之后&lt;br&gt;会发现package.json里面没有webpack 这是因为 用这个脚手架创建的项目 webpack相关配置都被集成在 react-scripts中了&lt;br&gt;脚手架本身提供了 ejest 来把webpack相关配置暴露出来 但是这个过程是不可逆的 弹出配置后，你将无法跟随官方的脚步去升级项目的 react-script 版本 谨慎操作 反正我没操作&lt;br&gt;如果我们想自己加一些配置 可以通过craco实现&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="工程化" scheme="https://wine1.github.io/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>webpack多文件打包</title>
    <link href="https://wine1.github.io/2021/05/27/webpack%E5%A4%9A%E6%96%87%E4%BB%B6%E6%89%93%E5%8C%85/"/>
    <id>https://wine1.github.io/2021/05/27/webpack%E5%A4%9A%E6%96%87%E4%BB%B6%E6%89%93%E5%8C%85/</id>
    <published>2021-05-27T07:51:13.000Z</published>
    <updated>2022-01-13T08:21:58.288Z</updated>
    
    <content type="html"><![CDATA[<p>webpack 多文件打包系统的配置</p><span id="more"></span><p><img src="/2021/05/27/webpack%E5%A4%9A%E6%96%87%E4%BB%B6%E6%89%93%E5%8C%85/tu1.png" alt="tu1"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">   new CleanWebpackPlugin(),</span><br><span class="line">   new HtmlWebpackPlugin(&#123;</span><br><span class="line">     title: &#x27;test1&#x27;,</span><br><span class="line">     template: path.resolve(__dirname, &#x27;./public/index.html&#x27;),</span><br><span class="line">     chunks: [</span><br><span class="line">       &#x27;page1&#x27;,</span><br><span class="line">     ] /** HtmlWebpackPlugin一定要配chunks，否则所有页面的js都会被注入到当前html里 */,</span><br><span class="line">     filename: &#x27;page1.html&#x27;,</span><br><span class="line">   &#125;),</span><br><span class="line">   new HtmlWebpackPlugin(&#123;</span><br><span class="line">     title: &#x27;test2&#x27;,</span><br><span class="line">     template: path.resolve(__dirname, &#x27;./public/index.html&#x27;),</span><br><span class="line">     chunks: [&#x27;page2&#x27;],</span><br><span class="line">     filename: &#x27;page2.html&#x27;,</span><br><span class="line">   &#125;),</span><br><span class="line">   new MiniCssExtractPlugin(&#123;</span><br><span class="line">     filename: &#x27;[name]/css/[name].[contenthash].css&#x27;,</span><br><span class="line">     chunkFilename: &#x27;[name]/css/[id].[contenthash].css&#x27;,</span><br><span class="line">   &#125;),</span><br><span class="line"> ]</span><br></pre></td></tr></table></figure><p><img src="/2021/05/27/webpack%E5%A4%9A%E6%96%87%E4%BB%B6%E6%89%93%E5%8C%85/tu2.png" alt="tu2"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">   path: path.resolve(__dirname, &#x27;./dist&#x27;),</span><br><span class="line">   filename: &#x27;[name]/js/[name][chunkhash].bundle.js&#x27;,</span><br><span class="line">   chunkFilename: &#x27;[name]/js/[name][chunkhash].bundle.js&#x27;,</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><p>打包结果<br><img src="/2021/05/27/webpack%E5%A4%9A%E6%96%87%E4%BB%B6%E6%89%93%E5%8C%85/tu3.png" alt="tu3"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;webpack 多文件打包系统的配置&lt;/p&gt;</summary>
    
    
    
    
    <category term="工程化" scheme="https://wine1.github.io/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>自己搞一个npm包</title>
    <link href="https://wine1.github.io/2021/05/18/%E8%87%AA%E5%B7%B1%E6%90%9E%E4%B8%80%E4%B8%AAnpm%E5%8C%85/"/>
    <id>https://wine1.github.io/2021/05/18/%E8%87%AA%E5%B7%B1%E6%90%9E%E4%B8%80%E4%B8%AAnpm%E5%8C%85/</id>
    <published>2021-05-18T02:59:26.000Z</published>
    <updated>2021-05-18T05:56:00.617Z</updated>
    
    <content type="html"><![CDATA[<p>搞一个npm包给其他业务部门使用 过程中还是有许多问题的<br>主要是 在测试过程中频繁发布npm包 以及版本迭代太快 业务部门更新不及时</p><span id="more"></span><p>npm打包基础<br>注册一个npm账号<br>npm login<br>npm publish</p><p>打包工具<br>rollup </p><p>打包发布配置<br><a href="https://wine1.github.io/2021/04/25/%E5%8F%91%E5%B8%83%E4%B8%80%E4%B8%AAnpm%E5%8C%85/#more">详见另一个文章</a></p><p>测试方法<br>之前真机测试只要发布测试环境即可，但是现在要先发布npm包，安装npm包，然后再发布测试环境，从一个步骤变成了三个步骤。<br>npm link</p><blockquote><p>npm link可以让项目和要使用的npm包之间建立符号连接。</p></blockquote><p>换句话说，如果在项目A中使用组件包B，之前要把B打包并发布，然后项目A安装B，打包并发布测试环境才能验证，现在只需要B打包一下，A直接打包并发布测试环境即可（A打包时获取的是B在本地的打包文件, 即写在B package.json中的main文件）</p><blockquote><p>而要使用npm link, 要做到如下几步：<br>在B包里：<br>npm link // 相当于npm install B -g<br>在A包里：<br>npm link B // 代码无需修改，package.json中引用B的包会自动指向本地B的打包文件<br>A包发布测试环境测试</p></blockquote><p>版本管理<br>tag</p><blockquote><p>tag可以用来指带版本号，用户可以使用npm install <name>@<tag>安装</tag></name></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;搞一个npm包给其他业务部门使用 过程中还是有许多问题的&lt;br&gt;主要是 在测试过程中频繁发布npm包 以及版本迭代太快 业务部门更新不及时&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="工程化" scheme="https://wine1.github.io/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>小程序同层渲染那些坑</title>
    <link href="https://wine1.github.io/2021/05/14/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%90%8C%E5%B1%82%E6%B8%B2%E6%9F%93%E9%82%A3%E4%BA%9B%E5%9D%91/"/>
    <id>https://wine1.github.io/2021/05/14/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%90%8C%E5%B1%82%E6%B8%B2%E6%9F%93%E9%82%A3%E4%BA%9B%E5%9D%91/</id>
    <published>2021-05-14T09:54:07.000Z</published>
    <updated>2021-05-14T11:54:24.570Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p><code>&lt;textarea&gt; &lt;input&gt;</code> 组件的placeholder穿透问题<br>textarea input 上方有元素时 组件输入的内容显示在所有布局的最上面</p><span id="more"></span><p> 解决方案</p><ul><li>input textarea上方元素弹起时 将输入框的内容暂时替换为’’  </li><li>将整个输入框隐藏</li><li>用view标签模拟<code>&lt;textarea&gt;</code>组件，来避免<code>&lt;textarea&gt;</code>组件的placeholder穿透问题</li></ul></li><li><p>live-player组件「同层渲染」失败问题</p></li><li><p>canvas组件「同层渲染」<br>微信小程序从基础库1.0.0开始支持 canvas，2.9.0 起支持一套新 Canvas 2D 接口（需指定 type 属性），同时支持同层渲染，原有接口不再维护<br>canvas的层级最高 会穿透</p></li><li><p>原生组件」无法在 scroll-view、swiper、picker-view、movable-view 中使用，因为如果开发者在可滚动的 DOM 区域，插入「原生组件」作为其子节点，由于「原生组件」是直接插入到 webview 外部的层级，与 DOM 之间没有关联，所以不会跟随移动也不会被裁减。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;textarea&amp;gt; &amp;lt;input&amp;gt;&lt;/code&gt; 组件的placeholder穿透问题&lt;br&gt;textarea input 上方有元素时 组件输入的内容显示在所有布局的最上面&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="小程序" scheme="https://wine1.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>发布一个npm包</title>
    <link href="https://wine1.github.io/2021/04/25/%E5%8F%91%E5%B8%83%E4%B8%80%E4%B8%AAnpm%E5%8C%85/"/>
    <id>https://wine1.github.io/2021/04/25/%E5%8F%91%E5%B8%83%E4%B8%80%E4%B8%AAnpm%E5%8C%85/</id>
    <published>2021-04-25T11:54:24.000Z</published>
    <updated>2021-04-25T12:11:19.177Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做一个项目，做sdk给其他业务部门用<br>通过发到内部的npm库 来给大家用</p><span id="more"></span><p>开始是把打包出来的dist文件拷贝出来单独新建一个文件夹发布到npm<br>但是这样就存在很多问题<br>那么如何过滤 npm publish 的文件<br>下面会介绍两种方法</p><ol><li>.npmignore </li><li>在package.json中添加files:[] 如 <code>&quot;files&quot;: [&quot;dist/types&quot;,&quot;dist/index.es5.js&quot;,&quot;dist/index.umd.js&quot;],</code><br>第一个方法和gitignore类似 npm发布时忽略掉配置中的文件<br>第二个方法则相反 只发布配置中的文件</li></ol><p>如果发错了 或者想删掉测试用的包<br>执行命令 <code>npm unpublish xxx --force</code></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在做一个项目，做sdk给其他业务部门用&lt;br&gt;通过发到内部的npm库 来给大家用&lt;/p&gt;</summary>
    
    
    
    
    <category term="工程化" scheme="https://wine1.github.io/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>三栏布局总结</title>
    <link href="https://wine1.github.io/2021/04/24/%E4%B8%89%E6%A0%8F%E5%B8%83%E5%B1%80%E6%80%BB%E7%BB%93/"/>
    <id>https://wine1.github.io/2021/04/24/%E4%B8%89%E6%A0%8F%E5%B8%83%E5%B1%80%E6%80%BB%E7%BB%93/</id>
    <published>2021-04-24T02:10:23.000Z</published>
    <updated>2021-04-24T03:40:30.752Z</updated>
    
    <content type="html"><![CDATA[<p>17年写过<a href="https://wine1.github.io/2017/12/01/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80%E5%92%8C%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80/">圣杯布局和双飞翼布局</a>，时间一长没写过pc端吧 又忘却了<br>整理下三栏布局方案</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">    &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;main&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">.left &#123;</span><br><span class="line">    float: left;</span><br><span class="line">    height: 200px;</span><br><span class="line">    width: 100px;</span><br><span class="line">    background-color: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> .right &#123;</span><br><span class="line">    float: right;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 200px;</span><br><span class="line">    background-color: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.main &#123;</span><br><span class="line">    margin-left: 100px;</span><br><span class="line">    margin-right: 200px;</span><br><span class="line">    /* overflow: hidden; </span><br><span class="line">    或者用overflow代替上面的margin 通过bfc清除浮动*/</span><br><span class="line">    height: 200px;</span><br><span class="line">    background-color: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.flex布局</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;main&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .container &#123;</span><br><span class="line">        display: flex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .main &#123;</span><br><span class="line">        flex-grow: 1;</span><br><span class="line">        height: 300px;</span><br><span class="line">        background-color: red;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .left &#123;</span><br><span class="line">        order: -1;</span><br><span class="line">        flex: 0 1 100px;</span><br><span class="line">        height: 300px;</span><br><span class="line">        background-color: blue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .right &#123;</span><br><span class="line">        flex: 0 1 100px;</span><br><span class="line">        height: 300px;</span><br><span class="line">        background-color: green;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>flex属性是flex-grow, flex-shrink 和 flex-basis的简写<br>flex-grow：flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大<br>flex-shrink：flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。<br>flex-basis：属性定义了在分配多余空间之前，项目占据的主轴空间（main size）</p><p>3.圣杯布局<br>负边距</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"> &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;main&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .container &#123;</span><br><span class="line">    margin-left: 100px;</span><br><span class="line">    margin-right: 100px;</span><br><span class="line">&#125;</span><br><span class="line">.main &#123;</span><br><span class="line">    float: left;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 300px;</span><br><span class="line">    background-color: red;</span><br><span class="line">&#125;</span><br><span class="line">.left &#123;</span><br><span class="line">    float: left;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 300px;</span><br><span class="line">    margin-left: -100%;</span><br><span class="line">    position: relative;</span><br><span class="line">    left: -100px;</span><br><span class="line">    background-color: blue;</span><br><span class="line">&#125;</span><br><span class="line">.right &#123;</span><br><span class="line">    float: left;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 300px;</span><br><span class="line">    margin-left: -100px;</span><br><span class="line">    position: relative;</span><br><span class="line">    right: -100px;</span><br><span class="line">    background-color: green;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>4.双飞翼布局</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;content&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;main&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;left&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;right&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .content &#123;</span><br><span class="line">        float: left;</span><br><span class="line">        width: 100%;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .main &#123;</span><br><span class="line">        height: 200px;</span><br><span class="line">        margin-left: 100px;</span><br><span class="line">        margin-right: 100px;</span><br><span class="line">        background-color: green;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .left &#123;</span><br><span class="line">        float: left;</span><br><span class="line">        height: 200px;</span><br><span class="line">        width: 100px;</span><br><span class="line">        margin-left: -100%;</span><br><span class="line">        background-color: red;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .right &#123;</span><br><span class="line">        width: 100px;</span><br><span class="line">        height: 200px;</span><br><span class="line">        float: right;</span><br><span class="line">        margin-left: -100px;</span><br><span class="line">        background-color: blue;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>5.绝对定位布局</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;17年写过&lt;a href=&quot;https://wine1.github.io/2017/12/01/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80%E5%92%8C%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80/&quot;&gt;圣杯布局和双飞翼布局&lt;/a&gt;，时间一长没写过pc端吧 又忘却了&lt;br&gt;整理下三栏布局方案&lt;/p&gt;</summary>
    
    
    
    
    <category term="css" scheme="https://wine1.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>原型和原型链</title>
    <link href="https://wine1.github.io/2021/04/17/%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <id>https://wine1.github.io/2021/04/17/%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/</id>
    <published>2021-04-17T15:41:09.000Z</published>
    <updated>2021-04-17T15:46:55.763Z</updated>
    
    <content type="html"><![CDATA[<p>解析原型和原型链</p><span id="more"></span><p><img src="/2021/04/17/%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/prototype.jpg"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;解析原型和原型链&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>网络之option</title>
    <link href="https://wine1.github.io/2021/04/17/%E7%BD%91%E7%BB%9C%E4%B9%8Boption/"/>
    <id>https://wine1.github.io/2021/04/17/%E7%BD%91%E7%BB%9C%E4%B9%8Boption/</id>
    <published>2021-04-17T01:04:12.000Z</published>
    <updated>2021-04-17T01:53:16.002Z</updated>
    
    <content type="html"><![CDATA[<p>MDN的CORS一文中提到：<br>规范要求，对那些可能对服务器数据产生副作用的 HTTP 请求方法（特别是 GET 以外的 HTTP 请求，或者搭配某些 MIME 类型的 POST 请求），浏览器必须首先使用 OPTIONS 方法发起一个预检请求（preflight request），从而获知服务端是否允许该跨域请求。</p><span id="more"></span><p>某些请求不会触发 CORS 预检请求，这样的请求一般称为”简单请求”,而会触发预检的请求则称为”复杂请求”。</p><p>简单请求：<br>简单请求的 HTTP 方法只能是 GET、HEAD 或 POST<br>简单请求的 HTTP 头只能是 Accept/Accept-Language/Conent-Language/Content-Type 等<br>简单请求的 Content-Type 头只能是 text/plain、multipart/form-data 或 application/x-www-form-urlencoded</p><h3 id="CORS预检请求触发条件"><a href="#CORS预检请求触发条件" class="headerlink" title="CORS预检请求触发条件"></a>CORS预检请求触发条件</h3><ol><li>使用了下面任一HTTP 方法：     <br>PUT/DELETE/CONNECT/OPTIONS/TRACE/PATCH     </li><li>人为设置了以下集合之外首部字段：     <br>Accept/Accept-Language/Content-Language/Content-Type/DPR/Downlink/Save-Data/Viewport-Width/Width     </li><li>Content-Type 的值不属于下列之一:     <br>application/x-www-form-urlencoded、multipart/form-data、text/plain</li></ol><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>当我们发起跨域请求时，如果是简单请求，那么我们只会发出一次请求，但是如果是复杂请求则先发出 options 请求，用于确认目标资源是否支持跨域，然后浏览器会根据服务端响应的 header 自动处理剩余的请求，如果响应支持跨域，则继续发出正常请求，如果不支持，则在控制台显示错误。</p><p>由此可见，当触发预检时，跨域请求便会发送 2 次请求，既增加了请求数，也延迟了请求真正发起的时间，严重影响性能。</p><p>所以，我们可以优化 Options 请求，主要有 2 种方法。</p><p>转为简单请求，如用 JSONP 做跨域请求<br>对 options 请求进行缓存，服务器端设置 Access-Control-Max-Age 字段，那么当第一次请求该 URL 时会发出 OPTIONS 请求，浏览器会根据返回的 Access-Control-Max-Age 字段缓存该请求的 OPTIONS 预检请求的响应结果（具体缓存时间还取决于浏览器的支持的默认最大值，取两者最小值，一般为 10 分钟）。在缓存有效期内，该资源的请求（URL 和 header 字段都相同的情况下）不会再触发预检。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;MDN的CORS一文中提到：&lt;br&gt;规范要求，对那些可能对服务器数据产生副作用的 HTTP 请求方法（特别是 GET 以外的 HTTP 请求，或者搭配某些 MIME 类型的 POST 请求），浏览器必须首先使用 OPTIONS 方法发起一个预检请求（preflight request），从而获知服务端是否允许该跨域请求。&lt;/p&gt;</summary>
    
    
    
    
    <category term="网络" scheme="https://wine1.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>BFS和DFS</title>
    <link href="https://wine1.github.io/2021/04/03/BFS%E5%92%8CDFS/"/>
    <id>https://wine1.github.io/2021/04/03/BFS%E5%92%8CDFS/</id>
    <published>2021-04-03T11:30:49.000Z</published>
    <updated>2021-04-24T03:41:47.258Z</updated>
    
    <content type="html"><![CDATA[<p>DFS算法和BFS算法<br><a href="https://wine1.github.io/2020/06/12/%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/">BFS</a></p><span id="more"></span><p>递归实现dfs<br>简单的二叉树dfs<br><a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal/">https://leetcode-cn.com/problems/binary-tree-preorder-traversal/</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var preorderTraversal = function (root) &#123;</span><br><span class="line">  let res = [];</span><br><span class="line">  if (!root) &#123;</span><br><span class="line">    res = [];</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    const dfs = function (node) &#123;</span><br><span class="line">      // console.log(node);</span><br><span class="line">      if (!node) return;</span><br><span class="line">      res.push(node.val);</span><br><span class="line">      dfs(node.left);</span><br><span class="line">      dfs(node.right);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    dfs(root);</span><br><span class="line">  &#125;</span><br><span class="line">  return res;</span><br><span class="line">&#125;;</span><br><span class="line">console.log(preorderTraversal([1, null, 2, 3]));</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;DFS算法和BFS算法&lt;br&gt;&lt;a href=&quot;https://wine1.github.io/2020/06/12/%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/&quot;&gt;BFS&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="数据结构" scheme="https://wine1.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>跨域</title>
    <link href="https://wine1.github.io/2021/03/03/%E8%B7%A8%E5%9F%9F/"/>
    <id>https://wine1.github.io/2021/03/03/%E8%B7%A8%E5%9F%9F/</id>
    <published>2021-03-03T14:26:23.000Z</published>
    <updated>2021-03-03T14:28:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>谷歌浏览器中Response中set-cookie无效<br><a href="https://blog.csdn.net/Ych_cxy/article/details/107673208">https://blog.csdn.net/Ych_cxy/article/details/107673208</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;谷歌浏览器中Response中set-cookie无效&lt;br&gt;&lt;a href=&quot;https://blog.csdn.net/Ych_cxy/article/details/107673208&quot;&gt;https://blog.csdn.net/Ych_cxy/article/de</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>js的宏任务和微任务</title>
    <link href="https://wine1.github.io/2020/09/23/js%E7%9A%84%E5%AE%8F%E4%BB%BB%E5%8A%A1%E5%92%8C%E5%BE%AE%E4%BB%BB%E5%8A%A1/"/>
    <id>https://wine1.github.io/2020/09/23/js%E7%9A%84%E5%AE%8F%E4%BB%BB%E5%8A%A1%E5%92%8C%E5%BE%AE%E4%BB%BB%E5%8A%A1/</id>
    <published>2020-09-23T14:45:29.000Z</published>
    <updated>2020-09-23T14:56:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>.宏任务（macrotask ）和微任务（microtask ）</p><p>macrotask 和 microtask 表示异步任务的两种分类。</p><p>在挂起任务时，JS 引擎会将所有任务按照类别分到这两个队列中，首先在 macrotask 的队列（这个队列也被叫做 task queue）中取出第一个任务，执行完毕后取出 microtask 队列中的所有任务顺序执行；之后再取 macrotask 任务，周而复始，直至两个队列的任务都取完。</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">    //执行后 回调一个宏事件</span><br><span class="line">    console.log(&#x27;内层宏事件3&#x27;)</span><br><span class="line">&#125;, 0)</span><br><span class="line">console.log(&#x27;外层宏事件1&#x27;);</span><br><span class="line"></span><br><span class="line">new Promise((resolve) =&gt; &#123;</span><br><span class="line">    console.log(&#x27;外层宏事件2&#x27;);</span><br><span class="line">    resolve()</span><br><span class="line">&#125;).then(() =&gt; &#123;</span><br><span class="line">    console.log(&#x27;微事件1&#x27;);</span><br><span class="line">&#125;).then(()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;微事件2&#x27;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>打印结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">外层宏事件1</span><br><span class="line">外层宏事件2</span><br><span class="line">微事件1</span><br><span class="line">微事件2</span><br><span class="line">内层宏事件3</span><br></pre></td></tr></table></figure><p>宏任务 setTimeOut setInterval<br>微任务 nextTick promise<br>先执行微任务 再执行宏任务</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;.宏任务（macrotask ）和微任务（microtask ）&lt;/p&gt;
&lt;p&gt;macrotask 和 microtask 表示异步任务的两种分类。&lt;/p&gt;
&lt;p&gt;在挂起任务时，JS 引擎会将所有任务按照类别分到这两个队列中，首先在 macrotask 的队列（这个队列也被叫做 task queue）中取出第一个任务，执行完毕后取出 microtask 队列中的所有任务顺序执行；之后再取 macrotask 任务，周而复始，直至两个队列的任务都取完。&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>封装一个组件</title>
    <link href="https://wine1.github.io/2020/09/13/%E5%B0%81%E8%A3%85%E4%B8%80%E4%B8%AA%E7%BB%84%E4%BB%B6/"/>
    <id>https://wine1.github.io/2020/09/13/%E5%B0%81%E8%A3%85%E4%B8%80%E4%B8%AA%E7%BB%84%E4%BB%B6/</id>
    <published>2020-09-13T11:42:52.000Z</published>
    <updated>2021-01-16T14:43:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>自己封装一个组件</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;</span><br><span class="line">    &lt;title&gt;diago&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;./diago.css&quot; /&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;button id=&quot;showDiago&quot;&gt;点击打开弹窗&lt;/button&gt;</span><br><span class="line">    &lt;script src=&quot;./diago.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      document.getElementById(&quot;showDiago&quot;).addEventListener(&#x27;click&#x27;, function(e) &#123;</span><br><span class="line">        dialog.show(&#123;</span><br><span class="line">          title: &quot;biaoti&quot;,</span><br><span class="line">          content: &quot;抱歉，该游戏暂无Android版本&quot;,</span><br><span class="line">          cancel: function() &#123;</span><br><span class="line">            console.log(111);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">var dialog = (function() &#123;</span><br><span class="line">  var elem, dialog, cancelBtn, confirmBtn;</span><br><span class="line">  /**</span><br><span class="line">   * @method getNeedElement 获取所需要的节点</span><br><span class="line">   */</span><br><span class="line">  var getNeedElement = function() &#123;</span><br><span class="line">    elem = document.querySelector(&quot;.dialog-wrapper&quot;);</span><br><span class="line">    dialog = document.querySelector(&quot;.dialog&quot;);</span><br><span class="line">    cancelBtn = document.querySelector(&quot;.cancel-btn&quot;);</span><br><span class="line">    confirmBtn = document.querySelector(&quot;.confirm-btn&quot;);</span><br><span class="line">  &#125;;</span><br><span class="line">  /**</span><br><span class="line">   * @method show 打开dialog组件</span><br><span class="line">   */</span><br><span class="line">  var show = function(options = &#123;&#125;) &#123;</span><br><span class="line">    let &#123;</span><br><span class="line">      title = &quot;&quot;,</span><br><span class="line">      content = &quot;默认content&quot;,</span><br><span class="line">      btns = [&quot;确定&quot;, &quot;取消&quot;],</span><br><span class="line">      confirm = null,</span><br><span class="line">      cancel = null</span><br><span class="line">    &#125; = options;</span><br><span class="line">    let btnTemp = &quot;&quot;;</span><br><span class="line">    btns.forEach((item, index) =&gt; &#123;</span><br><span class="line">      if (index == 2) return;</span><br><span class="line">      let btnClass = index == 0 ? &quot;confirm-btn&quot; : &quot;cancel-btn&quot;;</span><br><span class="line">      let temp = `&lt;div class=&quot;btn $&#123;btnClass&#125;&quot;&gt;$&#123;item&#125;&lt;/div&gt;`;</span><br><span class="line">      btnTemp += temp;</span><br><span class="line">    &#125;);</span><br><span class="line">    let html = `&lt;div class=&quot;dialog-wrapper&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;dialog&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;title&quot;&gt;$&#123;title&#125;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;content&quot;&gt;$&#123;content&#125;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;buttons&quot;&gt;$&#123;btnTemp&#125;&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;`; // 添加到Body</span><br><span class="line">    document.body.innerHTML += html;</span><br><span class="line">    getNeedElement();</span><br><span class="line">    bindEvent(confirm, cancel);</span><br><span class="line">    return elem;</span><br><span class="line">  &#125;;</span><br><span class="line">  /**</span><br><span class="line">   * @method hide 关闭dialog组件</span><br><span class="line">   */</span><br><span class="line">  var hide = function() &#123;</span><br><span class="line">    elem.remove(elem);</span><br><span class="line">    // elem.parentNode.removeChild(elem);</span><br><span class="line">  &#125;;</span><br><span class="line">  /**</span><br><span class="line">   * @method bindEvent 给dialog绑定事件</span><br><span class="line">   * @param &#123;Object&#125; confirm 确认回调</span><br><span class="line">   * @param &#123;Object&#125; cancel 取消回调</span><br><span class="line">   */</span><br><span class="line">  var bindEvent = function(confirm, cancel) &#123;</span><br><span class="line">    confirmBtn &amp;&amp;</span><br><span class="line">      confirmBtn.addEventListener(&quot;click&quot;, e =&gt; &#123;</span><br><span class="line">        hide();</span><br><span class="line">        confirm &amp;&amp; confirm();</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">    cancelBtn &amp;&amp;</span><br><span class="line">      cancelBtn.addEventListener(&quot;click&quot;, e =&gt; &#123;</span><br><span class="line">        hide();</span><br><span class="line">        cancel &amp;&amp; cancel();</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  return &#123; show, hide &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">body,html &#123;  font-family: -apple-system, BlinkMacSystemFont, &#x27;Segoe UI&#x27;, Roboto, Oxygen, Ubuntu, Cantarell, &#x27;Open Sans&#x27;, &#x27;Helvetica Neue&#x27;, sans-serif;</span><br><span class="line">&#125;.dialog-wrapper &#123;  position: fixed;  display: flex;  justify-content: center;  align-items: center;  top: 0;  left: 0;  width: 100vw;  height: 100vh;  background-color: rgba(49, 49, 49, 0.5);  color: #313131;  font-size: 10px;  -webkit-tap-highlight-color: transparent;</span><br><span class="line">&#125;.dialog-wrapper.fadeIn &#123;  animation: fadeIn .2s ease;</span><br><span class="line">&#125;.dialog-wrapper.fadeOut &#123;  animation: fadeOut .2s ease forwards;</span><br><span class="line">&#125;.dialog-wrapper .dialog &#123;  position: relative;  width: 85vw;  max-width: 30em;  border-radius: .4em;  background-color: #fff;  box-sizing: border-box;  overflow: hidden;  box-shadow: 0 0 10px 1px rgba(0, 0, 0, 0.1);</span><br><span class="line">&#125;.dialog-wrapper .dialog.slideDown &#123;  animation: slideDown .2s ease;</span><br><span class="line">&#125;.dialog-wrapper .dialog.slideUp &#123;  animation: slideUp .2s ease forwards;</span><br><span class="line">&#125;.dialog-wrapper .dialog.scaleIn &#123;  animation: scaleIn 0.2s cubic-bezier(0.07, 0.89, 0.95, 1.4);</span><br><span class="line">&#125;.dialog-wrapper .dialog.scaleOut &#123;  animation: scaleOut 0.2s cubic-bezier(0.07, 0.89, 0.95, 1.4) forwards;</span><br><span class="line">&#125;.dialog-wrapper .dialog .btn &#123;  cursor: pointer;</span><br><span class="line">&#125;.dialog-wrapper .dialog .btn:active &#123;  background-color: #f4f4f4;</span><br><span class="line">&#125;.dialog-wrapper .dialog .close-btn &#123;  position: absolute;  top: 0;  right: 0;  padding: 10px;  font-size: 1.8em;</span><br><span class="line">&#125;.dialog-wrapper .dialog .title &#123;  font-size: 1.8em;  padding: 15px;  text-align: center;  background-color: #f4f4f4;</span><br><span class="line">&#125;.dialog-wrapper .dialog .title:empty &#123;  display: none;</span><br><span class="line">&#125;.dialog-wrapper .dialog .content &#123;  padding: 40px 20px;  font-size: 1.6em;  text-align: center;</span><br><span class="line">&#125;.dialog-wrapper .dialog .buttons &#123;  font-size: 1.6em;  display: flex;  flex-flow: row-reverse;</span><br><span class="line">&#125;.dialog-wrapper .dialog .buttons .btn &#123;  flex: 1;  padding: 15px;  text-align: center;  border-top: 1px solid #ebebeb;</span><br><span class="line">&#125;.dialog-wrapper .dialog .buttons .btn.confirm-btn &#123;  color: #f2d985;</span><br><span class="line">&#125;.dialog-wrapper .dialog .buttons .btn.cancel-btn &#123;  color: #313131;  border-right: 1px solid #ebebeb;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@keyframes slideDown &#123;  from &#123;    transform: translateY(-3em);</span><br><span class="line">  &#125;  to &#123;    transform: translateY(0);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@keyframes slideUp &#123;  from &#123;    transform: translateY(0);</span><br><span class="line">  &#125;  to &#123;    transform: translateY(-3em);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@keyframes fadeIn &#123;  from &#123;    opacity: .5;</span><br><span class="line">  &#125;  to &#123;    opacity: 1;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@keyframes fadeOut &#123;  from &#123;    opacity: 1;</span><br><span class="line">  &#125;  to &#123;    opacity: 0;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@keyframes scaleIn &#123;  from &#123;    transform: scale(0.8);</span><br><span class="line">  &#125;  to &#123;    transform: scale(1);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@keyframes scaleOut &#123;  from &#123;    transform: scale(1);</span><br><span class="line">  &#125;  to &#123;    transform: scale(0.8);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;自己封装一个组件&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>js中的防抖和节流</title>
    <link href="https://wine1.github.io/2020/08/25/js%E4%B8%AD%E7%9A%84%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/"/>
    <id>https://wine1.github.io/2020/08/25/js%E4%B8%AD%E7%9A%84%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</id>
    <published>2020-08-25T15:16:15.000Z</published>
    <updated>2021-05-18T23:34:38.134Z</updated>
    
    <content type="html"><![CDATA[<p>防抖和节流的原理和代码</p><span id="more"></span><p>debounce，去抖动。策略是当事件被触发时，设定一个周期延迟执行动作，若期间又被触发，则重新设定周期，直到周期结束，执行动作。 这是debounce的基本思想，在后期又扩展了前缘debounce，即执行动作在前，然后设定周期，周期内有事件被触发，不执行动作，且周期重新设定。</p><p>throttling，节流的策略是，固定周期内，只执行一次动作，若有新事件触发，不执行。周期结束后，又有事件触发，开始新的周期。 节流策略也分前缘和延迟两种。与debounce类似，延迟是指 周期结束后执行动作，前缘是指执行动作后再开始周期。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">/**防抖 一段时间内重复触发则清除定时器重新开始计时 */</span><br><span class="line">function debounce(fn,n) &#123;</span><br><span class="line">    let timer = null</span><br><span class="line">    return function (args) &#123;</span><br><span class="line">        let that = this</span><br><span class="line">        timer &amp;&amp; clearTimeout(timer)</span><br><span class="line">        timer = setTimeout(function () &#123;</span><br><span class="line">            fn.call(that, args)</span><br><span class="line">        &#125;, n)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**节流 第一次点击执行后一段时间内再次触发不执行 直到计时结束才可以再次被触发 */</span><br><span class="line">const throttling = function (fn, delay) &#123;</span><br><span class="line">    var timer = null;</span><br><span class="line">    if (!delay) &#123;</span><br><span class="line">        delay = 1000</span><br><span class="line">    &#125;</span><br><span class="line">    return function () &#123;</span><br><span class="line">        var context = this;</span><br><span class="line">        var args = arguments;</span><br><span class="line">        if (!timer) &#123;</span><br><span class="line">            timer = setTimeout(function () &#123;</span><br><span class="line">                fn.apply(context, args);</span><br><span class="line">                timer = null;</span><br><span class="line">            &#125;, delay);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;防抖和节流的原理和代码&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
