<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>哦。</title>
  
  <subtitle>知行合一</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wine1.github.io/"/>
  <updated>2021-02-28T14:19:45.580Z</updated>
  <id>https://wine1.github.io/</id>
  
  <author>
    <name>田京京呀~</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>面经收集</title>
    <link href="https://wine1.github.io/2021/02/28/%E9%9D%A2%E7%BB%8F%E6%94%B6%E9%9B%86/"/>
    <id>https://wine1.github.io/2021/02/28/%E9%9D%A2%E7%BB%8F%E6%94%B6%E9%9B%86/</id>
    <published>2021-02-28T14:18:50.000Z</published>
    <updated>2021-02-28T14:19:45.580Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>ES6中class是语法还是语法糖<br>class是语法糖 class本身指向构造函数，利用构造函数来实现更加清晰的结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">//class 实现类的继承</span><br><span class="line">class Person &#123;</span><br><span class="line">constructor (name, sex) &#123;</span><br><span class="line">this.name = name</span><br><span class="line">this.sex = sex</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class Man extends Person &#123;</span><br><span class="line">constructor (name) &#123;</span><br><span class="line">super(&apos;&apos;, &apos;male&apos;)</span><br><span class="line">this.name = name</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">let Jy = new Man(&apos;Jy&apos;)</span><br><span class="line"> </span><br><span class="line">console.log(Jy.name, Jy.sex) // Jy, &apos;male&apos;</span><br><span class="line"></span><br><span class="line">//用es6的语法重写上述代码</span><br><span class="line"></span><br><span class="line">function person(name,sex) &#123;</span><br><span class="line">    this.name=name</span><br><span class="line">    this.sex=sex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Man(name) &#123;</span><br><span class="line">    this.name=name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Man.prototype=new Person(&apos;&apos;,&apos;male&apos;)</span><br><span class="line">let Jy=new Man(&apos;Jy)</span><br><span class="line">console.log(Jy.name, Jy.sex) // Jy, mal</span><br></pre></td></tr></table></figure></li><li><p>ES6语法最后会转成ES5执行，是通过什么工具实现的<br>babel</p></li><li><p>手写extends这个关键字是通过什么实现的 🌟<br>prototype</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 声明一个父类 person</span><br><span class="line">function Person(name,sex)&#123;</span><br><span class="line">this.name=name</span><br><span class="line">this.sex=sex</span><br><span class="line">this.run=function()&#123;</span><br><span class="line">conso.log(this.name+&apos;run&apos;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//原型链继承</span><br><span class="line">function Man()&#123;&#125;</span><br><span class="line">Man.prototype=new Person()</span><br><span class="line">Man.prototype.name=&quot;joe&quot;</span><br><span class="line">let man=new Man()</span><br><span class="line">man.run()</span><br><span class="line">Man.prototype.jump=function()&#123;</span><br><span class="line">    console.log(this.name+&apos;jump&apos;)</span><br><span class="line">&#125;</span><br><span class="line">Man.prototype.jump()</span><br><span class="line">console.log(Man.prototype)</span><br></pre></td></tr></table></figure></li><li><p>原型的终点是哪里<br>可以用以下三句话来理解原型链：</p><ul><li>每个对象都拥有一个原型对象: newObj的原型是foo.prototype。</li><li>对象的原型可能也是继承其他原型对象的: foo.prototype也有它的原型Object.prototype。</li><li>一层一层的，以此类推，这种关系就是原型链。<br>原型链的终点是 Object.prototype</li></ul></li><li><p>typeof和instanceof有什么区别 typeof null /array都是什么？🌟<br>typeof可以得出变量的类型 而instanceof可以得出变量是否在对象的原型链上<br>typeof null/array 都是object类型<br>构造/new调用函数的时候做了什么：</p></li><li><p>创建一个全新的对象。🌟<br>这个新对象的原型(Object.getPrototypeOf(target))指向构造函数的prototype对象。<br>该函数的this会绑定在新创建的对象上。<br>如果函数没有返回其他对象，那么new表达式中的函数调用会自动返回这个新对象。<br>我们称这个新对象为构造函数的实例。</p></li><li><p>vue一个父组件包了两个子组件，只关注两个生命周期beforMounted和mounted，这三个组件的两个生命周期的执行顺序<br>父beforeCreate-&gt;父created-&gt;父beforeMount-&gt;子beforeCreate-&gt;子created-&gt;子beforeMount-&gt;子mounted-&gt;父mounted</p></li><li><p>子组件插槽this指向是怎么实现的 ❓</p></li><li><p>scoped是怎么实现的<br>通过 Webpack 调用 VueJS 中相应 Loader , 给组件HTML模板添加自定义属性 (Attribute) data-v-x, 以及给组件内CSS选择器添加对应的属性选择器 (Attribute Selector) [data-v-x], 达到组件内样式只能生效与组件内HTML的效果</p></li><li><p>ajax熟悉吗？get和post的区别<br>get请求url是明文的，不适合用来做涉及敏感信息的请求 get的数据可以缓存<br>post请求可以发送更多数据<br><a href="https://www.zhihu.com/question/28586791" target="_blank" rel="noopener">https://www.zhihu.com/question/28586791</a></p></li><li><p>CORS简单请求和非简单请求 ❓</p></li><li><p>前端怎么ajax带cookie 🌟</p></li><li><p>ajax同域请求下，ajax会自动带上同源的cookie；</p></li></ol><p>2.ajax同域请求下，ajax添加自定义请求头（或原装）header，前端、后台不需要增加任何配置，<br>并且不会因为增加自定义请求头header，而引起预检查请求（options）;</p><p>3.ajax跨域请求下，如果不需要携带cookie、请求头header，只需要在后台配置相应参数即可；<br>    后台参数：<br>    （1）.Access-Control-Allow-Origin：设置允许跨域的配置， 响应头指定了该响应的资源是否被允许与给定的origin共享；</p><p>4.ajax跨域请求下，ajax不会自动携带同源的cookie，需要通过前端配置相应参数才可以跨域携带同源cookie，后台配置相应参数才可以跨域返回同源cookie；<br>前端参数：<br>    withCredentials: true(发送Ajax时，Request header中会带上Cookie信息)<br>后台参数：<br>    （1）.Access-Control-Allow-Origin：设置允许跨域的配置， 响应头指定了该响应的资源是否被允许与给定的origin共享；<br>        特别说明：配置了Access-Control-Allow-Credentials:true则不能把Access-Control-Allow-Origin设置为通配符*；<br>    （2）.Access-Control-Allow-Credentials：响应头表示是否可以将对请求的响应暴露给页面（cookie）。返回true则可以，其他值均不可以。</p><p>5.ajax请求任何时候都不会带上不同源的cookie（Cookie遵循同源策略）；</p><p>6.ajax跨域请求下，ajax添加自定义或者原装的请求头，请求会发送两次，第一次预检查请求，第二次正常请求，详细描述：<br>post（或GET）跨域请求时，分为简单请求和复杂请求，跨域携带自定义或者原装请求头头时是复杂请求。<br>复杂请求会先发送一个method 为option的请求，目的是试探服务器是否接受发起的请求. 如果服务器说可以，再进行post（或GET）请求。<br>对于java后台web应用，跨域需要添加一个过滤器（过滤器详见下面案例代码），这个过滤器做的事就是，加了几个http header在返回中，<br>Access-Control-Allow-Origin 我能接受的跨域请求来源，配置主机名<br>Access-Control-Allow-Headers 表示能接受的http头部，别忘了加入你自己发明创造的头部<br>Access-Control-Allow-Methods 表示能接受的http mothed ，反正就那几种，全写上也无妨，猥琐点就只写 post, options<br>如果是OPTION返回空，设置返回码为202，202表示通过。<br>需要前端配置相应参数才可以跨域携带请求头，后台配置相应参数进行跨域携带请求头；<br>前端参数：<br>    crossDomain:true(发送Ajax时，Request header 中会包含跨域的额外信息，但不会含cookie（作用不明，不会影响请求头的携带）)<br>后台参数（配置预检查过滤器）：<br>    （1）Access-Control-Allow-Origin：设置允许跨域的配置， 响应头指定了该响应的资源是否被允许与给定的origin共享；<br>    （2）Access-Control-Allow-Credentials：响应头表示是否可以将对请求的响应暴露给页面（cookie）。返回true则可以，其他值均不可以；<br>    （3）Access-Control-Allow-Headers:用于预检请求中，列出了将会在正式请求的 Access-Control-Request-Headers 字段中出现的首部信息。（自定义请求头）；<br>    （4）Access-Control-Allow-Methods：在对预检请求的应答中明确了客户端所要访问的资源允许使用的方法或方法列表；</p><ol start="13"><li><p>跨域请求是浏览器的限制还是服务器的限制，跨域发出去能不能到服务器<br>首先我们要明确一个问题，请求跨域了，请求到底发出去没有？答案是肯定发出去了，但是浏览器拦截了响应。<br><a href="https://juejin.cn/post/6844903816060469262" target="_blank" rel="noopener">https://juejin.cn/post/6844903816060469262</a></p></li><li><p>prototype和<strong>proto</strong>的区别 🌟</p></li><li><p>Function和Object原型链上有什么关联关系</p></li><li><p>你觉得webpack是什么样的工具</p></li><li><p>js怎么改变this指向，有什么区别，手写实现一下apply<br>改变函数执行时的上下文<br>call 和 apply 的区别在于参数的写法，call可以接收任意个参数，apply的第二个参数只能是数组<br>bind 方法 与 apply 和 call 比较类似，也能改变函数体内的 this 指向。不同的是，bind 方法的返回值是函数，并且需要稍后调用，才会执行。而 apply 和 call 则是立即调用。</p></li><li><p>箭头函数里的this指向，有一道题输出console</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function Person(name) &#123;</span><br><span class="line">this.name = name;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.print = function() &#123;</span><br><span class="line">return this.name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Person(&apos;abc&apos;);</span><br><span class="line">const a = new Person(&apos;abc&apos;).print.call(&#123;&#125;);</span><br><span class="line">console.log(a);</span><br><span class="line"></span><br><span class="line">const fn = () =&gt; &#123;</span><br><span class="line">this.x = &apos;z&apos;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const b = &#123;x: &apos;y&apos;&#125;;</span><br><span class="line">fn.call(b);</span><br><span class="line">console.log(b);</span><br></pre></td></tr></table></figure></li><li><p>事件委托<br>把一个或者一组元素的事件委托到它的父层或者更外层元素上，真正绑定事件的是外层元素，当事件响应到需要绑定的元素上时，会通过事件冒泡机制从而触发它的外层元素的绑定事件上，然后在外层元素上去执行函数。</p></li><li><p>事件循环 手写eventloop 🌟</p></li><li><p>异步</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">async function async1()&#123;</span><br><span class="line">console.log(&apos;async1 start&apos;)</span><br><span class="line">await async2()</span><br><span class="line">console.log(&apos;async1 end&apos;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async function async2()&#123;</span><br><span class="line">console.log(&apos;async2&apos;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(&apos;script start&apos;)</span><br><span class="line"></span><br><span class="line">setTimeout(function()&#123;</span><br><span class="line">console.log(&apos;setTimeOut&apos;)</span><br><span class="line">&#125;, 0)</span><br><span class="line"></span><br><span class="line">async1()</span><br><span class="line"></span><br><span class="line">new Promise(function(resolve)&#123;</span><br><span class="line">console.log(&apos;promise1&apos;)</span><br><span class="line">resolve()</span><br><span class="line">&#125;).then(function()&#123;</span><br><span class="line">console.log(&apos;promise2&apos;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">console.log(&apos;script end&apos;)</span><br></pre></td></tr></table></figure></li><li><p>浏览器渲染机制，js阻塞渲染有什么优化方法<br>把js放在页面最后 按需加载</p></li><li><p>css垂直居中<br>verticaml-algin:middle<br>flex布局 algin-item:center</p></li><li><p>改变css属性什么会触发回流什么触发重绘 transform会回流吗<br>页面首次渲染<br>浏览器窗口大小发生改变<br>元素尺寸或位置发生改变<br>元素内容变化（文字数量或图片大小等等）<br>元素字体大小变化<br>添加或者删除可见的DOM元素<br>激活CSS伪类（例如：:hover）<br>查询某些属性或调用某些方法<br>transform不在布局层发生 所以不引发回流</p></li><li><p>怎么避免回流重绘有什么优化方法<br>CSS<br>避免使用table布局。<br>尽可能在DOM树的最末端改变class。<br>避免设置多层内联样式。<br>将动画效果应用到position属性为absolute或fixed的元素上。<br>避免使用CSS表达式（例如：calc()）。</p></li></ol><p>JavaScript<br>避免频繁操作样式，最好一次性重写style属性，或者将样式列表定义为class并一次性更改class属性。<br>避免频繁操作DOM，创建一个documentFragment，在它上面应用所有DOM操作，最后再把它添加到文档中。<br>也可以先为元素设置display: none，操作结束后再把它显示出来。因为在display属性为none的元素上进行的DOM操作不会引发回流和重绘。<br>避免频繁读取会引发回流/重绘的属性，如果确实需要多次使用，就用一个变量缓存起来。<br>对具有复杂动画的元素使用绝对定位，使它脱离文档流，否则会引起父元素及后续元素频繁回流。</p><ol start="25"><li>又一道题</li></ol><p>function M1() {<br>this.hello = ‘hello’;<br>}</p><p>function M2() {<br>this.world -&amp;nbsp = ‘world’;<br>}<br>怎么实现一个多重继承。。可以在一个object对象即可以输出M1的hello也可以输出M2.world</p><ol start="26"><li><p>了解过object.create()?然后问我怎么创建一个没有原型方法的空对象，特别干净的对象？（提示我我居然没想到。。。傻了，原型链的头是null直接Object.create(null)就行了。。。）<br><a href="https://juejin.cn/post/6844903589815517192" target="_blank" rel="noopener">https://juejin.cn/post/6844903589815517192</a></p></li><li><p>最长无重复字符子串</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;ES6中class是语法还是语法糖&lt;br&gt;class是语法糖 class本身指向构造函数，利用构造函数来实现更加清晰的结构&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;
      
    
    </summary>
    
    
    
      <category term="面试" scheme="https://wine1.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>js的宏任务和微任务</title>
    <link href="https://wine1.github.io/2020/09/23/js%E7%9A%84%E5%AE%8F%E4%BB%BB%E5%8A%A1%E5%92%8C%E5%BE%AE%E4%BB%BB%E5%8A%A1/"/>
    <id>https://wine1.github.io/2020/09/23/js%E7%9A%84%E5%AE%8F%E4%BB%BB%E5%8A%A1%E5%92%8C%E5%BE%AE%E4%BB%BB%E5%8A%A1/</id>
    <published>2020-09-23T14:45:29.000Z</published>
    <updated>2020-09-23T14:55:59.932Z</updated>
    
    <content type="html"><![CDATA[<p>.宏任务（macrotask ）和微任务（microtask ）</p><p>macrotask 和 microtask 表示异步任务的两种分类。</p><p>在挂起任务时，JS 引擎会将所有任务按照类别分到这两个队列中，首先在 macrotask 的队列（这个队列也被叫做 task queue）中取出第一个任务，执行完毕后取出 microtask 队列中的所有任务顺序执行；之后再取 macrotask 任务，周而复始，直至两个队列的任务都取完。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">    //执行后 回调一个宏事件</span><br><span class="line">    console.log(&apos;内层宏事件3&apos;)</span><br><span class="line">&#125;, 0)</span><br><span class="line">console.log(&apos;外层宏事件1&apos;);</span><br><span class="line"></span><br><span class="line">new Promise((resolve) =&gt; &#123;</span><br><span class="line">    console.log(&apos;外层宏事件2&apos;);</span><br><span class="line">    resolve()</span><br><span class="line">&#125;).then(() =&gt; &#123;</span><br><span class="line">    console.log(&apos;微事件1&apos;);</span><br><span class="line">&#125;).then(()=&gt;&#123;</span><br><span class="line">    console.log(&apos;微事件2&apos;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>打印结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">外层宏事件1</span><br><span class="line">外层宏事件2</span><br><span class="line">微事件1</span><br><span class="line">微事件2</span><br><span class="line">内层宏事件3</span><br></pre></td></tr></table></figure><p>宏任务 setTimeOut setInterval<br>微任务 nextTick promise<br>先执行微任务 再执行宏任务</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;.宏任务（macrotask ）和微任务（microtask ）&lt;/p&gt;
&lt;p&gt;macrotask 和 microtask 表示异步任务的两种分类。&lt;/p&gt;
&lt;p&gt;在挂起任务时，JS 引擎会将所有任务按照类别分到这两个队列中，首先在 macrotask 的队列（这个队列也被叫做 task queue）中取出第一个任务，执行完毕后取出 microtask 队列中的所有任务顺序执行；之后再取 macrotask 任务，周而复始，直至两个队列的任务都取完。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>封装一个组件</title>
    <link href="https://wine1.github.io/2020/09/13/%E5%B0%81%E8%A3%85%E4%B8%80%E4%B8%AA%E7%BB%84%E4%BB%B6/"/>
    <id>https://wine1.github.io/2020/09/13/%E5%B0%81%E8%A3%85%E4%B8%80%E4%B8%AA%E7%BB%84%E4%BB%B6/</id>
    <published>2020-09-13T11:42:52.000Z</published>
    <updated>2021-01-16T14:43:37.426Z</updated>
    
    <content type="html"><![CDATA[<p>自己封装一个组件</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;</span><br><span class="line">    &lt;title&gt;diago&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;./diago.css&quot; /&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;button id=&quot;showDiago&quot;&gt;点击打开弹窗&lt;/button&gt;</span><br><span class="line">    &lt;script src=&quot;./diago.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      document.getElementById(&quot;showDiago&quot;).addEventListener(&apos;click&apos;, function(e) &#123;</span><br><span class="line">        dialog.show(&#123;</span><br><span class="line">          title: &quot;biaoti&quot;,</span><br><span class="line">          content: &quot;抱歉，该游戏暂无Android版本&quot;,</span><br><span class="line">          cancel: function() &#123;</span><br><span class="line">            console.log(111);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">var dialog = (function() &#123;</span><br><span class="line">  var elem, dialog, cancelBtn, confirmBtn;</span><br><span class="line">  /**</span><br><span class="line">   * @method getNeedElement 获取所需要的节点</span><br><span class="line">   */</span><br><span class="line">  var getNeedElement = function() &#123;</span><br><span class="line">    elem = document.querySelector(&quot;.dialog-wrapper&quot;);</span><br><span class="line">    dialog = document.querySelector(&quot;.dialog&quot;);</span><br><span class="line">    cancelBtn = document.querySelector(&quot;.cancel-btn&quot;);</span><br><span class="line">    confirmBtn = document.querySelector(&quot;.confirm-btn&quot;);</span><br><span class="line">  &#125;;</span><br><span class="line">  /**</span><br><span class="line">   * @method show 打开dialog组件</span><br><span class="line">   */</span><br><span class="line">  var show = function(options = &#123;&#125;) &#123;</span><br><span class="line">    let &#123;</span><br><span class="line">      title = &quot;&quot;,</span><br><span class="line">      content = &quot;默认content&quot;,</span><br><span class="line">      btns = [&quot;确定&quot;, &quot;取消&quot;],</span><br><span class="line">      confirm = null,</span><br><span class="line">      cancel = null</span><br><span class="line">    &#125; = options;</span><br><span class="line">    let btnTemp = &quot;&quot;;</span><br><span class="line">    btns.forEach((item, index) =&gt; &#123;</span><br><span class="line">      if (index == 2) return;</span><br><span class="line">      let btnClass = index == 0 ? &quot;confirm-btn&quot; : &quot;cancel-btn&quot;;</span><br><span class="line">      let temp = `&lt;div class=&quot;btn $&#123;btnClass&#125;&quot;&gt;$&#123;item&#125;&lt;/div&gt;`;</span><br><span class="line">      btnTemp += temp;</span><br><span class="line">    &#125;);</span><br><span class="line">    let html = `&lt;div class=&quot;dialog-wrapper&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;dialog&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;title&quot;&gt;$&#123;title&#125;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;content&quot;&gt;$&#123;content&#125;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;buttons&quot;&gt;$&#123;btnTemp&#125;&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;`; // 添加到Body</span><br><span class="line">    document.body.innerHTML += html;</span><br><span class="line">    getNeedElement();</span><br><span class="line">    bindEvent(confirm, cancel);</span><br><span class="line">    return elem;</span><br><span class="line">  &#125;;</span><br><span class="line">  /**</span><br><span class="line">   * @method hide 关闭dialog组件</span><br><span class="line">   */</span><br><span class="line">  var hide = function() &#123;</span><br><span class="line">    elem.remove(elem);</span><br><span class="line">    // elem.parentNode.removeChild(elem);</span><br><span class="line">  &#125;;</span><br><span class="line">  /**</span><br><span class="line">   * @method bindEvent 给dialog绑定事件</span><br><span class="line">   * @param &#123;Object&#125; confirm 确认回调</span><br><span class="line">   * @param &#123;Object&#125; cancel 取消回调</span><br><span class="line">   */</span><br><span class="line">  var bindEvent = function(confirm, cancel) &#123;</span><br><span class="line">    confirmBtn &amp;&amp;</span><br><span class="line">      confirmBtn.addEventListener(&quot;click&quot;, e =&gt; &#123;</span><br><span class="line">        hide();</span><br><span class="line">        confirm &amp;&amp; confirm();</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">    cancelBtn &amp;&amp;</span><br><span class="line">      cancelBtn.addEventListener(&quot;click&quot;, e =&gt; &#123;</span><br><span class="line">        hide();</span><br><span class="line">        cancel &amp;&amp; cancel();</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  return &#123; show, hide &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">body,html &#123;  font-family: -apple-system, BlinkMacSystemFont, &apos;Segoe UI&apos;, Roboto, Oxygen, Ubuntu, Cantarell, &apos;Open Sans&apos;, &apos;Helvetica Neue&apos;, sans-serif;</span><br><span class="line">&#125;.dialog-wrapper &#123;  position: fixed;  display: flex;  justify-content: center;  align-items: center;  top: 0;  left: 0;  width: 100vw;  height: 100vh;  background-color: rgba(49, 49, 49, 0.5);  color: #313131;  font-size: 10px;  -webkit-tap-highlight-color: transparent;</span><br><span class="line">&#125;.dialog-wrapper.fadeIn &#123;  animation: fadeIn .2s ease;</span><br><span class="line">&#125;.dialog-wrapper.fadeOut &#123;  animation: fadeOut .2s ease forwards;</span><br><span class="line">&#125;.dialog-wrapper .dialog &#123;  position: relative;  width: 85vw;  max-width: 30em;  border-radius: .4em;  background-color: #fff;  box-sizing: border-box;  overflow: hidden;  box-shadow: 0 0 10px 1px rgba(0, 0, 0, 0.1);</span><br><span class="line">&#125;.dialog-wrapper .dialog.slideDown &#123;  animation: slideDown .2s ease;</span><br><span class="line">&#125;.dialog-wrapper .dialog.slideUp &#123;  animation: slideUp .2s ease forwards;</span><br><span class="line">&#125;.dialog-wrapper .dialog.scaleIn &#123;  animation: scaleIn 0.2s cubic-bezier(0.07, 0.89, 0.95, 1.4);</span><br><span class="line">&#125;.dialog-wrapper .dialog.scaleOut &#123;  animation: scaleOut 0.2s cubic-bezier(0.07, 0.89, 0.95, 1.4) forwards;</span><br><span class="line">&#125;.dialog-wrapper .dialog .btn &#123;  cursor: pointer;</span><br><span class="line">&#125;.dialog-wrapper .dialog .btn:active &#123;  background-color: #f4f4f4;</span><br><span class="line">&#125;.dialog-wrapper .dialog .close-btn &#123;  position: absolute;  top: 0;  right: 0;  padding: 10px;  font-size: 1.8em;</span><br><span class="line">&#125;.dialog-wrapper .dialog .title &#123;  font-size: 1.8em;  padding: 15px;  text-align: center;  background-color: #f4f4f4;</span><br><span class="line">&#125;.dialog-wrapper .dialog .title:empty &#123;  display: none;</span><br><span class="line">&#125;.dialog-wrapper .dialog .content &#123;  padding: 40px 20px;  font-size: 1.6em;  text-align: center;</span><br><span class="line">&#125;.dialog-wrapper .dialog .buttons &#123;  font-size: 1.6em;  display: flex;  flex-flow: row-reverse;</span><br><span class="line">&#125;.dialog-wrapper .dialog .buttons .btn &#123;  flex: 1;  padding: 15px;  text-align: center;  border-top: 1px solid #ebebeb;</span><br><span class="line">&#125;.dialog-wrapper .dialog .buttons .btn.confirm-btn &#123;  color: #f2d985;</span><br><span class="line">&#125;.dialog-wrapper .dialog .buttons .btn.cancel-btn &#123;  color: #313131;  border-right: 1px solid #ebebeb;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@keyframes slideDown &#123;  from &#123;    transform: translateY(-3em);</span><br><span class="line">  &#125;  to &#123;    transform: translateY(0);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@keyframes slideUp &#123;  from &#123;    transform: translateY(0);</span><br><span class="line">  &#125;  to &#123;    transform: translateY(-3em);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@keyframes fadeIn &#123;  from &#123;    opacity: .5;</span><br><span class="line">  &#125;  to &#123;    opacity: 1;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@keyframes fadeOut &#123;  from &#123;    opacity: 1;</span><br><span class="line">  &#125;  to &#123;    opacity: 0;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@keyframes scaleIn &#123;  from &#123;    transform: scale(0.8);</span><br><span class="line">  &#125;  to &#123;    transform: scale(1);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@keyframes scaleOut &#123;  from &#123;    transform: scale(1);</span><br><span class="line">  &#125;  to &#123;    transform: scale(0.8);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自己封装一个组件&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://wine1.github.io/2020/09/09/%E6%97%A5%E5%B8%B8%E6%94%B6%E9%9B%86%E4%B8%80%E4%BA%9B%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://wine1.github.io/2020/09/09/%E6%97%A5%E5%B8%B8%E6%94%B6%E9%9B%86%E4%B8%80%E4%BA%9B%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2020-09-09T14:27:01.971Z</published>
    <updated>2021-01-31T13:50:35.521Z</updated>
    
    <content type="html"><![CDATA[<hr><p>title: 日常收集一些面试题<br>date: 2020-09-09 22:27:01<br>tags:</p><ul><li>面试</li></ul><hr><p>朋友面试记录下一些值得看看的面试题</p><a id="more"></a><ol><li><p>js数据类型以及检测方法<br> js数据类型有 number String Boolean null undefined object<br> typeof 检测数据类型 但是对于数组 null之类的 输出都是object<br> instanceof 检测一个实例是否属于对象的原型<br> constructor 不太懂    </p></li><li><p>this在不同位置的指向<br>在箭头函数中 this指向调用它的对象（继承外层代码块中的this指向）<br>匿名函数中 this指向全局对象<br>定时器中this指向全局对象<br>apply call中this指向参数中的对象 若参数为空 默认指向全局对象<br>普通函数中this指向调用当前上下文中的this </p></li><li><p>call bind apply的区别<br>call和apply的区别在于参数的不同 call只能一个个的接收参数 apply可以接收一个数组作为参数<br>bind和call的区别在于bind方法是事先把fn的this改变为我们要想要的结果，并且把对应的参数值准备好，以后要用到了，直接的执行即可，也就是说bind同样可以改变this的指向，但和apply、call不同就是不会马上的执行</p></li><li><p>new操作时js引擎做了哪些<br> 新建一个对象，讲构造函数的作用域赋值给新对象（这一步this指向新对象），执行构造函数（为新对象添加属性），最后返回这个新建的对象<br> 红宝书的答案<br> • 创建一个空对象，将它的引用赋给 this，继承函数的原型。<br> • 通过 this 将属性和方法添加至这个对象<br> • 最后返回 this 指向的新对象，也就是实例（如果没有手动返回其他的对象）</p></li><li><p>扩展运算符<br>对象中的扩展运算符(…)用于取出参数对象中的所有可遍历属性，拷贝到当前对象之中</p></li><li><p>事件委托原理<br> 利用时间冒泡原理，将事件加到父级 触发执行效果<br> 能极大地提升性能 不需要新建许多dom对象<br> 也解决了操作不了新增的dom这个问题</p></li><li><p>如何阻止事件冒泡和默认效果<br> // 阻止浏览器的默认行为<br> window.event?window.event.returnValue=false:e.preventDefault();<br> //停止事件冒泡<br> window.event?window.event.cancelBubble=true:e.stopPropagation();</p></li><li><p>如何获取元素的宽高<br> javascript中获取dom元素高度和宽度的方法如下：<br> 网页可见区域宽： document.body.clientWidth<br> 网页可见区域高： document.body.clientHeight<br> 网页可见区域宽： document.body.offsetWidth (包括边线的宽)<br> 网页可见区域高： document.body.offsetHeight (包括边线的高)<br> 网页正文全文宽： document.body.scrollWidth<br> 网页正文全文高： document.body.scrollHeight<br> 网页被卷去的高： document.body.scrollTop<br> 网页被卷去的左： document.body.scrollLeft</p><p> 对应的dom元素的宽高有以下几个常用的：</p><p> 元素的实际高度：document.getElementById(“div”).offsetHeight<br> 元素的实际宽度：document.getElementById(“div”).offsetWidth<br> 元素的实际距离左边界的距离：document.getElementById(“div”).offsetLeft<br> 元素的实际距离上边界的距离：document.getElementById(“div”).offsetTop</p></li><li><p>重绘与重排<br>涉及到尺寸大小位置的变化都会引发重排 重绘不一定会重排 但重排一定会伴随着重绘<br>重排是一件十分消耗性能的事情 我们可以通过优化尽量减少重排 比如合并dom操作 </p></li><li><p>vuex中mutation和action的区别<br>mutation，更改Vuex的store中的状态的唯一方法是提交mutation<br>Action 类似于 mutation，不同在于：<br>Action 提交的是 mutation，而不是直接变更状态。<br>Action 可以包含任意异步操作。</p></li><li><p>vue的生命周期<br>beforeCreate<br>created//创建实例<br>beforeMount<br>mounted//挂载实例<br>beforeUpdate<br>updated//更新实例<br>beforeDestory<br>destoryed//销毁实例<br><a href="https://www.cnblogs.com/qidh/p/11431998.html" target="_blank" rel="noopener">https://www.cnblogs.com/qidh/p/11431998.html</a></p></li><li><p>实现继承<br><a href="https://www.cnblogs.com/humin/p/4556820.html" target="_blank" rel="noopener">https://www.cnblogs.com/humin/p/4556820.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//父类</span><br><span class="line">function Animals(name) &#123;</span><br><span class="line">    this.name=name||&apos;animals&apos;</span><br><span class="line">    this.sleep=function() &#123;</span><br><span class="line">        console.log(this.name+&apos;sleep&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//父类的原型方法</span><br><span class="line"></span><br><span class="line">Animal.prototype.eat=function(food) &#123;</span><br><span class="line">    console.log(this.name+&apos;在吃&apos;+food)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原型链继承</p></li></ol><ol start="13"><li><p>实现dialog组件，有title content onPk onCancel几个props<br>详情见另一个文章 封装一个组件</p></li><li><p>实现curry函数 curry函数是一个加工函数的函数。将任何函数（a）传入curry函数处理之后，会得到一个可以记住参数的函数（a1）调用a1并传参，当参数数量不满足a的要求时，a1可以缓存这些参数并支持继续调用，当传入的参数数量足够时返回a的执行结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">function a(x,y,z) &#123;</span><br><span class="line">    return x+y+z</span><br><span class="line">&#125;</span><br><span class="line">const a1=curry(a)</span><br><span class="line"></span><br><span class="line">a1(1)(2)(3)//6</span><br><span class="line">a1(1,2)(3)//6</span><br><span class="line">a1(1)(2,3)//6</span><br><span class="line">a1(1,2,3)//6</span><br><span class="line"></span><br><span class="line">//解法</span><br><span class="line">function curry(func)&#123;</span><br><span class="line">    var num=[]</span><br><span class="line">   var count = function()&#123;</span><br><span class="line">       num=num.concat([...arguments])//获取函数的入参 </span><br><span class="line">       if(num.length&lt;func.length) &#123;</span><br><span class="line">           return count//递归</span><br><span class="line">       &#125;</span><br><span class="line">       var result=func(...num)</span><br><span class="line">       num=[]//调用结束后清除闭包值</span><br><span class="line">       return result</span><br><span class="line">    &#125;</span><br><span class="line">    return count//返回一个闭包</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;title: 日常收集一些面试题&lt;br&gt;date: 2020-09-09 22:27:01&lt;br&gt;tags:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;面试&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;朋友面试记录下一些值得看看的面试题&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>正则表达式面试题</title>
    <link href="https://wine1.github.io/2020/09/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://wine1.github.io/2020/09/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2020-09-06T10:29:06.000Z</published>
    <updated>2020-11-23T14:30:30.427Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.runoob.com/regexp/regexp-syntax.html" target="_blank" rel="noopener">菜鸟教程的正则表达式教程</a><br>正则表达式，我实在不知道要把它归类在哪个分类里。<br>以后肯定还会有一些不知道怎么分类的文章，索性开个新分类–杂<br>哈哈哈</p><a id="more"></a><p>正则表达式的作用总结起来就两个字，匹配。<br><strong>常见匹配方式</strong><br>/d 匹配0到9内的任意数字 字符组的简写形式<br>[0-9] 匹配0到9内的任意数字 字符组匹配<br>. 可以匹配任意字符 通配符<br><strong><em>将内容放在圆括号中</em></strong>捕获分组和<strong><em>\1</em></strong>向后引用<br>通常可以将简写式取反，取反的结果就是排除。如<code>\d</code>是匹配任意数字<code>\D</code>则用来匹配任意非数字字符<br>在匹配的过程中使用量词<br>匹配的过程离不开元字符，元字符可以说是基础了。</p><p>###元字符###<br><a href="http://www.runoob.com/regexp/regexp-metachar.html" target="_blank" rel="noopener">菜鸟教程中关于元字符的详细介绍</a></p><p>然后就是匹配规则之类的东西，看起来很复杂，但是实际上就是一个熟能生巧的过程，用多了之后就能一目了然了</p><p>正则表达式常见面试题</p><p>1.给一个连字符串例如：get-element-by-id转化成驼峰形式。<br>2.匹配二进制数字<br>3.非零的十进制数字 (有至少一位数字, 但是不能以0开头)<br>4.匹配一年中的12个月<br>5.匹配qq号最长为13为<br>6.匹配常见的固定电话号码<br>7.匹配ip地址<br>8.匹配用尖括号括起来的以a开头的字符串<br>9.分割数字每三个以一个逗号划分<br>10.判断字符串是否包含数字<br>11.判断电话号码<br>12.判断是否符合指定格式<br>13.判断是否符合USD格式<br>14.JS实现千位分隔符<br>15.获取 url 参数<br>16.验证邮箱<br>17.验证身份证号码<br>18.匹配汉字<br>19.去除首尾的’/‘<br>20.判断日期格式是否符合 ‘2017-05-11’的形式，简单判断，只判断格式<br>21.判断日期格式是否符合 ‘2017-05-11’的形式，严格判断（比较复杂）<br>22.IPv4地址正则<br>23.十六进制颜色正则<br>24.车牌号正则<br>25.过滤HTML标签<br>26.密码强度正则，最少6位，包括至少1个大写字母，1个小写字母，1个数字，1个特殊字符<br>27.URL正则<br>28.匹配浮点数</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.runoob.com/regexp/regexp-syntax.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;菜鸟教程的正则表达式教程&lt;/a&gt;&lt;br&gt;正则表达式，我实在不知道要把它归类在哪个分类里。&lt;br&gt;以后肯定还会有一些不知道怎么分类的文章，索性开个新分类–杂&lt;br&gt;哈哈哈&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>基础知识面试题</title>
    <link href="https://wine1.github.io/2020/09/06/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://wine1.github.io/2020/09/06/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2020-09-06T10:28:11.000Z</published>
    <updated>2021-01-18T14:55:03.203Z</updated>
    
    <content type="html"><![CDATA[<p>浏览器/html/css面试题</p><a id="more"></a><ol><li><p>什么是盒模型<br>盒模型（内容（content）,内边距（padding）,边框（border）,外边距（margin））<br>分为ie盒模型和w3c盒模型<br>ie中content包含了padding和border<br>w3c的content不包含padding和border 即 width就是content的宽度</p></li><li><p>行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？行内元素和块级元素有什么区别？<br>（1）行内元素有：a( 锚点) ,b(粗体(不推荐)) ,span(常用内联容器，定义文本内区块) img(图片) input(输入框) select(项目选择) strong(粗体强调) label(表格标签) cite (引用)code(计算机代码)<br>（2）块级元素有：div ul(无序列表) ol(有序列表) dl(定义列表) table(表格)form(表单) h1 (一级标题))p(段落)pre(预格式化)<br>（3）常见的空元素： </p><figure class="highlight plain"><figcaption><span><hr> <img> <input> <link> <meta> ```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">鲜为人知的是： </span><br><span class="line">```&lt;area&gt; &lt;base&gt; &lt;col&gt; &lt;command&gt; &lt;embed&gt; &lt;keygen&gt; &lt;param&gt; &lt;source&gt; &lt;track&gt; &lt;wbr&gt;</span><br></pre></td></tr></table></figure></li><li><p>简述src和href的区别<br> 1.src 是指向物件的来源地址，是引入。在 img、script、iframe 等元素上使用。<br> 2.href 是超文本引用，指向需要连结的地方，是与该页面有关联的，是引用。在 link和a 等元素上使用。<br> 使用区别：<br> src通常用作“拿取”（引入），href 用作 “连结前往”（引用）。</p></li><li><p>什么是css Hack<br> 由于不同厂商的浏览器，比如Internet Explorer、Chrome、Mozilla Firefox、Safari等，或者是统一厂商的浏览器的不同版本，比如IE6和IE7，对CSS的解析和认识不完全一样，因此会导致生成的页面效果不一样，得不到我们所需要的页面效果。</p><p> 这个时候，我们就需要针对不同的浏览器，去写不同CSS，让它能够同时兼容不同的浏览器，能在不同的浏览器中，也能得到我们想要的页面效果。</p><p> 这个针对不同的浏览器写不同的CSS code的过程，就叫CSS hack!</p></li><li><p>什么叫优雅降级和渐进增强<br>渐进增强 progressive enhancement： 针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。 优雅降级 graceful degradation： 一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。 </p></li><li><p>px和em的区别<br> PX实际上就是像素，用PX设置字体大小时，比较稳定和精确。但如果改变浏览器的缩放，原本的布局就会被打破，这时候就可以使用em定义页面的字体大小，em是相对于父元素的，1em等于一倍的父元素字体大小。<br> EM是相对于其父元素来设置字体大小的，这样就会存在一个问题，进行任何元素设置，都有可能需要知道他父元素的大小，也比较麻烦。而Rem是相对于根元素<html>，这样就意味着，我们只需要在根元素确定一个参考值，所以rem用的更广泛。</html></p></li><li><p>Http的状态码有哪些<br> 200 – 请求成功<br> 301 – 资源(网页等)被永久转移到其它URL<br> 404 – 请求的资源(网页等)不存在<br> 500 – 内部服务器错误</p></li><li><p>一次完整的HTTP事务是怎么一个过程<br>域名解析<br>三次握手<br>发起请求<br>服务器返回<br>浏览器解析<br>浏览器渲染</p></li><li><p>HTTPS是如何实现加密<br> HTTPS就是使用SSL/TLS协议进行加密传输，让客户端拿到服务器的公钥，然后客户端随机生成一个对称加密的秘钥，使用公钥加密，传输给服务端，后续的所有信息都通过该对称秘钥进行加密解密，完成整个HTTPS的流程。<br> 如果用公钥对数据进行加密，只有用对应的私钥才能解密。因为加密和解密使用的是两个不同的密钥，所以这种算法叫作非对称加密算法。<br> 非对称加密传输对称加密秘钥</p></li><li><p>浏览器是如何渲染页面的<br>构建dom树，构建css-dom树</p></li><li><p>浏览器的内核有哪些？分别有什么代表的浏览器<br>Trident 内核：IE，搜狗高速浏览器等<br>Gecko 内核：Mozilla Firefox（火狐浏览器），Netscape6及以上版本<br>Webkit 内核：Safari 、曾经的 Chrome<br>Presto 内核：Opera 7到Opera12.17（欧朋浏览器）之间的版本采用的内核<br>Blink 内核：现在 Chrome 内核是 Blink，Opera现已改用Google Chrome的Blink内核</p></li><li><p>页面导入css时，使用link和@import有什么区别<br>@import 只能在css中使用 要等页面加载完毕之后才会加载<br>link会在页面加载同时加载</p></li><li><p>如何优化图像，图像格式的区别<br>雪碧图 把简单的纯色图标做成字体</p></li><li><p>列举你了解Html5. Css3</p></li><li><p>data-id transition animation</p></li><li><p>可以通过哪些方法优化css3 animation渲染<br>CSS动画属性会触发整个页面的重排，重绘,box-shadow和gradients的性能杀手 在使用css3 transtion做动画效果时，优先选择transform，尽量不要使用height，width，margin和padding。</p></li><li><p>列举几个前端性能方面的优化</p></li><li><p>如何实现同一个浏览器多个标签页之间的通信</p></li><li><p>浏览器的存储技术有哪些</p></li><li><p>css定位方式</p></li><li><p>尽可能多的写出浏览器兼容性问题</p></li><li><p>垂直上下居中的方法</p></li><li><p>响应式布局原理</p></li><li><p>清除浮动的方法</p></li><li><p>http协议和tcp协议</p></li><li><p>刷新页面，js请求一般会有哪些地方有缓存处理</p></li><li><p>如何对网站的文件和资源进行优化</p></li><li><p>你对网页标准和W3C重要性的理解</p></li><li><p>Http和https的区别</p></li><li><p>data-属性的作用</p></li><li><p>如何让Chrome浏览器显示小于12px的文字</p></li><li><p>哪些操作会引起页面回流（Reflow）</p></li><li><p>CSS预处理器的比较less sass</p></li><li><p>如何实现页面每次打开时清除本页缓存</p></li><li><p>什么是Virtual DOM,为何要用Virtual DOM</p></li><li><p>伪元素和伪类的区别</p></li><li><p>http的几种请求方法和区别</p></li><li><p>前端需要注意哪些SEO</p></li><li><p>的title和alt有什么区别</p></li><li><p>从浏览器地址栏输入url到显示页面的步骤</p></li><li><p>如何进行网站性能优化</p></li><li><p>语义化的理解</p></li><li><p>HTML5的离线储存怎么使用，工作原理能不能解释一下？</p></li><li><p>浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢</p></li><li><p>iframe有那些缺点？</p></li><li><p>WEB标准以及W3C标准是什么?</p></li><li><p>Doctype作用? 严格模式与混杂模式如何区分？它们有何意义?</p></li><li><p>HTML全局属性(global attribute)有哪些</p></li><li><p>Canvas和SVG有什么区别？</p></li><li><p>如何在页面上实现一个圆形的可点击区域？</p></li><li><p>网页验证码是干嘛的，是为了解决什么安全问题</p></li><li><p>请描述一下 cookies，sessionStorage 和 localStorage 的区别？</p></li><li><p>CSS选择器有哪些？哪些属性可以继承？</p></li><li><p>CSS优先级算法如何计算？</p></li><li><p>CSS3有哪些新特性？</p></li><li><p>请解释一下CSS3的flexbox（弹性盒布局模型）,以及适用场景？</p></li><li><p>用纯CSS创建一个三角形的原理是什么？</p></li><li><p>常见的兼容性问题？</p></li><li><p>为什么要初始化CSS样式</p></li><li><p>absolute的containing block计算方式跟正常流有什么不同？</p></li><li><p>CSS里的visibility属性有个collapse属性值？在不同浏览器下以后什么区别？</p></li><li><p>display:none与visibility：hidden的区别？</p></li><li><p>position跟display、overflow、float这些特性相互叠加后会怎么样？</p></li><li><p>对BFC规范(块级格式化上下文：block formatting context)的理解？</p></li><li><p>为什么会出现浮动和什么时候需要清除浮动？清除浮动的方式？</p></li><li><p>上下margin重合的问题</p></li><li><p>设置元素浮动后，该元素的display值是多少？</p></li><li><p>移动端的布局用过媒体查询吗？</p></li><li><p>CSS优化、提高性能的方法有哪些？</p></li><li><p>浏览器是怎样解析CSS选择器的？</p></li><li><p>在网页中的应该使用奇数还是偶数的字体？为什么呢？</p></li><li><p>margin和padding分别适合什么场景使用？</p></li><li><p>元素竖向的百分比设定是相对于容器的高度吗？</p></li><li><p>全屏滚动的原理是什么？用到了CSS的哪些属性？</p></li><li><p>什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的IE？</p></li><li><p>视差滚动效果？</p></li><li><p>::before 和 :after中双冒号和单冒号有什么区别？解释一下这2个伪元素的作用</p></li><li><p>让页面里的字体变清晰，变细用CSS怎么做？</p></li><li><p>position:fixed;在android下无效怎么处理？</p></li><li><p>如果需要手动写动画，你认为最小时间间隔是多久，为什么？</p></li><li><p>li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？</p></li><li><p>display:inline-block 什么时候会显示间隙？</p></li><li><p>有一个高度自适应的div，里面有两个div，一个高度100px，希望另一个填满剩下的高度</p></li><li><p>png、jpg、gif 这些图片格式解释一下，分别什么时候用。有没有了解过webp？</p></li><li><p>style标签写在body后与body前有什么区别？</p></li><li><p>CSS属性overflow属性定义溢出元素内容区的内容会如何处理?</p></li><li><p>阐述一下CSS Sprites</p></li></ol><p>移动端热点问题</p><ol><li><p>1px border问题<br> 使用1px 再用transform缩放到50%</p></li><li><p>2X图 3X图适配<br>根据dpr显示2x图/3x图</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">. bg-image(@url)&#123;</span><br><span class="line">  background-image:~&quot;url(&apos;@&#123;url&#125;@2x.png&apos;)&quot;;</span><br><span class="line">  @media (-webkit-min-device-pixel-ratio: 3),(min-device-pixel-ratio: 3)&#123;</span><br><span class="line">    background-image:~&quot;url(&apos;@&#123;url&#125;@3x.png&apos;)&quot;;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>固定定位布局 键盘挡住输入框内容</p></li><li><p>click的300ms延迟问题和点击穿透问题</p></li><li><p>phone及ipad下输入框默认内阴影</p></li><li><p>防止手机中页面放大和缩小</p></li><li><p>flex布局</p></li><li><p>px、em、rem、%、vw、vh、vm这些单位的区别</p></li><li><p>移动端适配- dpr浅析</p></li><li><p>移动端扩展点击区域</p></li><li><p>上下拉动滚动条时卡顿、慢</p></li><li><p>长时间按住页面出现闪退</p></li><li><p>ios和android下触摸元素时出现半透明灰色遮罩</p></li><li><p>active兼容处理 即 伪类：active失效</p></li><li><p>webkit mask兼容处理</p></li><li><p>pc端与移动端字体大小的问题</p></li><li><p>transiton闪屏</p></li><li><p>圆角bug</p></li><li><p>如何解决禁用表单后移动端样式不统一问题 ?</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;浏览器/html/css面试题&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="面试" scheme="https://wine1.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>vue面试题</title>
    <link href="https://wine1.github.io/2020/09/06/vue%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://wine1.github.io/2020/09/06/vue%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2020-09-06T10:27:45.000Z</published>
    <updated>2020-11-23T14:49:34.023Z</updated>
    
    <content type="html"><![CDATA[<p>vue面试题</p><a id="more"></a><p>生命周期函数面试题</p><ol><li><p>什么是 vue 生命周期,vue生命周期的作用是什么<br> Vue 实例从开始创建、初始化数据、编译模板、挂载Dom和渲染、更新和渲染、卸载等一系列过程，这是 Vue 的生命周期</p></li><li><p>第一次页面加载会触发哪几个钩子<br> beforeCreate() created() beforeMount() mounted() </p></li><li><p>简述每个周期具体适合哪些场景<br> beforeCreate()<br> created()<br> beforeMount()<br> mounted()<br> beforeUpdate()<br> updated()<br> beforeDestory()<br> destroy()</p></li><li><p>created和mounted的区别<br> create阶段new了实例 但是并没有挂载 不能进行dom操作</p></li></ol><p>vue路由面试题</p><ol><li><p>mvvm 框架是什么？</p></li><li><p>vue-router 是什么?它有哪些组件<br> vue-router是vue官方路由管理器</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link :to=‘‘ class=‘active-class‘&gt;   //路由声明式跳转 ，active-class是标签被点击时的样式</span><br><span class="line">&lt;router-view&gt;                  //渲染路由的容器</span><br><span class="line">&lt;keep-alive&gt;                    //缓存组件</span><br></pre></td></tr></table></figure></li><li><p>active-class 是哪个组件的属性？<br> router-link 用于做选中样式的切换</p></li><li><p>怎么定义 vue-router 的动态路由? 怎么获取传过来的值</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//路由配置文件中 配置动态路由</span><br><span class="line">&#123;</span><br><span class="line">    path: &apos;/detail/:id&apos;,</span><br><span class="line">    name: &apos;Detail&apos;,</span><br><span class="line">    component: Detail</span><br><span class="line">&#125;</span><br><span class="line">//跳转时页面</span><br><span class="line">var id = 1;</span><br><span class="line">this.$router.push(&apos;/detail/&apos; + id)</span><br><span class="line"></span><br><span class="line">//跳转后页面获取参数</span><br><span class="line">this.$route.params.id</span><br></pre></td></tr></table></figure><ul><li>通过动态路由方式</li><li>通过query传值</li><li>通过params属性传值</li><li>1.动态路由和query属性传值 页面刷新参数不会丢失， params会丢失 2.动态路由一般用来传一个参数时居多(如详情页的id), query、params可以传递一个也可以传递多个参数 。</li></ul></li><li><p>vue-router 有哪几种导航钩子?<br> <a href="https://www.cnblogs.com/kzxiaotan/p/11676872.html" target="_blank" rel="noopener">https://www.cnblogs.com/kzxiaotan/p/11676872.html</a></p></li><li><p>route和router 的区别<br> 1.$router是VueRouter的实例方法,可以认为是全局的路由对象，包含了所有路由的对象和属性。<br> 2.$route是一个跳转的路由对象，可以认为是当前组件的路由管理，指当前激活的路由对象，包含当前url解析得到的数据，可以从对象里获取一些数据。如name,path等。</p></li><li><p>vue-router响应路由参数的变化</p></li></ol><ol start="8"><li>vue-router传参</li></ol><ol start="9"><li>vue-router的两种模式</li></ol><ol start="10"><li>vue-router实现路由懒加载（ 动态加载路由 ）</li></ol><p>1.vue优点<br>2.vue父组件向子组件传递数据？<br>3.子组件像父组件传递事件<br>4.v-show和v-if指令的共同点和不同点<br>5.如何让CSS只在当前组件中起作用<br>6.的作用是什么?<br>7.如何获取dom<br>8.说出几种vue当中的指令和它的用法？<br>9.vue-loader是什么？使用它的用途有哪些？<br>10.为什么使用key<br>11.axios及安装<br>12.axios解决跨域<br>13.v-modal的使用<br>14.scss的安装以及使用<br>15.请说出vue.cli项目中src目录每个文件夹和文件的用法？<br>16.分别简述computed和watch的使用场景<br>17.v-on可以监听多个方法吗<br>18.$nextTick的使用<br>19.vue组件中data为什么必须是一个函数<br>20.vue事件对象的使用<br>21 组件间的通信<br>22.渐进式框架的理解<br>23.Vue中双向数据绑定是如何实现的<br>24.单页面应用和多页面应用区别及优缺点<br>25.vue中过滤器有什么作用及详解<br>26.v-if和v-for的优先级<br>27.assets和static的区别<br>28.列举常用的指令<br>29.vue常用的修饰符<br>30.数组更新检测<br>31.Vue.set视图更新<br>32.自定义指令详解<br>33.vue的两个核心点<br>34.vue和jQuery的区别<br>35 引进组件的步骤<br>36.Vue-cli打包命令是什么？打包后悔导致路径问题，应该在哪里修改<br>37.三大框架的对比<br>38.跨组件双向数据绑定<br>39.delete和Vue.delete删除数组的区别<br>40.SPA首屏加载慢如何解决<br>41.Vue-router跳转和location.href有什么区别<br>42.vue slot<br>43.你们vue项目是打包了一个js文件，一个css文件，还是有多个文件？<br>44.vue遇到的坑，如何解决的？<br>45.Vue里面router-link在电脑上有用，在安卓上没反应怎么解决？<br>46.Vue2中注册在router-link上事件无效解决方法<br>47.RouterLink在IE和Firefox中不起作用（路由不跳转）的问题<br>48.axios的特点有哪些<br>49.请说下封装 vue 组件的过程？<br>50.vue 各种组件通信方法（父子 子父 兄弟 爷孙 毫无关系的组件）<br>51.params和query的区别<br>52.vue mock数据<br>53 vue封装通用组件<br>54.vue初始化页面闪动问题<br>55.vue禁止弹窗后的屏幕滚动<br>56.vue更新数组时触发视图更新的方法<br>57.vue常用的UI组件库<br>58.vue如何引进本地背景图片<br>59.vue如何引进sass<br>60.vue修改打包后静态资源路径的修改<br>vuex常见面试题</p><p>1.vuex是什么？怎么使用？哪种功能场景使用它？<br>2.vuex有哪几种属性<br>3.不使用Vuex会带来什么问题<br>4.Vue.js中ajax请求代码应该写在组件的methods中还是vuex的actions中？<br>5.vuex一个例子方法<br>6.Vuex中如何异步修改状态<br>7.Vuex中actions和mutations的区别<br>vue项目实战</p><p>1.顶部悬停效果<br>2.电话本列表效果（ 右边字母分类 上下滑动 旁边字母显示高亮）<br>3.vue做代理<br>4.Vue路由切换时的左滑和右滑效果示例</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;vue面试题&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>react面试题</title>
    <link href="https://wine1.github.io/2020/09/06/react%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://wine1.github.io/2020/09/06/react%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2020-09-06T10:26:05.000Z</published>
    <updated>2020-11-23T14:50:52.343Z</updated>
    
    <content type="html"><![CDATA[<p>react面试题</p><a id="more"></a><p>1.react 生命周期函数<br>2.react生命周期中，最适合与服务端进行数据交互的是哪个函数<br>3.运行阶段生命周期调用顺序<br>4.shouldComponentUpdate 是做什么的，（react 性能优化是哪个周期函数？）<br>5.指出(组件)生命周期方法的不同<br>react 基础面试题</p><p>1.React 中 keys 的作用是什么？<br>2.React 中 refs 的作用是什么？<br>3.React 中有三种构建组件的方式<br>4.调用 setState 之后发生了什么？<br>5.react diff 原理（常考，大厂必考）<br>6.为什么建议传递给 setState 的参数是一个 callback 而不是一个对象<br>7.除了在构造函数中绑定 this，还有其它方式吗<br>8.setState第二个参数的作用<br>9.(在构造函数中)调用 super(props) 的目的是什么<br>10.简述 flux 思想<br>11.在 React 当中 Element 和 Component 有何区别？<br>12.描述事件在 React 中的处理方式。<br>13.createElement 和 cloneElement 有什么区别？<br>14.如何告诉 React 它应该编译生产环境版本？<br>15.Controlled Component 与 Uncontrolled Component 之间的区别是什么？<br>react组件面试题</p><p>1.展示组件(Presentational component)和容器组件(Container component)之间有何不同<br>2.类组件(Class component)和函数式组件(Functional component)之间有何不同<br>3.(组件的)状态(state)和属性(props)之间有何不同<br>4.何为受控组件(controlled component)<br>5.何为高阶组件(higher order component)<br>6.应该在 React 组件的何处发起 Ajax 请求<br>7.react中组件传值<br>8.什么时候在功能组件( Class Component )上使用类组件( Functional Component )？<br>9.受控组件( controlled component )与不受控制的组件( uncontrolled component )有什么区别？<br>10.react 组件的划分业务组件技术组件？<br>redux面试题</p><p>1.redux中间件<br>2.redux有什么缺点<br>3.了解 redux 么，说一下 redux 把</p><p>react性能比较面试题</p><p>1.vue和react的区别<br>2.react性能优化的方案<br>3.React 项目用过什么脚手架<br>4.介绍一下webpack webpack<br>5.如果你创建了类似于下面的 Twitter 元素，那么它相关的类定义是啥样子的？<br>6.为什么我们需要使用 React 提供的 Children API 而不是 JavaScript 的 map？</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;react面试题&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>js面试题</title>
    <link href="https://wine1.github.io/2020/09/06/js%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://wine1.github.io/2020/09/06/js%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2020-09-06T10:25:21.000Z</published>
    <updated>2020-11-23T14:45:14.743Z</updated>
    
    <content type="html"><![CDATA[<p>js面试题集锦</p><a id="more"></a><p>1.简述同步和异步的区别<br>2.怎么添加、移除、复制、创建、和查找节点<br>3.实现一个函数clone 可以对Javascript中的五种主要数据类型（Number、string、Object、Array、Boolean）进行复制<br>4.如何消除一个数组里面重复的元素<br>5.写一个返回闭包的函数<br>6.使用递归完成1到100的累加<br>7.Javascript有哪几种数据类型<br>8.如何判断数据类型<br>9.console.log(1+’2’)和console.log(1-‘2’)的打印结果<br>10.Js的事件委托是什么，原理是什么<br>11.如何改变函数内部的this指针的指向<br>12.列举几种解决跨域问题的方式，且说明原理<br>13.谈谈垃圾回收机制的方式及内存管理<br>14.写一个function ，清除字符串前后的空格<br>15.js实现继承的方法有哪些<br>16.判断一个变量是否是数组，有哪些办法<br>17.let ，const ，var 有什么区别<br>18.箭头函数与普通函数有什么区别<br>19.随机取1-10之间的整数<br>20.new操作符具体干了什么<br>21.Ajax原理<br>22.模块化开发怎么做<br>23.异步加载Js的方式有哪些<br>24.xml和 json的区别<br>25.webpack如何实现打包的<br>26.常见web安全及防护原理<br>27.用过哪些设计模式<br>28.为什么要同源限制<br>29.offsetWidth/offsetHeight,clientWidth/clientHeight与scrollWidth/scrollHeight的区别<br>30.javascript有哪些方法定义对象<br>31.说说你对promise的了解<br>32.谈谈你对AMD、CMD的理解<br>33.web开发中会话跟踪的方法有哪些<br>34.介绍js有哪些内置对象？<br>35.说几条写JavaScript的基本规范？<br>36.javascript创建对象的几种方式？<br>37.eval是做什么的？<br>38.null，undefined 的区别？<br>39.[“1”, “2”, “3”].map(parseInt) 答案是多少？<br>40.javascript 代码中的”use strict”;是什么意思 ? 使用它区别是什么？<br>41.js延迟加载的方式有哪些？<br>42.defer和async<br>43.说说严格模式的限制<br>44.attribute和property的区别是什么？<br>45.ECMAScript6 怎么写class么，为什么会出现class这种东西?<br>46.常见兼容性问题<br>47.函数防抖节流的原理<br>48.原始类型有哪几种？null是对象吗？<br>49.为什么console.log(0.2+0.1==0.3) //false<br>50.说一下JS中类型转换的规则？<br>51.深拷贝和浅拷贝的区别？如何实现<br>52.如何判断this？箭头函数的this是什么<br>53.== 和 ===的区别<br>54.什么是闭包<br>55.JavaScript原型，原型链 ? 有什么特点？<br>56.typeof()和instanceof()的用法区别<br>57.什么是变量提升<br>58.all、apply以及bind函数内部实现是怎么样的<br>59.为什么会出现setTimeout倒计时误差？如何减少<br>60.谈谈你对JS执行上下文栈和作用域链的理解<br>61.new的原理是什么？通过new的方式创建对象和通过字面量创建有什么区别？<br>62.prototype 和 proto 区别是什么？<br>63.使用ES5实现一个继承？<br>64.取数组的最大值（ES5、ES6）<br>65.ES6新的特性有哪些？<br>66.promise 有几种状态, Promise 有什么优缺点 ?<br>67.Promise构造函数是同步还是异步执行，then呢 ?promise如何实现then处理 ?<br>68.Promise和setTimeout的区别 ?<br>69.如何实现 Promise.all ?<br>70.如何实现 Promise.finally ?<br>71.如何判断img加载完成<br>72.如何阻止冒泡？<br>73.如何阻止默认事件？<br>74.ajax请求时，如何解释json数据<br>75.json和jsonp的区别?<br>76.如何用原生js给一个按钮绑定两个onclick事件？<br>77.拖拽会用到哪些事件<br>78.document.write和innerHTML的区别<br>79.jQuery的事件委托方法bind 、live、delegate、on之间有什么区别？<br>80.浏览器是如何渲染页面的？<br>81.$(document).ready()方法和window.onload有什么区别？<br>82.jquery中.get()提交和post()提交有区别吗？<br>83.对前端路由的理解？前后端路由的区别？<br>84.手写一个类的继承<br>85.XMLHttpRequest：XMLHttpRequest.readyState;状态码的意思</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;js面试题集锦&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>es6常见面试题</title>
    <link href="https://wine1.github.io/2020/09/06/es6%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://wine1.github.io/2020/09/06/es6%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2020-09-06T10:24:35.000Z</published>
    <updated>2020-09-13T12:09:51.750Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>ES6新增方法面试题</p><p>1.let const var比较<br>let 块级作用域 不可以重复声明 不存在变量提升<br>var 函数作用域<br>const 声明后必须立即初始化 然后值不能改变</p><p>2.反引号（`）标识 模板字符串<br>3.函数默认参数<br>在ES6中，可以为函数的参数指定默认值。函数默认参数允许在没有值或undefined被传入时使用默认形参<br>参数变量是默认声明的，所以不能用let或const再次声明。<br>使用参数默认值时，函数不能有同名参数。<br>显式传入undefined或不传值时使用函数默认参数值；传入’’或null时使用传入的参数值。<br>通常情况下，定义了默认值的参数，应该是函数的尾参数。</p><p>4.箭头函数</p><p>5.属性简写</p><p>6.方法简写<br>7.Object.keys()方法，获取对象的所有属性名或方法名<br>8.Object.assign ()原对象的属性和方法都合并到了目标对象<br>9.for…of 循环<br>10.import和export<br>11.Promise对象<br>12.解构赋值<br>13.set数据结构（可用于快速去重）<br>14.Spread Operator 展开运算符(…)<br>15.字符串新增方法</p><p>ES6数组面试题</p><p>1.forEach(callback)<br>forEach是一个数组方法，可以用来把一个函数套用在一个数组中的每个元素上，只可用于数组</p><p>2.map()<br>map() 方法按照原始数组元素顺序依次处理元素。<br>注意： map() 不会对空数组进行检测。<br>注意： map() 不会改变原始数组。</p><p>3.filter()<br>filter过滤数组中的元素<br>注意： filter() 不会对空数组进行检测。<br>注意： filter() 不会改变原始数组。</p><p>4.reduce()<br>reduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。<br>reduce() 可以作为一个高阶函数，用于函数的 compose。<br>注意: reduce() 对于空数组是不会执行回调函数的。</p><p>5.some()<br>some() 方法用于检测数组中的元素是否满足指定条件（函数提供）。<br>some() 方法会依次执行数组的每个元素：<br>如果有一个元素满足条件，则表达式返回true , 剩余的元素不会再执行检测。<br>如果没有满足条件的元素，则返回false。<br>注意： some() 不会对空数组进行检测。<br>注意： some() 不会改变原始数组。</p><p>6.every()<br>every() 方法用于检测数组所有元素是否都符合指定条件（通过函数提供）。<br>every() 方法使用指定函数检测数组中的所有元素：<br>如果数组中检测到有一个元素不满足，则整个表达式返回 false ，且剩余的元素不会再进行检测。<br>如果所有元素都满足条件，则返回 true。<br>注意： every() 不会对空数组进行检测。<br>注意： every() 不会改变原始数组。</p><p>ES6编程题</p><p>1.使用解构，实现两个变量的值的交换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let a=1;let b=2;</span><br><span class="line"> [a,b]=[b,a];</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;ES6新增方法面试题&lt;/p&gt;
&lt;p&gt;1.let const var比较&lt;br&gt;let 块级作用域 不可以重复声明 不存在变量提升&lt;br&gt;var 函数作用域&lt;br&gt;const 声明后必须立即初始化 然后值不能改变&lt;/p&gt;
&lt;p&gt;2.反引号（
      
    
    </summary>
    
    
    
      <category term="面试" scheme="https://wine1.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>js中的防抖和节流</title>
    <link href="https://wine1.github.io/2020/08/25/js%E4%B8%AD%E7%9A%84%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/"/>
    <id>https://wine1.github.io/2020/08/25/js%E4%B8%AD%E7%9A%84%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</id>
    <published>2020-08-25T15:16:15.000Z</published>
    <updated>2020-11-28T14:06:37.866Z</updated>
    
    <content type="html"><![CDATA[<p>防抖和节流的原理和代码</p><a id="more"></a><p>debounce，去抖动。策略是当事件被触发时，设定一个周期延迟执行动作，若期间又被触发，则重新设定周期，直到周期结束，执行动作。 这是debounce的基本思想，在后期又扩展了前缘debounce，即执行动作在前，然后设定周期，周期内有事件被触发，不执行动作，且周期重新设定。</p><p>throttling，节流的策略是，固定周期内，只执行一次动作，若有新事件触发，不执行。周期结束后，又有事件触发，开始新的周期。 节流策略也分前缘和延迟两种。与debounce类似，延迟是指 周期结束后执行动作，前缘是指执行动作后再开始周期。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">/**防抖 一段时间内重复触发则清除定时器重新开始计时 */</span><br><span class="line">const debounce = function (fn, delay) &#123;</span><br><span class="line">    let timer = null</span><br><span class="line">    if (!delay) &#123;</span><br><span class="line">        delay = 1000</span><br><span class="line">    &#125;</span><br><span class="line">    return function (fn, delay) &#123;</span><br><span class="line">        clearTimeout(timer)</span><br><span class="line">        timer = setTimeout(fn, delay)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**节流 第一次点击执行后一段时间内再次触发不执行 直到计时结束才可以再次被触发 */</span><br><span class="line">const throttling = function (fn, delay) &#123;</span><br><span class="line">    var timer = null;</span><br><span class="line">    if (!delay) &#123;</span><br><span class="line">        delay = 1000</span><br><span class="line">    &#125;</span><br><span class="line">    return function () &#123;</span><br><span class="line">        var context = this;</span><br><span class="line">        var args = arguments;</span><br><span class="line">        if (!timer) &#123;</span><br><span class="line">            timer = setTimeout(function () &#123;</span><br><span class="line">                fn.apply(context, args);</span><br><span class="line">                timer = null;</span><br><span class="line">            &#125;, delay);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;防抖和节流的原理和代码&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>leetcode之数组</title>
    <link href="https://wine1.github.io/2020/08/12/leetcode%E4%B9%8B%E6%95%B0%E7%BB%84/"/>
    <id>https://wine1.github.io/2020/08/12/leetcode%E4%B9%8B%E6%95%B0%E7%BB%84/</id>
    <published>2020-08-12T15:36:36.000Z</published>
    <updated>2020-11-23T14:52:19.943Z</updated>
    
    <content type="html"><![CDATA[<h2 id="leetcode——数组类知识点及题型总结"><a href="#leetcode——数组类知识点及题型总结" class="headerlink" title="leetcode——数组类知识点及题型总结"></a>leetcode——数组类知识点及题型总结</h2><p>很多题都能靠暴力解法 但是通常都会有时间复杂度或者空间复杂度超出限制的情况，因此都不予讨论</p><a id="more"></a><ol><li><p>k-sum类 如 第一题 twosum 计算数组中的哪些值得和能等于给定的target 有时候题目中会带有是否能重复使用一个值的限制</p><ul><li>hash 遍历数组 将每一个值存入hash表中 并检测hash表中是否有 target-nums[i] 的结果 如果有 则结果就是 i 和对应的hash表中的值 时间复杂度O(n)</li><li>two-points </li></ul></li><li><p>区间类</p></li></ol><ol start="3"><li>子数组类</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;leetcode——数组类知识点及题型总结&quot;&gt;&lt;a href=&quot;#leetcode——数组类知识点及题型总结&quot; class=&quot;headerlink&quot; title=&quot;leetcode——数组类知识点及题型总结&quot;&gt;&lt;/a&gt;leetcode——数组类知识点及题型总结&lt;/h2&gt;&lt;p&gt;很多题都能靠暴力解法 但是通常都会有时间复杂度或者空间复杂度超出限制的情况，因此都不予讨论&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>小程序同层渲染</title>
    <link href="https://wine1.github.io/2020/08/12/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%90%8C%E5%B1%82%E6%B8%B2%E6%9F%93/"/>
    <id>https://wine1.github.io/2020/08/12/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%90%8C%E5%B1%82%E6%B8%B2%E6%9F%93/</id>
    <published>2020-08-12T15:33:13.000Z</published>
    <updated>2020-08-12T15:33:47.128Z</updated>
    
    <content type="html"><![CDATA[<h2 id="同层渲染"><a href="#同层渲染" class="headerlink" title="同层渲染"></a>同层渲染</h2><p>小程序的内容大多是渲染在 WebView 上的，如果把 WebView 看成单独的一层，那么由系统自带的这些原生组件则位于另一个更高的层级（如 canvas、video）。两个层级是完全独立的，因此无法简单地通过使用 z-index 控制原生组件和非原生组件之间的相对层级。想要在原生组件之上只能用 cover-view 和 cover-image 来实现。但 cover-view 和 cover-image 支持的 css 样式是在很有限，而且经过实践来看，cover-view 在安卓部分机器上性能真的很差。<br><a href="https://developers.weixin.qq.com/community/develop/doc/000aa28d030f60a3c4183eecb5d801" target="_blank" rel="noopener">官方社区说明</a></p><p>然并卵 没有用</p><p>实时音视频小程序开发ios手机无法正常在小程序里视频，安卓手机就可以<br>解决方案： 在 app.json 下 window 下配置一下 “renderingMode”: “seperated”强制关掉同层<br>关掉同层渲染 “renderingMode”: “seperated”,</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;同层渲染&quot;&gt;&lt;a href=&quot;#同层渲染&quot; class=&quot;headerlink&quot; title=&quot;同层渲染&quot;&gt;&lt;/a&gt;同层渲染&lt;/h2&gt;&lt;p&gt;小程序的内容大多是渲染在 WebView 上的，如果把 WebView 看成单独的一层，那么由系统自带的这些原生组件则位于另
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>grid布局</title>
    <link href="https://wine1.github.io/2020/08/12/grid%E5%B8%83%E5%B1%80/"/>
    <id>https://wine1.github.io/2020/08/12/grid%E5%B8%83%E5%B1%80/</id>
    <published>2020-08-12T15:31:12.000Z</published>
    <updated>2020-08-12T15:33:40.530Z</updated>
    
    <content type="html"><![CDATA[<h2 id="grid布局"><a href="#grid布局" class="headerlink" title="grid布局"></a>grid布局</h2><p>gap属性能解决flex多行布局中最后一行布局不满时位置偏移的问题</p><p><a href="http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html" target="_blank" rel="noopener">阮一峰的grid布局教程</a><br>网格布局 将网页划分成一个个网格，可以任意组合不同的网格，做出各种各样的布局。<br>具体么 目前还没有使用过 最近没有用上 没找到合适的应用场景</p><a id="more"></a><p>跟flex布局有一定的相似性</p><p>display 属性<br>display: grid指定一个容器采用网格布局。</p><p>grid-template-columns 属性，<br>grid-template-rows 属性<br>容器指定了网格布局以后，接着就要划分行和列。grid-template-columns属性定义每一列的列宽，grid-template-rows属性定义每一行的行高。</p><p>repeat()<br>有时候，重复写同样的值非常麻烦，尤其网格很多时。这时，可以使用repeat()函数，简化重复的值。<br>repeat()接受两个参数，第一个参数是重复的次数（上例是3），第二个参数是所要重复的值。</p><p>auto-fill 关键字<br>有时，单元格的大小是固定的，但是容器的大小不确定。如果希望每一行（或每一列）容纳尽可能多的单元格，这时可以使用auto-fill关键字表示自动填充。</p><p>fr 关键字<br>为了方便表示比例关系，网格布局提供了fr关键字（fraction 的缩写，意为”片段”）。如果两列的宽度分别为1fr和2fr，就表示后者是前者的两倍。<br>minmax()<br>minmax()函数产生一个长度范围，表示长度就在这个范围之中。它接受两个参数，分别为最小值和最大值。</p><p>auto 关键字<br>auto关键字表示由浏览器自己决定长度。</p><p>网格线的名称<br>grid-template-columns属性和grid-template-rows属性里面，还可以使用方括号，指定每一根网格线的名字，方便以后的引用。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;grid布局&quot;&gt;&lt;a href=&quot;#grid布局&quot; class=&quot;headerlink&quot; title=&quot;grid布局&quot;&gt;&lt;/a&gt;grid布局&lt;/h2&gt;&lt;p&gt;gap属性能解决flex多行布局中最后一行布局不满时位置偏移的问题&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;阮一峰的grid布局教程&lt;/a&gt;&lt;br&gt;网格布局 将网页划分成一个个网格，可以任意组合不同的网格，做出各种各样的布局。&lt;br&gt;具体么 目前还没有使用过 最近没有用上 没找到合适的应用场景&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="css" scheme="https://wine1.github.io/tags/css/"/>
    
      <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>解决小程序列表更新卡顿方案</title>
    <link href="https://wine1.github.io/2020/08/09/%E8%A7%A3%E5%86%B3%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%88%97%E8%A1%A8%E6%9B%B4%E6%96%B0%E5%8D%A1%E9%A1%BF%E6%96%B9%E6%A1%88/"/>
    <id>https://wine1.github.io/2020/08/09/%E8%A7%A3%E5%86%B3%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%88%97%E8%A1%A8%E6%9B%B4%E6%96%B0%E5%8D%A1%E9%A1%BF%E6%96%B9%E6%A1%88/</id>
    <published>2020-08-09T13:34:55.000Z</published>
    <updated>2020-11-21T15:54:42.591Z</updated>
    
    <content type="html"><![CDATA[<h2 id="解决小程序列表更新卡顿方案"><a href="#解决小程序列表更新卡顿方案" class="headerlink" title="解决小程序列表更新卡顿方案"></a>解决小程序列表更新卡顿方案</h2><p>什么情况会引发小程序的渲染性能问题</p><ol><li>setData传递大量的新数据</li><li>频繁的执行setData操作</li><li>过多的页面节点数</li></ol><a id="more"></a><p>官方方案 <a href="https://github.com/Tencent/westore" target="_blank" rel="noopener">https://github.com/Tencent/westore</a></p><p>解决方案（分别针对上述情况）</p><ol><li>data对象中只传输视图层要用的数据 合理利用局部更新</li><li>在不影响业务流程的前提下，将多个 setData 调用合并执行，减少线程间通信频次。<br>当需要在频繁触发的用户事件（如 PageScroll 、 Resize 事件）中调用 setData ，合理的利用 函数防抖（debounce） 和 函数节流（throttle） 可以减少 setData 执行次数。<br>函数防抖（debounce）：函数在触发n秒后才执行一次，如果在n秒内重复触发函数，则重新计算时间。<br>函数节流（throttle）：单位时间内，只会触发一次函数，如果同一个单位时间内触发多次函数，只会有一次生效。</li></ol><p>除了让开发者自觉遵循规则来减少 setData 数据传输量和执行频率之外，我们还可以自己设计一个 diff 算法，重新对 setData 进行封装，使得在 setData 执行之前，让待更新的数据与原 data 数据做 diff 对比，计算出数据差异 patch 对象，判断 patch 对象是否为空，如果为空则跳过执行更新，否则再将 patch 对象执行 setData 操作，从而达到减少数据传输量和降低执行 setData 频率的目的。</p><p>网友方案 转摘自 <a href="https://segmentfault.com/a/1190000019910111" target="_blank" rel="noopener">https://segmentfault.com/a/1190000019910111</a></p><p>小程序看起来很简单易上手 但是有很多奇奇怪怪的坑和一系列的性能优化问题 还需要深入研究才能更好的实现需求提升用户体验</p><h2 id="diff算法实现思路"><a href="#diff算法实现思路" class="headerlink" title="diff算法实现思路"></a>diff算法实现思路</h2><p>策略：在数据更新之前先对更新前后数据做diff对比，找出差异部分patch，如果patch为空，结束更新，否则只对patch部分做更新。</p><p>设计思路：</p><ul><li>diff前先将数据路径写法数据转换成格式化JSON</li><li>使用深度优先遍历策略</li><li>只对同层节点进行对比</li><li>使用数据路径方式实现局部更新</li><li>减少不必要的diff对比<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">const OBJECT_TYPE = &apos;[object Object]&apos;;</span><br><span class="line">const ARRAY_TYPE = &apos;[object Array]&apos;;</span><br><span class="line">const getType = (obj) =&gt; Object.prototype.toString.call(obj);</span><br><span class="line">const initPath = (data) =&gt; &#123;</span><br><span class="line">    if (getType(data) !== OBJECT_TYPE) return;</span><br><span class="line">    for (let item in data) &#123;</span><br><span class="line">        if (/\w+\.\w+/g.test(item) &amp;&amp; item.indexOf(&apos;[&apos;) === -1) &#123;</span><br><span class="line">            const arr = item.split(&apos;.&apos;);</span><br><span class="line">            let result = data, len = arr.length;</span><br><span class="line">            for (let i = 0; i &lt; len - 1; i++) &#123;</span><br><span class="line">                const arrItem = arr[i];</span><br><span class="line">                if (getType(result[arrItem]) !== OBJECT_TYPE) &#123;</span><br><span class="line">                    result[arrItem] = &#123;&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">                result = result[arrItem];</span><br><span class="line">            &#125;</span><br><span class="line">            result[arr[len - 1]] = data[item];</span><br><span class="line">            delete data[item];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">const initData = (cur, pre, root = false) =&gt; &#123;</span><br><span class="line">    if (cur === pre) return;</span><br><span class="line">    const curType = getType(cur), preType = getType(pre);</span><br><span class="line">    if (curType !== preType) return;</span><br><span class="line">    if (curType === ARRAY_TYPE &amp;&amp; cur.length &gt;= pre.length) &#123;</span><br><span class="line">        for (let i = 0; i &lt; pre.length; i++) &#123;</span><br><span class="line">            initData(cur[i], pre[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else if (curType === OBJECT_TYPE &amp;&amp; Object.keys(cur).length &gt;= Object.keys(pre).length) &#123;</span><br><span class="line">        for (let key in pre) &#123;</span><br><span class="line">            if (!root &amp;&amp; cur[key] === undefined) &#123; </span><br><span class="line">                cur[key] = null; </span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                initData(cur[key], pre[key]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">const doDiff = (cur, pre, target, path = &apos;&apos;, root = false) =&gt; &#123;</span><br><span class="line">    if (cur === pre) return;</span><br><span class="line">    const curRootType = getType(cur), preRootType = getType(pre);</span><br><span class="line">    if (curRootType === ARRAY_TYPE &amp;&amp; preRootType === curRootType &amp;&amp; cur.length &gt;= pre.length) &#123;</span><br><span class="line">        for (let i = 0; i &lt; cur.length; i++) &#123;</span><br><span class="line">            doDiff(cur[i], pre[i], target, `$&#123;path&#125;[$&#123;i&#125;]`); </span><br><span class="line">        &#125;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    if (curRootType === OBJECT_TYPE &amp;&amp; preRootType === curRootType &amp;&amp; (root || Object.keys(cur).length &gt;= Object.keys(pre).length)) &#123;</span><br><span class="line">        const keys = Object.keys(cur);</span><br><span class="line">        for (let key of keys) &#123;</span><br><span class="line">            const curVal = cur[key], preVal = pre[key];</span><br><span class="line">            const curType = getType(curVal), preType = getType(preVal);</span><br><span class="line">            if (curVal === preVal) continue;</span><br><span class="line">            if (curType === ARRAY_TYPE &amp;&amp; preType === curType &amp;&amp; curVal.length &gt;= preVal.length) &#123;</span><br><span class="line">                for (let i = 0; i &lt; curVal.length; i++) &#123;</span><br><span class="line">                    doDiff(curVal[i], preVal[i], target, `$&#123;path ? path + &apos;.&apos; : &apos;&apos;&#125;$&#123;key&#125;[$&#123;i&#125;]`);</span><br><span class="line">                &#125;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            if (curType === OBJECT_TYPE &amp;&amp; preType === curType &amp;&amp; Object.keys(curVal).length &gt;= Object.keys(preVal).length) &#123;</span><br><span class="line">                for (let sKey in curVal) &#123;</span><br><span class="line">                    doDiff(curVal[sKey], preVal[sKey], target, `$&#123;path ? path + &apos;.&apos; : &apos;&apos;&#125;$&#123;key&#125;.$&#123;sKey&#125;`);</span><br><span class="line">                &#125;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            target[`$&#123;path ? path + &apos;.&apos; : &apos;&apos;&#125;$&#123;key&#125;`] = curVal;</span><br><span class="line">        &#125;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    target[path] = cur;</span><br><span class="line">&#125;;</span><br><span class="line">export default function diff(data, prevData) &#123;</span><br><span class="line">    const target = &#123;&#125;;</span><br><span class="line">    initPath(data);</span><br><span class="line">    initData(data, prevData, true);</span><br><span class="line">    doDiff(data, prevData, target, &apos;&apos;, true);</span><br><span class="line">    return target;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;解决小程序列表更新卡顿方案&quot;&gt;&lt;a href=&quot;#解决小程序列表更新卡顿方案&quot; class=&quot;headerlink&quot; title=&quot;解决小程序列表更新卡顿方案&quot;&gt;&lt;/a&gt;解决小程序列表更新卡顿方案&lt;/h2&gt;&lt;p&gt;什么情况会引发小程序的渲染性能问题&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;setData传递大量的新数据&lt;/li&gt;
&lt;li&gt;频繁的执行setData操作&lt;/li&gt;
&lt;li&gt;过多的页面节点数&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="小程序" scheme="https://wine1.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>匹配js中的enter换行操作</title>
    <link href="https://wine1.github.io/2020/07/23/%E5%8C%B9%E9%85%8Djs%E4%B8%AD%E7%9A%84enter%E6%8D%A2%E8%A1%8C%E6%93%8D%E4%BD%9C/"/>
    <id>https://wine1.github.io/2020/07/23/%E5%8C%B9%E9%85%8Djs%E4%B8%AD%E7%9A%84enter%E6%8D%A2%E8%A1%8C%E6%93%8D%E4%BD%9C/</id>
    <published>2020-07-23T14:54:50.000Z</published>
    <updated>2021-01-19T15:21:33.664Z</updated>
    
    <content type="html"><![CDATA[<p>前几日在被莫名其妙的提了个bug<br>测试说 测试数据配置的时候有用enter换行 为什么在我的小程序里换行就神奇的消失了<br>第一次遇到这样的情况 在我的认真查找下 终于发现在数据里 字里行间还隐秘的藏着一些 回车符 （我实在是打不出来那个小小的符号了）</p><p>但是在html文本中 这个符号是会被自动忽略掉的 所以我们要把它替换成html可以识别的换行符</p><p> str= str.replace(/[\r\n]/g, “\n”);用 \n 替换<br> 小程序中 只有在在text标签中可以换行 view里面 \n是无法换行的</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前几日在被莫名其妙的提了个bug&lt;br&gt;测试说 测试数据配置的时候有用enter换行 为什么在我的小程序里换行就神奇的消失了&lt;br&gt;第一次遇到这样的情况 在我的认真查找下 终于发现在数据里 字里行间还隐秘的藏着一些 回车符 （我实在是打不出来那个小小的符号了）&lt;/p&gt;
&lt;p
      
    
    </summary>
    
    
    
      <category term="css" scheme="https://wine1.github.io/tags/css/"/>
    
      <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>flex布局知识点</title>
    <link href="https://wine1.github.io/2020/07/22/flex%E5%B8%83%E5%B1%80%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>https://wine1.github.io/2020/07/22/flex%E5%B8%83%E5%B1%80%E7%9F%A5%E8%AF%86%E7%82%B9/</id>
    <published>2020-07-22T14:39:48.000Z</published>
    <updated>2020-08-10T15:26:54.637Z</updated>
    
    <content type="html"><![CDATA[<p>flex是一个十分好用的布局方法，能轻松的实现很多以往需要做复杂的工作才能实现的效果<br>在reactnative中 更是默认的flex布局<br>之前对flex布局都是一知半解，今天看到了一句值得划重点的知识点<br>码起来呀</p><a id="more"></a><p>在前端面试题中有一道经典css的考题：实现元素的水平垂直居中布局<br>当然实现的方法很多，毕竟css是十分灵活的<br>但是在css布局中 一行 <code>align-items:center</code> 就能解决这个问题<br>可能提到flex布局有些人也只能想到<code>justify-content:center</code>和<code>align-items:center</code><br>甚至弄不太清楚到底那个属性决定了水平居中哪个决定了垂直居中</p><p>flex布局中是分为 主轴 和 副轴 的<br>而主轴和副轴的方向又由flex-direction决定 该属性的默认值是row 即 横轴是主轴 竖轴是副轴</p><p>划重点来了</p><p>justify-content属性用于控制项目在<em>主轴</em> 的对齐方式<br>注意这里是主轴而不是横轴 当flex-direction的值是row 或者 就是默认值时，主轴就是横轴，但是当flex-direction值为column时 主轴就是竖轴</p><p>而align-items属性 是控制副轴的排列方式的</p><p>常见flex布局的考点</p><ol><li><p>实现水平垂直居中</p></li><li><p>等高布局</p><ul><li>flex布局中子元素等高</li></ul></li><li><p>Sticky Footer</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- HTML --&gt;</span><br><span class="line">&lt;header&gt;&lt;/header&gt;</span><br><span class="line">&lt;main&gt;&lt;/main&gt;</span><br><span class="line">&lt;footer&gt;&lt;/footer&gt;</span><br><span class="line">//方案1 css</span><br><span class="line">body &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">footer &#123;</span><br><span class="line">    margin-top: auto;</span><br><span class="line">&#125;</span><br><span class="line">//方案2 css</span><br><span class="line">body &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main &#123;</span><br><span class="line">    flex: 1 0 auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>均分列 </p><ul><li>flex布局 </li><li>子元素 width:calc(100% / 3)</li></ul></li><li><p><a href="https://wine1.github.io/2017/12/01/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80%E5%92%8C%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80/">圣杯布局</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;flex是一个十分好用的布局方法，能轻松的实现很多以往需要做复杂的工作才能实现的效果&lt;br&gt;在reactnative中 更是默认的flex布局&lt;br&gt;之前对flex布局都是一知半解，今天看到了一句值得划重点的知识点&lt;br&gt;码起来呀&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="css" scheme="https://wine1.github.io/tags/css/"/>
    
      <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>浅析虚拟DOM</title>
    <link href="https://wine1.github.io/2020/07/15/%E6%B5%85%E6%9E%90%E8%99%9A%E6%8B%9FDOM/"/>
    <id>https://wine1.github.io/2020/07/15/%E6%B5%85%E6%9E%90%E8%99%9A%E6%8B%9FDOM/</id>
    <published>2020-07-14T16:26:01.000Z</published>
    <updated>2020-07-15T13:36:14.211Z</updated>
    
    <content type="html"><![CDATA[<p>虚拟DOM的基本思想</p><ol><li>用js对象模拟DOM树</li><li>比较两颗虚拟DOM树的差异</li><li>把差异应用到真正的DOM树上</li></ol><a id="more"></a><p>看了下，只能说懂了一点点 不甚明白<br><a href="https://www.zhihu.com/question/29504639" target="_blank" rel="noopener">https://www.zhihu.com/question/29504639</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虚拟DOM的基本思想&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用js对象模拟DOM树&lt;/li&gt;
&lt;li&gt;比较两颗虚拟DOM树的差异&lt;/li&gt;
&lt;li&gt;把差异应用到真正的DOM树上&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>重排和重绘</title>
    <link href="https://wine1.github.io/2020/07/14/%E9%87%8D%E6%8E%92%E5%92%8C%E9%87%8D%E7%BB%98/"/>
    <id>https://wine1.github.io/2020/07/14/%E9%87%8D%E6%8E%92%E5%92%8C%E9%87%8D%E7%BB%98/</id>
    <published>2020-07-14T15:34:39.000Z</published>
    <updated>2020-07-14T16:03:36.606Z</updated>
    
    <content type="html"><![CDATA[<p>今天一个bug引发了我对重排和重绘的好奇<br>对这个知识点做个系统的了解和总结</p><a id="more"></a><p>DOM的变化引发了原生的几何属性的变化，比如宽高和位置的变化等，属于重排<br>完成重排后，要将重新构建的其他样式（如颜色）渲染到屏幕上，这个过程就是重绘<br>重排必然会引发重绘，但重绘并不一定伴随着重排</p><p>重排的触发条件：</p><ol><li>添加或者删除可以的DOM元素</li><li>元素位置改变</li><li>元素本身的尺寸变化</li><li>内容改变</li><li>页面渲染器初始化</li><li>浏览器窗口大小发生改变</li></ol><p>重绘和重排的开销是非常昂贵的，如果我们不停的在改变页面的布局，就会造成浏览器耗费大量的开销在进行页面的计算，这样的话，我们页面在用户使用起来，就会出现明显的卡顿。<br>现在的浏览器其实已经对重排进行了优化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var div = document.querySelector(&apos;.div&apos;);</span><br><span class="line">div.style.width = &apos;200px&apos;;</span><br><span class="line">div.style.background = &apos;red&apos;;</span><br><span class="line">div.style.height = &apos;300px&apos;;</span><br></pre></td></tr></table></figure><p>比较久远的浏览器，这段代码会触发页面2次重排，在分别设置宽高的时候，触发2次.<br>当代的浏览器对此进行了优化，这种思路类似于现在流行的MVVM框架使用的虚拟DOM，对改变的DOM节点进行依赖收集，确认没有改变的节点，就进行一次更新。但是浏览器针对重排的优化虽然思路和虚拟DOM接近，但是还是有本质的区别。大多数浏览器通过队列化修改并批量执行来优化重排过程。也就是说上面那段代码其实在现在的浏览器优化下，只构成一次重排。</p><p>除此之外，我们也可以针对性的做一些优化</p><ol><li>最小化重排和重绘（把会引起重排和重绘的操作一起操作，尽量只重绘或重排一次）</li><li>缓存布局信息 缓存布局信息这个概念，在《高性能JavaScript》DOM性能优化中，多次提到类似的思想.<ul><li>比如我现在要得到页面ul节点下面的100个li节点，最好的办法就是第一次获取后就保存起来，减少</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天一个bug引发了我对重排和重绘的好奇&lt;br&gt;对这个知识点做个系统的了解和总结&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>node+koa</title>
    <link href="https://wine1.github.io/2020/06/23/node-koa/"/>
    <id>https://wine1.github.io/2020/06/23/node-koa/</id>
    <published>2020-06-23T13:43:57.000Z</published>
    <updated>2020-06-27T03:33:17.625Z</updated>
    
    <content type="html"><![CDATA[<ol><li>koa+node基础搭建到实现api接口 <a href="https://www.jianshu.com/p/3b60dda108d4" target="_blank" rel="noopener">https://www.jianshu.com/p/3b60dda108d4</a></li><li>使用pm2管理node进程</li><li>使用knex操作数据库</li><li></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;koa+node基础搭建到实现api接口 &lt;a href=&quot;https://www.jianshu.com/p/3b60dda108d4&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.jianshu.com/p/3b60
      
    
    </summary>
    
    
    
      <category term="前端" scheme="https://wine1.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
